                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.5.0 #9253 (Mar 24 2016) (Linux)
                                      4 ; This file was generated Mon Jul 23 11:34:40 2018
                                      5 ;--------------------------------------------------------
                                      6 	.module tdm
                                      7 	.optsdcc -mmcs51 --model-large
                                      8 	
                                      9 ;--------------------------------------------------------
                                     10 ; Public variables in this module
                                     11 ;--------------------------------------------------------
                                     12 	.globl _fhop_set_locked
                                     13 	.globl _fhop_window_change
                                     14 	.globl _set_transmit_channel
                                     15 	.globl _get_transmit_channel
                                     16 	.globl _fhop_sync_channel
                                     17 	.globl _fhop_receive_channel
                                     18 	.globl _packet_at_inject
                                     19 	.globl _packet_ati5_inject
                                     20 	.globl _packet_set_max_xmit
                                     21 	.globl _packet_force_resend
                                     22 	.globl _packet_is_duplicate
                                     23 	.globl _packet_is_injected
                                     24 	.globl _packet_is_resend
                                     25 	.globl _packet_get_next
                                     26 	.globl _delay_msec
                                     27 	.globl _timer2_tick
                                     28 	.globl _radio_temperature
                                     29 	.globl _MAVLink_report
                                     30 	.globl _radio_receive_in_progress
                                     31 	.globl _radio_get_transmit_power
                                     32 	.globl _radio_air_rate
                                     33 	.globl _radio_current_rssi
                                     34 	.globl _radio_last_rssi
                                     35 	.globl _radio_set_channel
                                     36 	.globl _radio_receiver_on
                                     37 	.globl _radio_transmit
                                     38 	.globl _radio_preamble_detected
                                     39 	.globl _radio_receive_packet
                                     40 	.globl _printfl
                                     41 	.globl _panic
                                     42 	.globl _at_command
                                     43 	.globl _constrain
                                     44 	.globl _serial_read_available
                                     45 	.globl _serial_write_buf
                                     46 	.globl _strlen
                                     47 	.globl _memset
                                     48 	.globl _memcpy
                                     49 	.globl _rand
                                     50 	.globl _putchar
                                     51 	.globl _SDN
                                     52 	.globl _NSS1
                                     53 	.globl _IRQ
                                     54 	.globl _PIN_ENABLE
                                     55 	.globl _PIN_CONFIG
                                     56 	.globl _LED_GREEN
                                     57 	.globl _LED_RED
                                     58 	.globl _SPI0EN
                                     59 	.globl _TXBMT0
                                     60 	.globl _NSS0MD0
                                     61 	.globl _NSS0MD1
                                     62 	.globl _RXOVRN0
                                     63 	.globl _MODF0
                                     64 	.globl _WCOL0
                                     65 	.globl _SPIF0
                                     66 	.globl _AD0CM0
                                     67 	.globl _AD0CM1
                                     68 	.globl _AD0CM2
                                     69 	.globl _AD0WINT
                                     70 	.globl _AD0BUSY
                                     71 	.globl _AD0INT
                                     72 	.globl _BURSTEN
                                     73 	.globl _AD0EN
                                     74 	.globl _CCF0
                                     75 	.globl _CCF1
                                     76 	.globl _CCF2
                                     77 	.globl _CCF3
                                     78 	.globl _CCF4
                                     79 	.globl _CCF5
                                     80 	.globl _CR
                                     81 	.globl _CF
                                     82 	.globl _P
                                     83 	.globl _F1
                                     84 	.globl _OV
                                     85 	.globl _RS0
                                     86 	.globl _RS1
                                     87 	.globl _F0
                                     88 	.globl _AC
                                     89 	.globl _CY
                                     90 	.globl _T2XCLK
                                     91 	.globl _T2RCLK
                                     92 	.globl _TR2
                                     93 	.globl _T2SPLIT
                                     94 	.globl _TF2CEN
                                     95 	.globl _TF2LEN
                                     96 	.globl _TF2L
                                     97 	.globl _TF2H
                                     98 	.globl _SI
                                     99 	.globl _ACK
                                    100 	.globl _ARBLOST
                                    101 	.globl _ACKRQ
                                    102 	.globl _STO
                                    103 	.globl _STA
                                    104 	.globl _TXMODE
                                    105 	.globl _MASTER
                                    106 	.globl _PX0
                                    107 	.globl _PT0
                                    108 	.globl _PX1
                                    109 	.globl _PT1
                                    110 	.globl _PS0
                                    111 	.globl _PT2
                                    112 	.globl _PSPI0
                                    113 	.globl _SPI1EN
                                    114 	.globl _TXBMT1
                                    115 	.globl _NSS1MD0
                                    116 	.globl _NSS1MD1
                                    117 	.globl _RXOVRN1
                                    118 	.globl _MODF1
                                    119 	.globl _WCOL1
                                    120 	.globl _SPIF1
                                    121 	.globl _EX0
                                    122 	.globl _ET0
                                    123 	.globl _EX1
                                    124 	.globl _ET1
                                    125 	.globl _ES0
                                    126 	.globl _ET2
                                    127 	.globl _ESPI0
                                    128 	.globl _EA
                                    129 	.globl _RI0
                                    130 	.globl _TI0
                                    131 	.globl _RB80
                                    132 	.globl _TB80
                                    133 	.globl _REN0
                                    134 	.globl _MCE0
                                    135 	.globl _S0MODE
                                    136 	.globl _CRC0VAL
                                    137 	.globl _CRC0INIT
                                    138 	.globl _CRC0SEL
                                    139 	.globl _IT0
                                    140 	.globl _IE0
                                    141 	.globl _IT1
                                    142 	.globl _IE1
                                    143 	.globl _TR0
                                    144 	.globl _TF0
                                    145 	.globl _TR1
                                    146 	.globl _TF1
                                    147 	.globl _PCA0CP4
                                    148 	.globl _PCA0CP0
                                    149 	.globl _PCA0
                                    150 	.globl _PCA0CP3
                                    151 	.globl _PCA0CP2
                                    152 	.globl _PCA0CP1
                                    153 	.globl _PCA0CP5
                                    154 	.globl _TMR2
                                    155 	.globl _TMR2RL
                                    156 	.globl _ADC0LT
                                    157 	.globl _ADC0GT
                                    158 	.globl _ADC0
                                    159 	.globl _TMR3
                                    160 	.globl _TMR3RL
                                    161 	.globl _TOFF
                                    162 	.globl _DP
                                    163 	.globl _VDM0CN
                                    164 	.globl _PCA0CPH4
                                    165 	.globl _PCA0CPL4
                                    166 	.globl _PCA0CPH0
                                    167 	.globl _PCA0CPL0
                                    168 	.globl _PCA0H
                                    169 	.globl _PCA0L
                                    170 	.globl _SPI0CN
                                    171 	.globl _EIP2
                                    172 	.globl _EIP1
                                    173 	.globl _SMB0ADM
                                    174 	.globl _SMB0ADR
                                    175 	.globl _P2MDIN
                                    176 	.globl _P1MDIN
                                    177 	.globl _P0MDIN
                                    178 	.globl _B
                                    179 	.globl _RSTSRC
                                    180 	.globl _PCA0CPH3
                                    181 	.globl _PCA0CPL3
                                    182 	.globl _PCA0CPH2
                                    183 	.globl _PCA0CPL2
                                    184 	.globl _PCA0CPH1
                                    185 	.globl _PCA0CPL1
                                    186 	.globl _ADC0CN
                                    187 	.globl _EIE2
                                    188 	.globl _EIE1
                                    189 	.globl _FLWR
                                    190 	.globl _IT01CF
                                    191 	.globl _XBR2
                                    192 	.globl _XBR1
                                    193 	.globl _XBR0
                                    194 	.globl _ACC
                                    195 	.globl _PCA0PWM
                                    196 	.globl _PCA0CPM4
                                    197 	.globl _PCA0CPM3
                                    198 	.globl _PCA0CPM2
                                    199 	.globl _PCA0CPM1
                                    200 	.globl _PCA0CPM0
                                    201 	.globl _PCA0MD
                                    202 	.globl _PCA0CN
                                    203 	.globl _P0MAT
                                    204 	.globl _P2SKIP
                                    205 	.globl _P1SKIP
                                    206 	.globl _P0SKIP
                                    207 	.globl _PCA0CPH5
                                    208 	.globl _PCA0CPL5
                                    209 	.globl _REF0CN
                                    210 	.globl _PSW
                                    211 	.globl _P1MAT
                                    212 	.globl _PCA0CPM5
                                    213 	.globl _TMR2H
                                    214 	.globl _TMR2L
                                    215 	.globl _TMR2RLH
                                    216 	.globl _TMR2RLL
                                    217 	.globl _REG0CN
                                    218 	.globl _TMR2CN
                                    219 	.globl _P0MASK
                                    220 	.globl _ADC0LTH
                                    221 	.globl _ADC0LTL
                                    222 	.globl _ADC0GTH
                                    223 	.globl _ADC0GTL
                                    224 	.globl _SMB0DAT
                                    225 	.globl _SMB0CF
                                    226 	.globl _SMB0CN
                                    227 	.globl _P1MASK
                                    228 	.globl _ADC0H
                                    229 	.globl _ADC0L
                                    230 	.globl _ADC0TK
                                    231 	.globl _ADC0CF
                                    232 	.globl _ADC0MX
                                    233 	.globl _ADC0PWR
                                    234 	.globl _ADC0AC
                                    235 	.globl _IREF0CN
                                    236 	.globl _IP
                                    237 	.globl _FLKEY
                                    238 	.globl _FLSCL
                                    239 	.globl _PMU0CF
                                    240 	.globl _OSCICL
                                    241 	.globl _OSCICN
                                    242 	.globl _OSCXCN
                                    243 	.globl _SPI1CN
                                    244 	.globl _ONESHOT
                                    245 	.globl _EMI0TC
                                    246 	.globl _RTC0KEY
                                    247 	.globl _RTC0DAT
                                    248 	.globl _RTC0ADR
                                    249 	.globl _EMI0CF
                                    250 	.globl _EMI0CN
                                    251 	.globl _CLKSEL
                                    252 	.globl _IE
                                    253 	.globl _SFRPAGE
                                    254 	.globl _P2DRV
                                    255 	.globl _P2MDOUT
                                    256 	.globl _P1DRV
                                    257 	.globl _P1MDOUT
                                    258 	.globl _P0DRV
                                    259 	.globl _P0MDOUT
                                    260 	.globl _SPI0DAT
                                    261 	.globl _SPI0CKR
                                    262 	.globl _SPI0CFG
                                    263 	.globl _P2
                                    264 	.globl _CPT0MX
                                    265 	.globl _CPT1MX
                                    266 	.globl _CPT0MD
                                    267 	.globl _CPT1MD
                                    268 	.globl _CPT0CN
                                    269 	.globl _CPT1CN
                                    270 	.globl _SBUF0
                                    271 	.globl _SCON0
                                    272 	.globl _CRC0CNT
                                    273 	.globl _DC0CN
                                    274 	.globl _CRC0AUTO
                                    275 	.globl _DC0CF
                                    276 	.globl _TMR3H
                                    277 	.globl _CRC0FLIP
                                    278 	.globl _TMR3L
                                    279 	.globl _CRC0IN
                                    280 	.globl _TMR3RLH
                                    281 	.globl _CRC0CN
                                    282 	.globl _TMR3RLL
                                    283 	.globl _CRC0DAT
                                    284 	.globl _TMR3CN
                                    285 	.globl _P1
                                    286 	.globl _PSCTL
                                    287 	.globl _CKCON
                                    288 	.globl _TH1
                                    289 	.globl _TH0
                                    290 	.globl _TL1
                                    291 	.globl _TL0
                                    292 	.globl _TMOD
                                    293 	.globl _TCON
                                    294 	.globl _PCON
                                    295 	.globl _TOFFH
                                    296 	.globl _SPI1DAT
                                    297 	.globl _TOFFL
                                    298 	.globl _SPI1CKR
                                    299 	.globl _SPI1CFG
                                    300 	.globl _DPH
                                    301 	.globl _DPL
                                    302 	.globl _SP
                                    303 	.globl _P0
                                    304 	.globl _pbuf
                                    305 	.globl _trailer
                                    306 	.globl _ati5_id
                                    307 	.globl _statistics_transmit_stats
                                    308 	.globl _statistics_receive_count
                                    309 	.globl _test_display
                                    310 	.globl _lbt_rssi
                                    311 	.globl _duty_cycle_offset
                                    312 	.globl _duty_cycle
                                    313 	.globl _transmit_wait
                                    314 	.globl __canary
                                    315 	.globl _tdm_show_rssi
                                    316 	.globl _tdm_remote_at
                                    317 	.globl _tdm_serial_loop
                                    318 	.globl _tdm_state_sync
                                    319 	.globl _tdm_set_node_count
                                    320 	.globl _tdm_set_node_destination
                                    321 	.globl _tdm_set_sync_any
                                    322 	.globl _tdm_init
                                    323 	.globl _tdm_report_timing
                                    324 ;--------------------------------------------------------
                                    325 ; special function registers
                                    326 ;--------------------------------------------------------
                                    327 	.area RSEG    (ABS,DATA)
      000000                        328 	.org 0x0000
                           000080   329 _P0	=	0x0080
                           000081   330 _SP	=	0x0081
                           000082   331 _DPL	=	0x0082
                           000083   332 _DPH	=	0x0083
                           000084   333 _SPI1CFG	=	0x0084
                           000085   334 _SPI1CKR	=	0x0085
                           000085   335 _TOFFL	=	0x0085
                           000086   336 _SPI1DAT	=	0x0086
                           000086   337 _TOFFH	=	0x0086
                           000087   338 _PCON	=	0x0087
                           000088   339 _TCON	=	0x0088
                           000089   340 _TMOD	=	0x0089
                           00008A   341 _TL0	=	0x008a
                           00008B   342 _TL1	=	0x008b
                           00008C   343 _TH0	=	0x008c
                           00008D   344 _TH1	=	0x008d
                           00008E   345 _CKCON	=	0x008e
                           00008F   346 _PSCTL	=	0x008f
                           000090   347 _P1	=	0x0090
                           000091   348 _TMR3CN	=	0x0091
                           000091   349 _CRC0DAT	=	0x0091
                           000092   350 _TMR3RLL	=	0x0092
                           000092   351 _CRC0CN	=	0x0092
                           000093   352 _TMR3RLH	=	0x0093
                           000093   353 _CRC0IN	=	0x0093
                           000094   354 _TMR3L	=	0x0094
                           000095   355 _CRC0FLIP	=	0x0095
                           000095   356 _TMR3H	=	0x0095
                           000096   357 _DC0CF	=	0x0096
                           000096   358 _CRC0AUTO	=	0x0096
                           000097   359 _DC0CN	=	0x0097
                           000097   360 _CRC0CNT	=	0x0097
                           000098   361 _SCON0	=	0x0098
                           000099   362 _SBUF0	=	0x0099
                           00009A   363 _CPT1CN	=	0x009a
                           00009B   364 _CPT0CN	=	0x009b
                           00009C   365 _CPT1MD	=	0x009c
                           00009D   366 _CPT0MD	=	0x009d
                           00009E   367 _CPT1MX	=	0x009e
                           00009F   368 _CPT0MX	=	0x009f
                           0000A0   369 _P2	=	0x00a0
                           0000A1   370 _SPI0CFG	=	0x00a1
                           0000A2   371 _SPI0CKR	=	0x00a2
                           0000A3   372 _SPI0DAT	=	0x00a3
                           0000A4   373 _P0MDOUT	=	0x00a4
                           0000A4   374 _P0DRV	=	0x00a4
                           0000A5   375 _P1MDOUT	=	0x00a5
                           0000A5   376 _P1DRV	=	0x00a5
                           0000A6   377 _P2MDOUT	=	0x00a6
                           0000A6   378 _P2DRV	=	0x00a6
                           0000A7   379 _SFRPAGE	=	0x00a7
                           0000A8   380 _IE	=	0x00a8
                           0000A9   381 _CLKSEL	=	0x00a9
                           0000AA   382 _EMI0CN	=	0x00aa
                           0000AB   383 _EMI0CF	=	0x00ab
                           0000AC   384 _RTC0ADR	=	0x00ac
                           0000AD   385 _RTC0DAT	=	0x00ad
                           0000AE   386 _RTC0KEY	=	0x00ae
                           0000AF   387 _EMI0TC	=	0x00af
                           0000AF   388 _ONESHOT	=	0x00af
                           0000B0   389 _SPI1CN	=	0x00b0
                           0000B1   390 _OSCXCN	=	0x00b1
                           0000B2   391 _OSCICN	=	0x00b2
                           0000B3   392 _OSCICL	=	0x00b3
                           0000B5   393 _PMU0CF	=	0x00b5
                           0000B6   394 _FLSCL	=	0x00b6
                           0000B7   395 _FLKEY	=	0x00b7
                           0000B8   396 _IP	=	0x00b8
                           0000B9   397 _IREF0CN	=	0x00b9
                           0000BA   398 _ADC0AC	=	0x00ba
                           0000BA   399 _ADC0PWR	=	0x00ba
                           0000BB   400 _ADC0MX	=	0x00bb
                           0000BC   401 _ADC0CF	=	0x00bc
                           0000BD   402 _ADC0TK	=	0x00bd
                           0000BD   403 _ADC0L	=	0x00bd
                           0000BE   404 _ADC0H	=	0x00be
                           0000BF   405 _P1MASK	=	0x00bf
                           0000C0   406 _SMB0CN	=	0x00c0
                           0000C1   407 _SMB0CF	=	0x00c1
                           0000C2   408 _SMB0DAT	=	0x00c2
                           0000C3   409 _ADC0GTL	=	0x00c3
                           0000C4   410 _ADC0GTH	=	0x00c4
                           0000C5   411 _ADC0LTL	=	0x00c5
                           0000C6   412 _ADC0LTH	=	0x00c6
                           0000C7   413 _P0MASK	=	0x00c7
                           0000C8   414 _TMR2CN	=	0x00c8
                           0000C9   415 _REG0CN	=	0x00c9
                           0000CA   416 _TMR2RLL	=	0x00ca
                           0000CB   417 _TMR2RLH	=	0x00cb
                           0000CC   418 _TMR2L	=	0x00cc
                           0000CD   419 _TMR2H	=	0x00cd
                           0000CE   420 _PCA0CPM5	=	0x00ce
                           0000CF   421 _P1MAT	=	0x00cf
                           0000D0   422 _PSW	=	0x00d0
                           0000D1   423 _REF0CN	=	0x00d1
                           0000D2   424 _PCA0CPL5	=	0x00d2
                           0000D3   425 _PCA0CPH5	=	0x00d3
                           0000D4   426 _P0SKIP	=	0x00d4
                           0000D5   427 _P1SKIP	=	0x00d5
                           0000D6   428 _P2SKIP	=	0x00d6
                           0000D7   429 _P0MAT	=	0x00d7
                           0000D8   430 _PCA0CN	=	0x00d8
                           0000D9   431 _PCA0MD	=	0x00d9
                           0000DA   432 _PCA0CPM0	=	0x00da
                           0000DB   433 _PCA0CPM1	=	0x00db
                           0000DC   434 _PCA0CPM2	=	0x00dc
                           0000DD   435 _PCA0CPM3	=	0x00dd
                           0000DE   436 _PCA0CPM4	=	0x00de
                           0000DF   437 _PCA0PWM	=	0x00df
                           0000E0   438 _ACC	=	0x00e0
                           0000E1   439 _XBR0	=	0x00e1
                           0000E2   440 _XBR1	=	0x00e2
                           0000E3   441 _XBR2	=	0x00e3
                           0000E4   442 _IT01CF	=	0x00e4
                           0000E5   443 _FLWR	=	0x00e5
                           0000E6   444 _EIE1	=	0x00e6
                           0000E7   445 _EIE2	=	0x00e7
                           0000E8   446 _ADC0CN	=	0x00e8
                           0000E9   447 _PCA0CPL1	=	0x00e9
                           0000EA   448 _PCA0CPH1	=	0x00ea
                           0000EB   449 _PCA0CPL2	=	0x00eb
                           0000EC   450 _PCA0CPH2	=	0x00ec
                           0000ED   451 _PCA0CPL3	=	0x00ed
                           0000EE   452 _PCA0CPH3	=	0x00ee
                           0000EF   453 _RSTSRC	=	0x00ef
                           0000F0   454 _B	=	0x00f0
                           0000F1   455 _P0MDIN	=	0x00f1
                           0000F2   456 _P1MDIN	=	0x00f2
                           0000F3   457 _P2MDIN	=	0x00f3
                           0000F4   458 _SMB0ADR	=	0x00f4
                           0000F5   459 _SMB0ADM	=	0x00f5
                           0000F6   460 _EIP1	=	0x00f6
                           0000F7   461 _EIP2	=	0x00f7
                           0000F8   462 _SPI0CN	=	0x00f8
                           0000F9   463 _PCA0L	=	0x00f9
                           0000FA   464 _PCA0H	=	0x00fa
                           0000FB   465 _PCA0CPL0	=	0x00fb
                           0000FC   466 _PCA0CPH0	=	0x00fc
                           0000FD   467 _PCA0CPL4	=	0x00fd
                           0000FE   468 _PCA0CPH4	=	0x00fe
                           0000FF   469 _VDM0CN	=	0x00ff
                           008382   470 _DP	=	0x8382
                           008685   471 _TOFF	=	0x8685
                           009392   472 _TMR3RL	=	0x9392
                           009594   473 _TMR3	=	0x9594
                           00BEBD   474 _ADC0	=	0xbebd
                           00C4C3   475 _ADC0GT	=	0xc4c3
                           00C6C5   476 _ADC0LT	=	0xc6c5
                           00CBCA   477 _TMR2RL	=	0xcbca
                           00CDCC   478 _TMR2	=	0xcdcc
                           00D3D2   479 _PCA0CP5	=	0xd3d2
                           00EAE9   480 _PCA0CP1	=	0xeae9
                           00ECEB   481 _PCA0CP2	=	0xeceb
                           00EEED   482 _PCA0CP3	=	0xeeed
                           00FAF9   483 _PCA0	=	0xfaf9
                           00FCFB   484 _PCA0CP0	=	0xfcfb
                           00FEFD   485 _PCA0CP4	=	0xfefd
                                    486 ;--------------------------------------------------------
                                    487 ; special function bits
                                    488 ;--------------------------------------------------------
                                    489 	.area RSEG    (ABS,DATA)
      000000                        490 	.org 0x0000
                           00008F   491 _TF1	=	0x008f
                           00008E   492 _TR1	=	0x008e
                           00008D   493 _TF0	=	0x008d
                           00008C   494 _TR0	=	0x008c
                           00008B   495 _IE1	=	0x008b
                           00008A   496 _IT1	=	0x008a
                           000089   497 _IE0	=	0x0089
                           000088   498 _IT0	=	0x0088
                           000096   499 _CRC0SEL	=	0x0096
                           000095   500 _CRC0INIT	=	0x0095
                           000094   501 _CRC0VAL	=	0x0094
                           00009F   502 _S0MODE	=	0x009f
                           00009D   503 _MCE0	=	0x009d
                           00009C   504 _REN0	=	0x009c
                           00009B   505 _TB80	=	0x009b
                           00009A   506 _RB80	=	0x009a
                           000099   507 _TI0	=	0x0099
                           000098   508 _RI0	=	0x0098
                           0000AF   509 _EA	=	0x00af
                           0000AE   510 _ESPI0	=	0x00ae
                           0000AD   511 _ET2	=	0x00ad
                           0000AC   512 _ES0	=	0x00ac
                           0000AB   513 _ET1	=	0x00ab
                           0000AA   514 _EX1	=	0x00aa
                           0000A9   515 _ET0	=	0x00a9
                           0000A8   516 _EX0	=	0x00a8
                           0000B7   517 _SPIF1	=	0x00b7
                           0000B6   518 _WCOL1	=	0x00b6
                           0000B5   519 _MODF1	=	0x00b5
                           0000B4   520 _RXOVRN1	=	0x00b4
                           0000B3   521 _NSS1MD1	=	0x00b3
                           0000B2   522 _NSS1MD0	=	0x00b2
                           0000B1   523 _TXBMT1	=	0x00b1
                           0000B0   524 _SPI1EN	=	0x00b0
                           0000BE   525 _PSPI0	=	0x00be
                           0000BD   526 _PT2	=	0x00bd
                           0000BC   527 _PS0	=	0x00bc
                           0000BB   528 _PT1	=	0x00bb
                           0000BA   529 _PX1	=	0x00ba
                           0000B9   530 _PT0	=	0x00b9
                           0000B8   531 _PX0	=	0x00b8
                           0000C7   532 _MASTER	=	0x00c7
                           0000C6   533 _TXMODE	=	0x00c6
                           0000C5   534 _STA	=	0x00c5
                           0000C4   535 _STO	=	0x00c4
                           0000C3   536 _ACKRQ	=	0x00c3
                           0000C2   537 _ARBLOST	=	0x00c2
                           0000C1   538 _ACK	=	0x00c1
                           0000C0   539 _SI	=	0x00c0
                           0000CF   540 _TF2H	=	0x00cf
                           0000CE   541 _TF2L	=	0x00ce
                           0000CD   542 _TF2LEN	=	0x00cd
                           0000CC   543 _TF2CEN	=	0x00cc
                           0000CB   544 _T2SPLIT	=	0x00cb
                           0000CA   545 _TR2	=	0x00ca
                           0000C9   546 _T2RCLK	=	0x00c9
                           0000C8   547 _T2XCLK	=	0x00c8
                           0000D7   548 _CY	=	0x00d7
                           0000D6   549 _AC	=	0x00d6
                           0000D5   550 _F0	=	0x00d5
                           0000D4   551 _RS1	=	0x00d4
                           0000D3   552 _RS0	=	0x00d3
                           0000D2   553 _OV	=	0x00d2
                           0000D1   554 _F1	=	0x00d1
                           0000D0   555 _P	=	0x00d0
                           0000DF   556 _CF	=	0x00df
                           0000DE   557 _CR	=	0x00de
                           0000DD   558 _CCF5	=	0x00dd
                           0000DC   559 _CCF4	=	0x00dc
                           0000DB   560 _CCF3	=	0x00db
                           0000DA   561 _CCF2	=	0x00da
                           0000D9   562 _CCF1	=	0x00d9
                           0000D8   563 _CCF0	=	0x00d8
                           0000EF   564 _AD0EN	=	0x00ef
                           0000EE   565 _BURSTEN	=	0x00ee
                           0000ED   566 _AD0INT	=	0x00ed
                           0000EC   567 _AD0BUSY	=	0x00ec
                           0000EB   568 _AD0WINT	=	0x00eb
                           0000EA   569 _AD0CM2	=	0x00ea
                           0000E9   570 _AD0CM1	=	0x00e9
                           0000E8   571 _AD0CM0	=	0x00e8
                           0000FF   572 _SPIF0	=	0x00ff
                           0000FE   573 _WCOL0	=	0x00fe
                           0000FD   574 _MODF0	=	0x00fd
                           0000FC   575 _RXOVRN0	=	0x00fc
                           0000FB   576 _NSS0MD1	=	0x00fb
                           0000FA   577 _NSS0MD0	=	0x00fa
                           0000F9   578 _TXBMT0	=	0x00f9
                           0000F8   579 _SPI0EN	=	0x00f8
                           000096   580 _LED_RED	=	0x0096
                           000095   581 _LED_GREEN	=	0x0095
                           000082   582 _PIN_CONFIG	=	0x0082
                           000083   583 _PIN_ENABLE	=	0x0083
                           000087   584 _IRQ	=	0x0087
                           000094   585 _NSS1	=	0x0094
                           0000A6   586 _SDN	=	0x00a6
                                    587 ;--------------------------------------------------------
                                    588 ; overlayable register banks
                                    589 ;--------------------------------------------------------
                                    590 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        591 	.ds 8
                                    592 ;--------------------------------------------------------
                                    593 ; internal ram data
                                    594 ;--------------------------------------------------------
                                    595 	.area DSEG    (DATA)
      000000                        596 _average_duty_cycle:
      000000                        597 	.ds 4
      000004                        598 _tdm_show_rssi_sloc0_1_0:
      000004                        599 	.ds 2
      000006                        600 _tdm_show_rssi_sloc1_1_0:
      000006                        601 	.ds 2
      000008                        602 _tdm_show_rssi_sloc2_1_0:
      000008                        603 	.ds 2
      00000A                        604 _tdm_show_rssi_sloc3_1_0:
      00000A                        605 	.ds 2
      00000C                        606 _tdm_show_rssi_sloc4_1_0:
      00000C                        607 	.ds 2
      00000E                        608 _tdm_state_update_sloc0_1_0:
      00000E                        609 	.ds 2
      000010                        610 _tdm_state_update_sloc1_1_0:
      000010                        611 	.ds 4
      000014                        612 _tdm_state_update_sloc2_1_0:
      000014                        613 	.ds 4
      000018                        614 _tdm_serial_loop_sloc0_1_0:
      000018                        615 	.ds 2
      00001A                        616 _tdm_init_sloc0_1_0:
      00001A                        617 	.ds 4
      00001E                        618 _tdm_init_sloc1_1_0:
      00001E                        619 	.ds 4
      000022                        620 _tdm_init_sloc2_1_0:
      000022                        621 	.ds 4
                                    622 ;--------------------------------------------------------
                                    623 ; overlayable items in internal ram 
                                    624 ;--------------------------------------------------------
                                    625 ;--------------------------------------------------------
                                    626 ; indirectly addressable internal ram data
                                    627 ;--------------------------------------------------------
                                    628 	.area ISEG    (DATA)
                           0000FF   629 __canary	=	0x00ff
                                    630 ;--------------------------------------------------------
                                    631 ; absolute internal ram data
                                    632 ;--------------------------------------------------------
                                    633 	.area IABS    (ABS,DATA)
                                    634 	.area IABS    (ABS,DATA)
                                    635 ;--------------------------------------------------------
                                    636 ; bit data
                                    637 ;--------------------------------------------------------
                                    638 	.area BSEG    (BIT)
      000000                        639 _test_display_toggle:
      000000                        640 	.ds 1
      000001                        641 _received_packet:
      000001                        642 	.ds 1
      000002                        643 _yielded_slot:
      000002                        644 	.ds 1
      000003                        645 _transmit_yield:
      000003                        646 	.ds 1
      000004                        647 _blink_state:
      000004                        648 	.ds 1
      000005                        649 _received_sync:
      000005                        650 	.ds 1
      000006                        651 _sync_any:
      000006                        652 	.ds 1
      000007                        653 _duty_cycle_wait:
      000007                        654 	.ds 1
      000008                        655 _send_at_command:
      000008                        656 	.ds 1
      000009                        657 _tdm_state_update_sloc3_1_0:
      000009                        658 	.ds 1
      00000A                        659 _tdm_serial_loop_sloc1_1_0:
      00000A                        660 	.ds 1
                                    661 ;--------------------------------------------------------
                                    662 ; paged external ram data
                                    663 ;--------------------------------------------------------
                                    664 	.area PSEG    (PAG,XDATA)
      000000                        665 _tdm_state:
      000000                        666 	.ds 1
      000001                        667 _nodeTransmitSeq:
      000001                        668 	.ds 2
      000003                        669 _paramNodeDestination:
      000003                        670 	.ds 2
      000005                        671 _nodeDestination:
      000005                        672 	.ds 2
      000007                        673 _tdm_state_remaining:
      000007                        674 	.ds 2
      000009                        675 _tx_window_width:
      000009                        676 	.ds 2
      00000B                        677 _tx_sync_width:
      00000B                        678 	.ds 2
      00000D                        679 _max_data_packet_length:
      00000D                        680 	.ds 1
      00000E                        681 _silence_period:
      00000E                        682 	.ds 2
      000010                        683 _lastTransmitWindow:
      000010                        684 	.ds 2
      000012                        685 _sync_count:
      000012                        686 	.ds 1
      000013                        687 _packet_latency:
      000013                        688 	.ds 2
      000015                        689 _ticks_per_byte:
      000015                        690 	.ds 2
      000017                        691 _transmit_wait::
      000017                        692 	.ds 2
      000019                        693 _duty_cycle::
      000019                        694 	.ds 1
      00001A                        695 _duty_cycle_offset::
      00001A                        696 	.ds 1
      00001B                        697 _transmitted_ticks:
      00001B                        698 	.ds 2
      00001D                        699 _lbt_rssi::
      00001D                        700 	.ds 1
      00001E                        701 _lbt_listen_time:
      00001E                        702 	.ds 2
      000020                        703 _lbt_min_time:
      000020                        704 	.ds 2
      000022                        705 _lbt_rand:
      000022                        706 	.ds 2
      000024                        707 _test_display::
      000024                        708 	.ds 1
      000025                        709 _statistics_receive_count::
      000025                        710 	.ds 2
      000027                        711 _statistics_transmit_stats::
      000027                        712 	.ds 2
      000029                        713 _ati5_id::
      000029                        714 	.ds 1
      00002A                        715 _trailer::
      00002A                        716 	.ds 4
      00002E                        717 _send_at_command_to:
      00002E                        718 	.ds 2
      000030                        719 _nodeCount:
      000030                        720 	.ds 2
      000032                        721 _tdm_yield_update_PARM_2:
      000032                        722 	.ds 1
      000033                        723 _tdm_serial_loop_last_link_update_1_233:
      000033                        724 	.ds 2
      000035                        725 _tdm_serial_loop_len_2_234:
      000035                        726 	.ds 1
      000036                        727 _tdm_serial_loop_tnow_2_234:
      000036                        728 	.ds 2
                                    729 ;--------------------------------------------------------
                                    730 ; external ram data
                                    731 ;--------------------------------------------------------
                                    732 	.area XSEG    (XDATA)
      000000                        733 _pbuf::
      000000                        734 	.ds 252
      0000FC                        735 _remote_at_cmd:
      0000FC                        736 	.ds 17
      00010D                        737 _unlock_count:
      00010D                        738 	.ds 1
      00010E                        739 _temperature_count:
      00010E                        740 	.ds 1
                                    741 ;--------------------------------------------------------
                                    742 ; absolute external ram data
                                    743 ;--------------------------------------------------------
                                    744 	.area XABS    (ABS,XDATA)
                                    745 ;--------------------------------------------------------
                                    746 ; external initialized ram data
                                    747 ;--------------------------------------------------------
                                    748 	.area XISEG   (XDATA)
                                    749 	.area HOME    (CODE)
                                    750 	.area GSINIT0 (CODE)
                                    751 	.area GSINIT1 (CODE)
                                    752 	.area GSINIT2 (CODE)
                                    753 	.area GSINIT3 (CODE)
                                    754 	.area GSINIT4 (CODE)
                                    755 	.area GSINIT5 (CODE)
                                    756 	.area GSINIT  (CODE)
                                    757 	.area GSFINAL (CODE)
                                    758 	.area CSEG    (CODE)
                                    759 ;--------------------------------------------------------
                                    760 ; global & static initialisations
                                    761 ;--------------------------------------------------------
                                    762 	.area HOME    (CODE)
                                    763 	.area GSINIT  (CODE)
                                    764 	.area GSFINAL (CODE)
                                    765 	.area GSINIT  (CODE)
                                    766 ;--------------------------------------------------------
                                    767 ; Home
                                    768 ;--------------------------------------------------------
                                    769 	.area HOME    (CODE)
                                    770 	.area HOME    (CODE)
                                    771 ;--------------------------------------------------------
                                    772 ; code
                                    773 ;--------------------------------------------------------
                                    774 	.area CSEG    (CODE)
                                    775 ;------------------------------------------------------------
                                    776 ;Allocation info for local variables in function 'tdm_show_rssi'
                                    777 ;------------------------------------------------------------
                                    778 ;sloc0                     Allocated with name '_tdm_show_rssi_sloc0_1_0'
                                    779 ;sloc1                     Allocated with name '_tdm_show_rssi_sloc1_1_0'
                                    780 ;sloc2                     Allocated with name '_tdm_show_rssi_sloc2_1_0'
                                    781 ;sloc3                     Allocated with name '_tdm_show_rssi_sloc3_1_0'
                                    782 ;sloc4                     Allocated with name '_tdm_show_rssi_sloc4_1_0'
                                    783 ;------------------------------------------------------------
                                    784 ;	radio/tdm.c:174: tdm_show_rssi(void)
                                    785 ;	-----------------------------------------
                                    786 ;	 function tdm_show_rssi
                                    787 ;	-----------------------------------------
      000000                        788 _tdm_show_rssi:
                           000007   789 	ar7 = 0x07
                           000006   790 	ar6 = 0x06
                           000005   791 	ar5 = 0x05
                           000004   792 	ar4 = 0x04
                           000003   793 	ar3 = 0x03
                           000002   794 	ar2 = 0x02
                           000001   795 	ar1 = 0x01
                           000000   796 	ar0 = 0x00
                                    797 ;	radio/tdm.c:179: for(i=0; i<(nodeCount-1) && i<MAX_NODE_RSSI_STATS; i++)
      000000 7F 00            [12]  798 	mov	r7,#0x00
      000002                        799 00106$:
      000002 78r30            [12]  800 	mov	r0,#_nodeCount
      000004 E2               [24]  801 	movx	a,@r0
      000005 24 FF            [12]  802 	add	a,#0xFF
      000007 FD               [12]  803 	mov	r5,a
      000008 08               [12]  804 	inc	r0
      000009 E2               [24]  805 	movx	a,@r0
      00000A 34 FF            [12]  806 	addc	a,#0xFF
      00000C FE               [12]  807 	mov	r6,a
      00000D 8F 03            [24]  808 	mov	ar3,r7
      00000F 7C 00            [12]  809 	mov	r4,#0x00
      000011 C3               [12]  810 	clr	c
      000012 EB               [12]  811 	mov	a,r3
      000013 9D               [12]  812 	subb	a,r5
      000014 EC               [12]  813 	mov	a,r4
      000015 9E               [12]  814 	subb	a,r6
      000016 40 03            [24]  815 	jc	00123$
      000018 02r00rBE         [24]  816 	ljmp	00103$
      00001B                        817 00123$:
      00001B BF 08 00         [24]  818 	cjne	r7,#0x08,00124$
      00001E                        819 00124$:
      00001E 40 03            [24]  820 	jc	00125$
      000020 02r00rBE         [24]  821 	ljmp	00103$
      000023                        822 00125$:
                                    823 ;	radio/tdm.c:181: if (i != nodeId) {
      000023 78r00            [12]  824 	mov	r0,#_nodeId
      000025 E2               [24]  825 	movx	a,@r0
      000026 B5 03 08         [24]  826 	cjne	a,ar3,00126$
      000029 08               [12]  827 	inc	r0
      00002A E2               [24]  828 	movx	a,@r0
      00002B B5 04 03         [24]  829 	cjne	a,ar4,00126$
      00002E 02r00rBA         [24]  830 	ljmp	00107$
      000031                        831 00126$:
                                    832 ;	radio/tdm.c:187: (unsigned)remote_statistics[i].average_noise);
      000031 EF               [12]  833 	mov	a,r7
      000032 75 F0 02         [24]  834 	mov	b,#0x02
      000035 A4               [48]  835 	mul	ab
      000036 FD               [12]  836 	mov	r5,a
      000037 AE F0            [24]  837 	mov	r6,b
      000039 C0 07            [24]  838 	push	ar7
      00003B ED               [12]  839 	mov	a,r5
      00003C 24r00            [12]  840 	add	a,#_remote_statistics
      00003E F5*04            [12]  841 	mov	_tdm_show_rssi_sloc0_1_0,a
      000040 EE               [12]  842 	mov	a,r6
      000041 34s00            [12]  843 	addc	a,#(_remote_statistics >> 8)
      000043 F5*05            [12]  844 	mov	(_tdm_show_rssi_sloc0_1_0 + 1),a
      000045 85*04 82         [24]  845 	mov	dpl,_tdm_show_rssi_sloc0_1_0
      000048 85*05 83         [24]  846 	mov	dph,(_tdm_show_rssi_sloc0_1_0 + 1)
      00004B A3               [24]  847 	inc	dptr
      00004C E0               [24]  848 	movx	a,@dptr
      00004D FF               [12]  849 	mov	r7,a
      00004E 8F*06            [24]  850 	mov	_tdm_show_rssi_sloc1_1_0,r7
      000050 75*07 00         [24]  851 	mov	(_tdm_show_rssi_sloc1_1_0 + 1),#0x00
                                    852 ;	radio/tdm.c:186: (unsigned)statistics[nodeId].average_noise,
      000053 78r00            [12]  853 	mov	r0,#_nodeId
      000055 E2               [24]  854 	movx	a,@r0
      000056 FA               [12]  855 	mov	r2,a
      000057 08               [12]  856 	inc	r0
      000058 E2               [24]  857 	movx	a,@r0
      000059 CA               [12]  858 	xch	a,r2
      00005A 25 E0            [12]  859 	add	a,acc
      00005C CA               [12]  860 	xch	a,r2
      00005D 33               [12]  861 	rlc	a
      00005E FF               [12]  862 	mov	r7,a
      00005F EA               [12]  863 	mov	a,r2
      000060 24r00            [12]  864 	add	a,#_statistics
      000062 FA               [12]  865 	mov	r2,a
      000063 EF               [12]  866 	mov	a,r7
      000064 34s00            [12]  867 	addc	a,#(_statistics >> 8)
      000066 FF               [12]  868 	mov	r7,a
      000067 8A 82            [24]  869 	mov	dpl,r2
      000069 8F 83            [24]  870 	mov	dph,r7
      00006B A3               [24]  871 	inc	dptr
      00006C E0               [24]  872 	movx	a,@dptr
      00006D FF               [12]  873 	mov	r7,a
      00006E 8F*08            [24]  874 	mov	_tdm_show_rssi_sloc2_1_0,r7
      000070 75*09 00         [24]  875 	mov	(_tdm_show_rssi_sloc2_1_0 + 1),#0x00
                                    876 ;	radio/tdm.c:185: (unsigned)remote_statistics[i].average_rssi,
      000073 85*04 82         [24]  877 	mov	dpl,_tdm_show_rssi_sloc0_1_0
      000076 85*05 83         [24]  878 	mov	dph,(_tdm_show_rssi_sloc0_1_0 + 1)
      000079 E0               [24]  879 	movx	a,@dptr
      00007A FF               [12]  880 	mov	r7,a
      00007B 7A 00            [12]  881 	mov	r2,#0x00
                                    882 ;	radio/tdm.c:184: (unsigned)statistics[i].average_rssi,
      00007D ED               [12]  883 	mov	a,r5
      00007E 24r00            [12]  884 	add	a,#_statistics
      000080 F5 82            [12]  885 	mov	dpl,a
      000082 EE               [12]  886 	mov	a,r6
      000083 34s00            [12]  887 	addc	a,#(_statistics >> 8)
      000085 F5 83            [12]  888 	mov	dph,a
      000087 E0               [24]  889 	movx	a,@dptr
      000088 FE               [12]  890 	mov	r6,a
      000089 7D 00            [12]  891 	mov	r5,#0x00
                                    892 ;	radio/tdm.c:182: printfl("[%u] L/R RSSI: %u/%u  L/R noise: %u/%u\n",
      00008B C0 07            [24]  893 	push	ar7
      00008D C0*06            [24]  894 	push	_tdm_show_rssi_sloc1_1_0
      00008F C0*07            [24]  895 	push	(_tdm_show_rssi_sloc1_1_0 + 1)
      000091 C0*08            [24]  896 	push	_tdm_show_rssi_sloc2_1_0
      000093 C0*09            [24]  897 	push	(_tdm_show_rssi_sloc2_1_0 + 1)
      000095 C0 07            [24]  898 	push	ar7
      000097 C0 02            [24]  899 	push	ar2
      000099 C0 06            [24]  900 	push	ar6
      00009B C0 05            [24]  901 	push	ar5
      00009D C0 03            [24]  902 	push	ar3
      00009F C0 04            [24]  903 	push	ar4
      0000A1 74r00            [12]  904 	mov	a,#___str_0
      0000A3 C0 E0            [24]  905 	push	acc
      0000A5 74s00            [12]  906 	mov	a,#(___str_0 >> 8)
      0000A7 C0 E0            [24]  907 	push	acc
      0000A9 74 80            [12]  908 	mov	a,#0x80
      0000AB C0 E0            [24]  909 	push	acc
      0000AD 12r00r00         [24]  910 	lcall	_printfl
      0000B0 E5 81            [12]  911 	mov	a,sp
      0000B2 24 F3            [12]  912 	add	a,#0xf3
      0000B4 F5 81            [12]  913 	mov	sp,a
      0000B6 D0 07            [24]  914 	pop	ar7
                                    915 ;	radio/tdm.c:201: statistics_receive_count = 0;
      0000B8 D0 07            [24]  916 	pop	ar7
                                    917 ;	radio/tdm.c:182: printfl("[%u] L/R RSSI: %u/%u  L/R noise: %u/%u\n",
      0000BA                        918 00107$:
                                    919 ;	radio/tdm.c:179: for(i=0; i<(nodeCount-1) && i<MAX_NODE_RSSI_STATS; i++)
      0000BA 0F               [12]  920 	inc	r7
      0000BB 02r00r02         [24]  921 	ljmp	00106$
      0000BE                        922 00103$:
                                    923 ;	radio/tdm.c:200: (unsigned)duty_cycle_offset);
      0000BE 78r1A            [12]  924 	mov	r0,#_duty_cycle_offset
      0000C0 E2               [24]  925 	movx	a,@r0
      0000C1 FE               [12]  926 	mov	r6,a
      0000C2 7F 00            [12]  927 	mov	r7,#0x00
                                    928 ;	radio/tdm.c:199: (int)radio_temperature(),
      0000C4 C0 07            [24]  929 	push	ar7
      0000C6 C0 06            [24]  930 	push	ar6
      0000C8 12r00r00         [24]  931 	lcall	_radio_temperature
      0000CB AC 82            [24]  932 	mov	r4,dpl
      0000CD AD 83            [24]  933 	mov	r5,dph
      0000CF D0 06            [24]  934 	pop	ar6
      0000D1 D0 07            [24]  935 	pop	ar7
                                    936 ;	radio/tdm.c:198: (unsigned)errors.corrected_packets,
      0000D3 78r0A            [12]  937 	mov	r0,#(_errors + 0x000a)
      0000D5 E2               [24]  938 	movx	a,@r0
      0000D6 F5*08            [12]  939 	mov	_tdm_show_rssi_sloc2_1_0,a
      0000D8 08               [12]  940 	inc	r0
      0000D9 E2               [24]  941 	movx	a,@r0
      0000DA F5*09            [12]  942 	mov	(_tdm_show_rssi_sloc2_1_0 + 1),a
                                    943 ;	radio/tdm.c:197: (unsigned)errors.corrected_errors,
      0000DC 78r08            [12]  944 	mov	r0,#(_errors + 0x0008)
      0000DE E2               [24]  945 	movx	a,@r0
      0000DF F5*06            [12]  946 	mov	_tdm_show_rssi_sloc1_1_0,a
      0000E1 08               [12]  947 	inc	r0
      0000E2 E2               [24]  948 	movx	a,@r0
      0000E3 F5*07            [12]  949 	mov	(_tdm_show_rssi_sloc1_1_0 + 1),a
                                    950 ;	radio/tdm.c:196: (unsigned)errors.serial_rx_overflow,
      0000E5 78r06            [12]  951 	mov	r0,#(_errors + 0x0006)
      0000E7 E2               [24]  952 	movx	a,@r0
      0000E8 F5*04            [12]  953 	mov	_tdm_show_rssi_sloc0_1_0,a
      0000EA 08               [12]  954 	inc	r0
      0000EB E2               [24]  955 	movx	a,@r0
      0000EC F5*05            [12]  956 	mov	(_tdm_show_rssi_sloc0_1_0 + 1),a
                                    957 ;	radio/tdm.c:195: (unsigned)errors.serial_tx_overflow,
      0000EE 78r04            [12]  958 	mov	r0,#(_errors + 0x0004)
      0000F0 E2               [24]  959 	movx	a,@r0
      0000F1 F5*0A            [12]  960 	mov	_tdm_show_rssi_sloc3_1_0,a
      0000F3 08               [12]  961 	inc	r0
      0000F4 E2               [24]  962 	movx	a,@r0
      0000F5 F5*0B            [12]  963 	mov	(_tdm_show_rssi_sloc3_1_0 + 1),a
                                    964 ;	radio/tdm.c:194: (unsigned)errors.rx_errors,
      0000F7 78r00            [12]  965 	mov	r0,#_errors
      0000F9 E2               [24]  966 	movx	a,@r0
      0000FA F5*0C            [12]  967 	mov	_tdm_show_rssi_sloc4_1_0,a
      0000FC 08               [12]  968 	inc	r0
      0000FD E2               [24]  969 	movx	a,@r0
      0000FE F5*0D            [12]  970 	mov	(_tdm_show_rssi_sloc4_1_0 + 1),a
                                    971 ;	radio/tdm.c:193: (unsigned)errors.tx_errors,
      000100 78r02            [12]  972 	mov	r0,#(_errors + 0x0002)
      000102 E2               [24]  973 	movx	a,@r0
      000103 FA               [12]  974 	mov	r2,a
      000104 08               [12]  975 	inc	r0
      000105 E2               [24]  976 	movx	a,@r0
      000106 FB               [12]  977 	mov	r3,a
                                    978 ;	radio/tdm.c:190: printfl("[%u] pkts: %u txe=%u rxe=%u stx=%u srx=%u ecc=%u/%u temp=%d dco=%u\n",
      000107 C0 06            [24]  979 	push	ar6
      000109 C0 07            [24]  980 	push	ar7
      00010B C0 04            [24]  981 	push	ar4
      00010D C0 05            [24]  982 	push	ar5
      00010F C0*08            [24]  983 	push	_tdm_show_rssi_sloc2_1_0
      000111 C0*09            [24]  984 	push	(_tdm_show_rssi_sloc2_1_0 + 1)
      000113 C0*06            [24]  985 	push	_tdm_show_rssi_sloc1_1_0
      000115 C0*07            [24]  986 	push	(_tdm_show_rssi_sloc1_1_0 + 1)
      000117 C0*04            [24]  987 	push	_tdm_show_rssi_sloc0_1_0
      000119 C0*05            [24]  988 	push	(_tdm_show_rssi_sloc0_1_0 + 1)
      00011B C0*0A            [24]  989 	push	_tdm_show_rssi_sloc3_1_0
      00011D C0*0B            [24]  990 	push	(_tdm_show_rssi_sloc3_1_0 + 1)
      00011F C0*0C            [24]  991 	push	_tdm_show_rssi_sloc4_1_0
      000121 C0*0D            [24]  992 	push	(_tdm_show_rssi_sloc4_1_0 + 1)
      000123 C0 02            [24]  993 	push	ar2
      000125 C0 03            [24]  994 	push	ar3
      000127 78r25            [12]  995 	mov	r0,#_statistics_receive_count
      000129 E2               [24]  996 	movx	a,@r0
      00012A C0 E0            [24]  997 	push	acc
      00012C 08               [12]  998 	inc	r0
      00012D E2               [24]  999 	movx	a,@r0
      00012E C0 E0            [24] 1000 	push	acc
      000130 78r00            [12] 1001 	mov	r0,#_nodeId
      000132 E2               [24] 1002 	movx	a,@r0
      000133 C0 E0            [24] 1003 	push	acc
      000135 08               [12] 1004 	inc	r0
      000136 E2               [24] 1005 	movx	a,@r0
      000137 C0 E0            [24] 1006 	push	acc
      000139 74r28            [12] 1007 	mov	a,#___str_1
      00013B C0 E0            [24] 1008 	push	acc
      00013D 74s00            [12] 1009 	mov	a,#(___str_1 >> 8)
      00013F C0 E0            [24] 1010 	push	acc
      000141 74 80            [12] 1011 	mov	a,#0x80
      000143 C0 E0            [24] 1012 	push	acc
      000145 12r00r00         [24] 1013 	lcall	_printfl
      000148 E5 81            [12] 1014 	mov	a,sp
      00014A 24 E9            [12] 1015 	add	a,#0xe9
      00014C F5 81            [12] 1016 	mov	sp,a
                                   1017 ;	radio/tdm.c:201: statistics_receive_count = 0;
      00014E 78r25            [12] 1018 	mov	r0,#_statistics_receive_count
      000150 E4               [12] 1019 	clr	a
      000151 F2               [24] 1020 	movx	@r0,a
      000152 08               [12] 1021 	inc	r0
      000153 F2               [24] 1022 	movx	@r0,a
      000154 22               [24] 1023 	ret
                                   1024 ;------------------------------------------------------------
                                   1025 ;Allocation info for local variables in function 'display_test_output'
                                   1026 ;------------------------------------------------------------
                                   1027 ;	radio/tdm.c:206: display_test_output(void)
                                   1028 ;	-----------------------------------------
                                   1029 ;	 function display_test_output
                                   1030 ;	-----------------------------------------
      000155                       1031 _display_test_output:
                                   1032 ;	radio/tdm.c:208: if (test_display & AT_TEST_RSSI) {
      000155 78r24            [12] 1033 	mov	r0,#_test_display
      000157 E2               [24] 1034 	movx	a,@r0
      000158 54 01            [12] 1035 	anl	a,#0x01
      00015A 60 03            [24] 1036 	jz	00103$
                                   1037 ;	radio/tdm.c:209: tdm_show_rssi();
      00015C 02r00r00         [24] 1038 	ljmp	_tdm_show_rssi
      00015F                       1039 00103$:
      00015F 22               [24] 1040 	ret
                                   1041 ;------------------------------------------------------------
                                   1042 ;Allocation info for local variables in function 'flight_time_estimate'
                                   1043 ;------------------------------------------------------------
                                   1044 ;	radio/tdm.c:219: static uint16_t flight_time_estimate(__pdata uint8_t packet_len)
                                   1045 ;	-----------------------------------------
                                   1046 ;	 function flight_time_estimate
                                   1047 ;	-----------------------------------------
      000160                       1048 _flight_time_estimate:
      000160 AF 82            [24] 1049 	mov	r7,dpl
                                   1050 ;	radio/tdm.c:221: return packet_latency + (packet_len * ticks_per_byte);
      000162 7E 00            [12] 1051 	mov	r6,#0x00
      000164 78r15            [12] 1052 	mov	r0,#_ticks_per_byte
      000166 90r00r00         [24] 1053 	mov	dptr,#__mulint_PARM_2
      000169 E2               [24] 1054 	movx	a,@r0
      00016A F0               [24] 1055 	movx	@dptr,a
      00016B 08               [12] 1056 	inc	r0
      00016C E2               [24] 1057 	movx	a,@r0
      00016D A3               [24] 1058 	inc	dptr
      00016E F0               [24] 1059 	movx	@dptr,a
      00016F 8F 82            [24] 1060 	mov	dpl,r7
      000171 8E 83            [24] 1061 	mov	dph,r6
      000173 12r00r00         [24] 1062 	lcall	__mulint
      000176 AE 82            [24] 1063 	mov	r6,dpl
      000178 AF 83            [24] 1064 	mov	r7,dph
      00017A 78r13            [12] 1065 	mov	r0,#_packet_latency
      00017C E2               [24] 1066 	movx	a,@r0
      00017D 2E               [12] 1067 	add	a,r6
      00017E FE               [12] 1068 	mov	r6,a
      00017F 08               [12] 1069 	inc	r0
      000180 E2               [24] 1070 	movx	a,@r0
      000181 3F               [12] 1071 	addc	a,r7
      000182 8E 82            [24] 1072 	mov	dpl,r6
      000184 F5 83            [12] 1073 	mov	dph,a
      000186 22               [24] 1074 	ret
                                   1075 ;------------------------------------------------------------
                                   1076 ;Allocation info for local variables in function 'tdm_state_update'
                                   1077 ;------------------------------------------------------------
                                   1078 ;sloc0                     Allocated with name '_tdm_state_update_sloc0_1_0'
                                   1079 ;sloc1                     Allocated with name '_tdm_state_update_sloc1_1_0'
                                   1080 ;sloc2                     Allocated with name '_tdm_state_update_sloc2_1_0'
                                   1081 ;------------------------------------------------------------
                                   1082 ;	radio/tdm.c:227: tdm_state_update(__pdata uint16_t tdelta)
                                   1083 ;	-----------------------------------------
                                   1084 ;	 function tdm_state_update
                                   1085 ;	-----------------------------------------
      000187                       1086 _tdm_state_update:
      000187 AE 82            [24] 1087 	mov	r6,dpl
      000189 AF 83            [24] 1088 	mov	r7,dph
                                   1089 ;	radio/tdm.c:231: if (tdelta > transmit_wait) {
      00018B 78r17            [12] 1090 	mov	r0,#_transmit_wait
      00018D C3               [12] 1091 	clr	c
      00018E E2               [24] 1092 	movx	a,@r0
      00018F 9E               [12] 1093 	subb	a,r6
      000190 08               [12] 1094 	inc	r0
      000191 E2               [24] 1095 	movx	a,@r0
      000192 9F               [12] 1096 	subb	a,r7
      000193 50 08            [24] 1097 	jnc	00102$
                                   1098 ;	radio/tdm.c:232: transmit_wait = 0;
      000195 78r17            [12] 1099 	mov	r0,#_transmit_wait
      000197 E4               [12] 1100 	clr	a
      000198 F2               [24] 1101 	movx	@r0,a
      000199 08               [12] 1102 	inc	r0
      00019A F2               [24] 1103 	movx	@r0,a
      00019B 80 0A            [24] 1104 	sjmp	00121$
      00019D                       1105 00102$:
                                   1106 ;	radio/tdm.c:234: transmit_wait -= tdelta;
      00019D 78r17            [12] 1107 	mov	r0,#_transmit_wait
      00019F E2               [24] 1108 	movx	a,@r0
      0001A0 C3               [12] 1109 	clr	c
      0001A1 9E               [12] 1110 	subb	a,r6
      0001A2 F2               [24] 1111 	movx	@r0,a
      0001A3 08               [12] 1112 	inc	r0
      0001A4 E2               [24] 1113 	movx	a,@r0
      0001A5 9F               [12] 1114 	subb	a,r7
      0001A6 F2               [24] 1115 	movx	@r0,a
                                   1116 ;	radio/tdm.c:238: while (tdelta >= tdm_state_remaining) {
      0001A7                       1117 00121$:
      0001A7 78r07            [12] 1118 	mov	r0,#_tdm_state_remaining
      0001A9 C3               [12] 1119 	clr	c
      0001AA E2               [24] 1120 	movx	a,@r0
      0001AB F5 F0            [12] 1121 	mov	b,a
      0001AD EE               [12] 1122 	mov	a,r6
      0001AE 95 F0            [12] 1123 	subb	a,b
      0001B0 08               [12] 1124 	inc	r0
      0001B1 E2               [24] 1125 	movx	a,@r0
      0001B2 F5 F0            [12] 1126 	mov	b,a
      0001B4 EF               [12] 1127 	mov	a,r7
      0001B5 95 F0            [12] 1128 	subb	a,b
      0001B7 50 03            [24] 1129 	jnc	00166$
      0001B9 02r04r87         [24] 1130 	ljmp	00123$
      0001BC                       1131 00166$:
                                   1132 ;	radio/tdm.c:243: if ((nodeTransmitSeq < 0x8000 || nodeId == BASE_NODEID) && (nodeTransmitSeq++ % nodeCount) == nodeId) {
      0001BC 78r01            [12] 1133 	mov	r0,#_nodeTransmitSeq
      0001BE C3               [12] 1134 	clr	c
      0001BF 08               [12] 1135 	inc	r0
      0001C0 E2               [24] 1136 	movx	a,@r0
      0001C1 94 80            [12] 1137 	subb	a,#0x80
      0001C3 40 0B            [24] 1138 	jc	00112$
      0001C5 78r00            [12] 1139 	mov	r0,#_nodeId
      0001C7 E2               [24] 1140 	movx	a,@r0
      0001C8 F5 F0            [12] 1141 	mov	b,a
      0001CA 08               [12] 1142 	inc	r0
      0001CB E2               [24] 1143 	movx	a,@r0
      0001CC 45 F0            [12] 1144 	orl	a,b
      0001CE 70 6F            [24] 1145 	jnz	00109$
      0001D0                       1146 00112$:
      0001D0 78r01            [12] 1147 	mov	r0,#_nodeTransmitSeq
      0001D2 E2               [24] 1148 	movx	a,@r0
      0001D3 FC               [12] 1149 	mov	r4,a
      0001D4 08               [12] 1150 	inc	r0
      0001D5 E2               [24] 1151 	movx	a,@r0
      0001D6 FD               [12] 1152 	mov	r5,a
      0001D7 78r01            [12] 1153 	mov	r0,#_nodeTransmitSeq
      0001D9 74 01            [12] 1154 	mov	a,#0x01
      0001DB 2C               [12] 1155 	add	a,r4
      0001DC F2               [24] 1156 	movx	@r0,a
      0001DD E4               [12] 1157 	clr	a
      0001DE 3D               [12] 1158 	addc	a,r5
      0001DF 08               [12] 1159 	inc	r0
      0001E0 F2               [24] 1160 	movx	@r0,a
      0001E1 78r30            [12] 1161 	mov	r0,#_nodeCount
      0001E3 90r00r00         [24] 1162 	mov	dptr,#__moduint_PARM_2
      0001E6 E2               [24] 1163 	movx	a,@r0
      0001E7 F0               [24] 1164 	movx	@dptr,a
      0001E8 08               [12] 1165 	inc	r0
      0001E9 E2               [24] 1166 	movx	a,@r0
      0001EA A3               [24] 1167 	inc	dptr
      0001EB F0               [24] 1168 	movx	@dptr,a
      0001EC 8C 82            [24] 1169 	mov	dpl,r4
      0001EE 8D 83            [24] 1170 	mov	dph,r5
      0001F0 C0 07            [24] 1171 	push	ar7
      0001F2 C0 06            [24] 1172 	push	ar6
      0001F4 12r00r00         [24] 1173 	lcall	__moduint
      0001F7 AC 82            [24] 1174 	mov	r4,dpl
      0001F9 AD 83            [24] 1175 	mov	r5,dph
      0001FB D0 06            [24] 1176 	pop	ar6
      0001FD D0 07            [24] 1177 	pop	ar7
      0001FF 78r00            [12] 1178 	mov	r0,#_nodeId
      000201 E2               [24] 1179 	movx	a,@r0
      000202 B5 04 07         [24] 1180 	cjne	a,ar4,00169$
      000205 08               [12] 1181 	inc	r0
      000206 E2               [24] 1182 	movx	a,@r0
      000207 B5 05 02         [24] 1183 	cjne	a,ar5,00169$
      00020A 80 02            [24] 1184 	sjmp	00170$
      00020C                       1185 00169$:
      00020C 80 31            [24] 1186 	sjmp	00109$
      00020E                       1187 00170$:
                                   1188 ;	radio/tdm.c:244: tdm_state = TDM_TRANSMIT;
      00020E 78r00            [12] 1189 	mov	r0,#_tdm_state
      000210 E4               [12] 1190 	clr	a
      000211 F2               [24] 1191 	movx	@r0,a
                                   1192 ;	radio/tdm.c:245: nodeTransmitSeq %= nodeCount;
      000212 78r30            [12] 1193 	mov	r0,#_nodeCount
      000214 90r00r00         [24] 1194 	mov	dptr,#__moduint_PARM_2
      000217 E2               [24] 1195 	movx	a,@r0
      000218 F0               [24] 1196 	movx	@dptr,a
      000219 08               [12] 1197 	inc	r0
      00021A E2               [24] 1198 	movx	a,@r0
      00021B A3               [24] 1199 	inc	dptr
      00021C F0               [24] 1200 	movx	@dptr,a
      00021D 78r01            [12] 1201 	mov	r0,#_nodeTransmitSeq
      00021F E2               [24] 1202 	movx	a,@r0
      000220 F5 82            [12] 1203 	mov	dpl,a
      000222 08               [12] 1204 	inc	r0
      000223 E2               [24] 1205 	movx	a,@r0
      000224 F5 83            [12] 1206 	mov	dph,a
      000226 C0 07            [24] 1207 	push	ar7
      000228 C0 06            [24] 1208 	push	ar6
      00022A 12r00r00         [24] 1209 	lcall	__moduint
      00022D E5 82            [12] 1210 	mov	a,dpl
      00022F 85 83 F0         [24] 1211 	mov	b,dph
      000232 D0 06            [24] 1212 	pop	ar6
      000234 D0 07            [24] 1213 	pop	ar7
      000236 78r01            [12] 1214 	mov	r0,#_nodeTransmitSeq
      000238 F2               [24] 1215 	movx	@r0,a
      000239 08               [12] 1216 	inc	r0
      00023A E5 F0            [12] 1217 	mov	a,b
      00023C F2               [24] 1218 	movx	@r0,a
      00023D 80 4F            [24] 1219 	sjmp	00110$
      00023F                       1220 00109$:
                                   1221 ;	radio/tdm.c:249: else if (nodeTransmitSeq < 0x8000 && (nodeTransmitSeq-1 % nodeCount) == nodeCount-1) {
      00023F 78r01            [12] 1222 	mov	r0,#_nodeTransmitSeq
      000241 C3               [12] 1223 	clr	c
      000242 08               [12] 1224 	inc	r0
      000243 E2               [24] 1225 	movx	a,@r0
      000244 94 80            [12] 1226 	subb	a,#0x80
      000246 50 41            [24] 1227 	jnc	00105$
      000248 78r30            [12] 1228 	mov	r0,#_nodeCount
      00024A 90r00r00         [24] 1229 	mov	dptr,#__moduint_PARM_2
      00024D E2               [24] 1230 	movx	a,@r0
      00024E F0               [24] 1231 	movx	@dptr,a
      00024F 08               [12] 1232 	inc	r0
      000250 E2               [24] 1233 	movx	a,@r0
      000251 A3               [24] 1234 	inc	dptr
      000252 F0               [24] 1235 	movx	@dptr,a
      000253 90 00 01         [24] 1236 	mov	dptr,#0x0001
      000256 C0 07            [24] 1237 	push	ar7
      000258 C0 06            [24] 1238 	push	ar6
      00025A 12r00r00         [24] 1239 	lcall	__moduint
      00025D AC 82            [24] 1240 	mov	r4,dpl
      00025F AD 83            [24] 1241 	mov	r5,dph
      000261 D0 06            [24] 1242 	pop	ar6
      000263 D0 07            [24] 1243 	pop	ar7
      000265 78r01            [12] 1244 	mov	r0,#_nodeTransmitSeq
      000267 E2               [24] 1245 	movx	a,@r0
      000268 C3               [12] 1246 	clr	c
      000269 9C               [12] 1247 	subb	a,r4
      00026A FC               [12] 1248 	mov	r4,a
      00026B 08               [12] 1249 	inc	r0
      00026C E2               [24] 1250 	movx	a,@r0
      00026D 9D               [12] 1251 	subb	a,r5
      00026E FD               [12] 1252 	mov	r5,a
      00026F 78r30            [12] 1253 	mov	r0,#_nodeCount
      000271 E2               [24] 1254 	movx	a,@r0
      000272 24 FF            [12] 1255 	add	a,#0xFF
      000274 FA               [12] 1256 	mov	r2,a
      000275 08               [12] 1257 	inc	r0
      000276 E2               [24] 1258 	movx	a,@r0
      000277 34 FF            [12] 1259 	addc	a,#0xFF
      000279 FB               [12] 1260 	mov	r3,a
      00027A EC               [12] 1261 	mov	a,r4
      00027B B5 02 0B         [24] 1262 	cjne	a,ar2,00105$
      00027E ED               [12] 1263 	mov	a,r5
      00027F B5 03 07         [24] 1264 	cjne	a,ar3,00105$
                                   1265 ;	radio/tdm.c:250: tdm_state = TDM_SYNC;
      000282 78r00            [12] 1266 	mov	r0,#_tdm_state
      000284 74 02            [12] 1267 	mov	a,#0x02
      000286 F2               [24] 1268 	movx	@r0,a
      000287 80 05            [24] 1269 	sjmp	00110$
      000289                       1270 00105$:
                                   1271 ;	radio/tdm.c:254: tdm_state = TDM_RECEIVE; // If there are other nodes yet to transmit lets hear them first
      000289 78r00            [12] 1272 	mov	r0,#_tdm_state
      00028B 74 01            [12] 1273 	mov	a,#0x01
      00028D F2               [24] 1274 	movx	@r0,a
      00028E                       1275 00110$:
                                   1276 ;	radio/tdm.c:266: tdelta -= tdm_state_remaining;
      00028E 78r07            [12] 1277 	mov	r0,#_tdm_state_remaining
      000290 D3               [12] 1278 	setb	c
      000291 E2               [24] 1279 	movx	a,@r0
      000292 9E               [12] 1280 	subb	a,r6
      000293 F4               [12] 1281 	cpl	a
      000294 B3               [12] 1282 	cpl	c
      000295 FE               [12] 1283 	mov	r6,a
      000296 B3               [12] 1284 	cpl	c
      000297 08               [12] 1285 	inc	r0
      000298 E2               [24] 1286 	movx	a,@r0
      000299 9F               [12] 1287 	subb	a,r7
      00029A F4               [12] 1288 	cpl	a
      00029B FF               [12] 1289 	mov	r7,a
                                   1290 ;	radio/tdm.c:268: if (tdm_state == TDM_SYNC)
      00029C 78r00            [12] 1291 	mov	r0,#_tdm_state
      00029E E2               [24] 1292 	movx	a,@r0
      00029F B4 02 10         [24] 1293 	cjne	a,#0x02,00114$
                                   1294 ;	radio/tdm.c:269: tdm_state_remaining = tx_sync_width;
      0002A2 78r0B            [12] 1295 	mov	r0,#_tx_sync_width
      0002A4 E2               [24] 1296 	movx	a,@r0
      0002A5 FC               [12] 1297 	mov	r4,a
      0002A6 08               [12] 1298 	inc	r0
      0002A7 E2               [24] 1299 	movx	a,@r0
      0002A8 FD               [12] 1300 	mov	r5,a
      0002A9 78r07            [12] 1301 	mov	r0,#_tdm_state_remaining
      0002AB EC               [12] 1302 	mov	a,r4
      0002AC F2               [24] 1303 	movx	@r0,a
      0002AD 08               [12] 1304 	inc	r0
      0002AE ED               [12] 1305 	mov	a,r5
      0002AF F2               [24] 1306 	movx	@r0,a
      0002B0 80 19            [24] 1307 	sjmp	00115$
      0002B2                       1308 00114$:
                                   1309 ;	radio/tdm.c:271: tdm_state_remaining = tx_window_width;
      0002B2 78r09            [12] 1310 	mov	r0,#_tx_window_width
      0002B4 E2               [24] 1311 	movx	a,@r0
      0002B5 FC               [12] 1312 	mov	r4,a
      0002B6 08               [12] 1313 	inc	r0
      0002B7 E2               [24] 1314 	movx	a,@r0
      0002B8 FD               [12] 1315 	mov	r5,a
      0002B9 78r07            [12] 1316 	mov	r0,#_tdm_state_remaining
      0002BB EC               [12] 1317 	mov	a,r4
      0002BC F2               [24] 1318 	movx	@r0,a
      0002BD 08               [12] 1319 	inc	r0
      0002BE ED               [12] 1320 	mov	a,r5
      0002BF F2               [24] 1321 	movx	@r0,a
                                   1322 ;	radio/tdm.c:273: fhop_window_change();
      0002C0 C0 07            [24] 1323 	push	ar7
      0002C2 C0 06            [24] 1324 	push	ar6
      0002C4 12r00r00         [24] 1325 	lcall	_fhop_window_change
      0002C7 D0 06            [24] 1326 	pop	ar6
      0002C9 D0 07            [24] 1327 	pop	ar7
      0002CB                       1328 00115$:
                                   1329 ;	radio/tdm.c:276: radio_receiver_on();
      0002CB C0 07            [24] 1330 	push	ar7
      0002CD C0 06            [24] 1331 	push	ar6
      0002CF 12r00r00         [24] 1332 	lcall	_radio_receiver_on
      0002D2 D0 06            [24] 1333 	pop	ar6
      0002D4 D0 07            [24] 1334 	pop	ar7
                                   1335 ;	radio/tdm.c:278: if (num_fh_channels > 1) {
      0002D6 78r00            [12] 1336 	mov	r0,#_num_fh_channels
      0002D8 C3               [12] 1337 	clr	c
      0002D9 E2               [24] 1338 	movx	a,@r0
      0002DA F5 F0            [12] 1339 	mov	b,a
      0002DC 74 01            [12] 1340 	mov	a,#0x01
      0002DE 95 F0            [12] 1341 	subb	a,b
      0002E0 50 0B            [24] 1342 	jnc	00117$
                                   1343 ;	radio/tdm.c:280: lbt_listen_time = 0;
      0002E2 78r1E            [12] 1344 	mov	r0,#_lbt_listen_time
      0002E4 E4               [12] 1345 	clr	a
      0002E5 F2               [24] 1346 	movx	@r0,a
      0002E6 08               [12] 1347 	inc	r0
      0002E7 F2               [24] 1348 	movx	@r0,a
                                   1349 ;	radio/tdm.c:281: lbt_rand = 0;
      0002E8 78r22            [12] 1350 	mov	r0,#_lbt_rand
      0002EA F2               [24] 1351 	movx	@r0,a
      0002EB 08               [12] 1352 	inc	r0
      0002EC F2               [24] 1353 	movx	@r0,a
      0002ED                       1354 00117$:
                                   1355 ;	radio/tdm.c:284: if (tdm_state == TDM_TRANSMIT && (duty_cycle - duty_cycle_offset) != 100) {
      0002ED 78r00            [12] 1356 	mov	r0,#_tdm_state
      0002EF E2               [24] 1357 	movx	a,@r0
      0002F0 60 03            [24] 1358 	jz	00177$
      0002F2 02r04r7E         [24] 1359 	ljmp	00119$
      0002F5                       1360 00177$:
      0002F5 C0 06            [24] 1361 	push	ar6
      0002F7 C0 07            [24] 1362 	push	ar7
      0002F9 78r19            [12] 1363 	mov	r0,#_duty_cycle
      0002FB E2               [24] 1364 	movx	a,@r0
      0002FC FC               [12] 1365 	mov	r4,a
      0002FD 7D 00            [12] 1366 	mov	r5,#0x00
      0002FF 78r1A            [12] 1367 	mov	r0,#_duty_cycle_offset
      000301 E2               [24] 1368 	movx	a,@r0
      000302 F5*0E            [12] 1369 	mov	_tdm_state_update_sloc0_1_0,a
                                   1370 ;	1-genFromRTrack replaced	mov	(_tdm_state_update_sloc0_1_0 + 1),#0x00
      000304 8D*0F            [24] 1371 	mov	(_tdm_state_update_sloc0_1_0 + 1),r5
      000306 EC               [12] 1372 	mov	a,r4
      000307 C3               [12] 1373 	clr	c
      000308 95*0E            [12] 1374 	subb	a,_tdm_state_update_sloc0_1_0
      00030A FE               [12] 1375 	mov	r6,a
      00030B ED               [12] 1376 	mov	a,r5
      00030C 95*0F            [12] 1377 	subb	a,(_tdm_state_update_sloc0_1_0 + 1)
      00030E FF               [12] 1378 	mov	r7,a
      00030F BE 64 0A         [24] 1379 	cjne	r6,#0x64,00178$
      000312 BF 00 07         [24] 1380 	cjne	r7,#0x00,00178$
      000315 D0 07            [24] 1381 	pop	ar7
      000317 D0 06            [24] 1382 	pop	ar6
      000319 02r04r7E         [24] 1383 	ljmp	00119$
      00031C                       1384 00178$:
      00031C D0 07            [24] 1385 	pop	ar7
      00031E D0 06            [24] 1386 	pop	ar6
                                   1387 ;	radio/tdm.c:286: average_duty_cycle = (0.95*average_duty_cycle) + (0.05*(100.0*transmitted_ticks)/(2*(silence_period+tx_window_width)));
      000320 C0 06            [24] 1388 	push	ar6
      000322 C0 07            [24] 1389 	push	ar7
      000324 C0 07            [24] 1390 	push	ar7
      000326 C0 06            [24] 1391 	push	ar6
      000328 C0 05            [24] 1392 	push	ar5
      00032A C0 04            [24] 1393 	push	ar4
      00032C C0*00            [24] 1394 	push	_average_duty_cycle
      00032E C0*01            [24] 1395 	push	(_average_duty_cycle + 1)
      000330 C0*02            [24] 1396 	push	(_average_duty_cycle + 2)
      000332 C0*03            [24] 1397 	push	(_average_duty_cycle + 3)
      000334 90 33 33         [24] 1398 	mov	dptr,#0x3333
      000337 75 F0 73         [24] 1399 	mov	b,#0x73
      00033A 74 3F            [12] 1400 	mov	a,#0x3F
      00033C 12r00r00         [24] 1401 	lcall	___fsmul
      00033F 85 82*10         [24] 1402 	mov	_tdm_state_update_sloc1_1_0,dpl
      000342 85 83*11         [24] 1403 	mov	(_tdm_state_update_sloc1_1_0 + 1),dph
      000345 85 F0*12         [24] 1404 	mov	(_tdm_state_update_sloc1_1_0 + 2),b
      000348 F5*13            [12] 1405 	mov	(_tdm_state_update_sloc1_1_0 + 3),a
      00034A E5 81            [12] 1406 	mov	a,sp
      00034C 24 FC            [12] 1407 	add	a,#0xfc
      00034E F5 81            [12] 1408 	mov	sp,a
      000350 D0 04            [24] 1409 	pop	ar4
      000352 D0 05            [24] 1410 	pop	ar5
      000354 D0 06            [24] 1411 	pop	ar6
      000356 D0 07            [24] 1412 	pop	ar7
      000358 78r1B            [12] 1413 	mov	r0,#_transmitted_ticks
      00035A E2               [24] 1414 	movx	a,@r0
      00035B F5 82            [12] 1415 	mov	dpl,a
      00035D 08               [12] 1416 	inc	r0
      00035E E2               [24] 1417 	movx	a,@r0
      00035F F5 83            [12] 1418 	mov	dph,a
      000361 C0 05            [24] 1419 	push	ar5
      000363 C0 04            [24] 1420 	push	ar4
      000365 12r00r00         [24] 1421 	lcall	___uint2fs
      000368 AA 82            [24] 1422 	mov	r2,dpl
      00036A AB 83            [24] 1423 	mov	r3,dph
      00036C AE F0            [24] 1424 	mov	r6,b
      00036E FF               [12] 1425 	mov	r7,a
      00036F D0 04            [24] 1426 	pop	ar4
      000371 D0 05            [24] 1427 	pop	ar5
      000373 C0 07            [24] 1428 	push	ar7
      000375 C0 06            [24] 1429 	push	ar6
      000377 C0 05            [24] 1430 	push	ar5
      000379 C0 04            [24] 1431 	push	ar4
      00037B C0 02            [24] 1432 	push	ar2
      00037D C0 03            [24] 1433 	push	ar3
      00037F C0 06            [24] 1434 	push	ar6
      000381 C0 07            [24] 1435 	push	ar7
      000383 90 00 00         [24] 1436 	mov	dptr,#0x0000
      000386 75 F0 A0         [24] 1437 	mov	b,#0xA0
      000389 74 40            [12] 1438 	mov	a,#0x40
      00038B 12r00r00         [24] 1439 	lcall	___fsmul
      00038E 85 82*14         [24] 1440 	mov	_tdm_state_update_sloc2_1_0,dpl
      000391 85 83*15         [24] 1441 	mov	(_tdm_state_update_sloc2_1_0 + 1),dph
      000394 85 F0*16         [24] 1442 	mov	(_tdm_state_update_sloc2_1_0 + 2),b
      000397 F5*17            [12] 1443 	mov	(_tdm_state_update_sloc2_1_0 + 3),a
      000399 E5 81            [12] 1444 	mov	a,sp
      00039B 24 FC            [12] 1445 	add	a,#0xfc
      00039D F5 81            [12] 1446 	mov	sp,a
      00039F D0 04            [24] 1447 	pop	ar4
      0003A1 D0 05            [24] 1448 	pop	ar5
      0003A3 D0 06            [24] 1449 	pop	ar6
      0003A5 D0 07            [24] 1450 	pop	ar7
      0003A7 78r0E            [12] 1451 	mov	r0,#_silence_period
      0003A9 79r09            [12] 1452 	mov	r1,#_tx_window_width
      0003AB E3               [24] 1453 	movx	a,@r1
      0003AC C5 F0            [12] 1454 	xch	a,b
      0003AE E2               [24] 1455 	movx	a,@r0
      0003AF 25 F0            [12] 1456 	add	a,b
      0003B1 FE               [12] 1457 	mov	r6,a
      0003B2 09               [12] 1458 	inc	r1
      0003B3 E3               [24] 1459 	movx	a,@r1
      0003B4 C5 F0            [12] 1460 	xch	a,b
      0003B6 08               [12] 1461 	inc	r0
      0003B7 E2               [24] 1462 	movx	a,@r0
      0003B8 35 F0            [12] 1463 	addc	a,b
      0003BA CE               [12] 1464 	xch	a,r6
      0003BB 25 E0            [12] 1465 	add	a,acc
      0003BD CE               [12] 1466 	xch	a,r6
      0003BE 33               [12] 1467 	rlc	a
      0003BF FF               [12] 1468 	mov	r7,a
      0003C0 8E 82            [24] 1469 	mov	dpl,r6
      0003C2 8F 83            [24] 1470 	mov	dph,r7
      0003C4 C0 05            [24] 1471 	push	ar5
      0003C6 C0 04            [24] 1472 	push	ar4
      0003C8 12r00r00         [24] 1473 	lcall	___uint2fs
      0003CB AA 82            [24] 1474 	mov	r2,dpl
      0003CD AB 83            [24] 1475 	mov	r3,dph
      0003CF AE F0            [24] 1476 	mov	r6,b
      0003D1 FF               [12] 1477 	mov	r7,a
      0003D2 C0 02            [24] 1478 	push	ar2
      0003D4 C0 03            [24] 1479 	push	ar3
      0003D6 C0 06            [24] 1480 	push	ar6
      0003D8 C0 07            [24] 1481 	push	ar7
      0003DA 85*14 82         [24] 1482 	mov	dpl,_tdm_state_update_sloc2_1_0
      0003DD 85*15 83         [24] 1483 	mov	dph,(_tdm_state_update_sloc2_1_0 + 1)
      0003E0 85*16 F0         [24] 1484 	mov	b,(_tdm_state_update_sloc2_1_0 + 2)
      0003E3 E5*17            [12] 1485 	mov	a,(_tdm_state_update_sloc2_1_0 + 3)
      0003E5 12r00r00         [24] 1486 	lcall	___fsdiv
      0003E8 AA 82            [24] 1487 	mov	r2,dpl
      0003EA AB 83            [24] 1488 	mov	r3,dph
      0003EC AE F0            [24] 1489 	mov	r6,b
      0003EE FF               [12] 1490 	mov	r7,a
      0003EF E5 81            [12] 1491 	mov	a,sp
      0003F1 24 FC            [12] 1492 	add	a,#0xfc
      0003F3 F5 81            [12] 1493 	mov	sp,a
      0003F5 D0 04            [24] 1494 	pop	ar4
      0003F7 D0 05            [24] 1495 	pop	ar5
      0003F9 C0 07            [24] 1496 	push	ar7
      0003FB C0 06            [24] 1497 	push	ar6
      0003FD C0 05            [24] 1498 	push	ar5
      0003FF C0 04            [24] 1499 	push	ar4
      000401 C0 02            [24] 1500 	push	ar2
      000403 C0 03            [24] 1501 	push	ar3
      000405 C0 06            [24] 1502 	push	ar6
      000407 C0 07            [24] 1503 	push	ar7
      000409 85*10 82         [24] 1504 	mov	dpl,_tdm_state_update_sloc1_1_0
      00040C 85*11 83         [24] 1505 	mov	dph,(_tdm_state_update_sloc1_1_0 + 1)
      00040F 85*12 F0         [24] 1506 	mov	b,(_tdm_state_update_sloc1_1_0 + 2)
      000412 E5*13            [12] 1507 	mov	a,(_tdm_state_update_sloc1_1_0 + 3)
      000414 12r00r00         [24] 1508 	lcall	___fsadd
      000417 85 82*00         [24] 1509 	mov	_average_duty_cycle,dpl
      00041A 85 83*01         [24] 1510 	mov	(_average_duty_cycle + 1),dph
      00041D 85 F0*02         [24] 1511 	mov	(_average_duty_cycle + 2),b
      000420 F5*03            [12] 1512 	mov	(_average_duty_cycle + 3),a
      000422 E5 81            [12] 1513 	mov	a,sp
      000424 24 FC            [12] 1514 	add	a,#0xfc
      000426 F5 81            [12] 1515 	mov	sp,a
      000428 D0 04            [24] 1516 	pop	ar4
      00042A D0 05            [24] 1517 	pop	ar5
      00042C D0 06            [24] 1518 	pop	ar6
      00042E D0 07            [24] 1519 	pop	ar7
                                   1520 ;	radio/tdm.c:287: transmitted_ticks = 0;
      000430 78r1B            [12] 1521 	mov	r0,#_transmitted_ticks
      000432 E4               [12] 1522 	clr	a
      000433 F2               [24] 1523 	movx	@r0,a
      000434 08               [12] 1524 	inc	r0
      000435 F2               [24] 1525 	movx	@r0,a
                                   1526 ;	radio/tdm.c:288: duty_cycle_wait = (average_duty_cycle >= (duty_cycle - duty_cycle_offset));
      000436 EC               [12] 1527 	mov	a,r4
      000437 C3               [12] 1528 	clr	c
      000438 95*0E            [12] 1529 	subb	a,_tdm_state_update_sloc0_1_0
      00043A FC               [12] 1530 	mov	r4,a
      00043B ED               [12] 1531 	mov	a,r5
      00043C 95*0F            [12] 1532 	subb	a,(_tdm_state_update_sloc0_1_0 + 1)
      00043E FD               [12] 1533 	mov	r5,a
      00043F 8C 82            [24] 1534 	mov	dpl,r4
      000441 8D 83            [24] 1535 	mov	dph,r5
      000443 12r00r00         [24] 1536 	lcall	___sint2fs
      000446 AC 82            [24] 1537 	mov	r4,dpl
      000448 AD 83            [24] 1538 	mov	r5,dph
      00044A AE F0            [24] 1539 	mov	r6,b
      00044C FF               [12] 1540 	mov	r7,a
      00044D C0 07            [24] 1541 	push	ar7
      00044F C0 06            [24] 1542 	push	ar6
      000451 C0 04            [24] 1543 	push	ar4
      000453 C0 05            [24] 1544 	push	ar5
      000455 C0 06            [24] 1545 	push	ar6
      000457 C0 07            [24] 1546 	push	ar7
      000459 85*00 82         [24] 1547 	mov	dpl,_average_duty_cycle
      00045C 85*01 83         [24] 1548 	mov	dph,(_average_duty_cycle + 1)
      00045F 85*02 F0         [24] 1549 	mov	b,(_average_duty_cycle + 2)
      000462 E5*03            [12] 1550 	mov	a,(_average_duty_cycle + 3)
      000464 12r00r00         [24] 1551 	lcall	___fslt
      000467 E5 81            [12] 1552 	mov	a,sp
      000469 24 FC            [12] 1553 	add	a,#0xfc
      00046B F5 81            [12] 1554 	mov	sp,a
      00046D D0 06            [24] 1555 	pop	ar6
      00046F D0 07            [24] 1556 	pop	ar7
      000471 E5 82            [12] 1557 	mov	a,dpl
      000473 24 FF            [12] 1558 	add	a,#0xFF
      000475 92*09            [24] 1559 	mov  _tdm_state_update_sloc3_1_0,c
      000477 B3               [12] 1560 	cpl	c
      000478 92*07            [24] 1561 	mov	_duty_cycle_wait,c
                                   1562 ;	radio/tdm.c:302: tdm_state_remaining -= tdelta;
      00047A D0 07            [24] 1563 	pop	ar7
      00047C D0 06            [24] 1564 	pop	ar6
                                   1565 ;	radio/tdm.c:288: duty_cycle_wait = (average_duty_cycle >= (duty_cycle - duty_cycle_offset));
      00047E                       1566 00119$:
                                   1567 ;	radio/tdm.c:292: transmit_wait = 0;
      00047E 78r17            [12] 1568 	mov	r0,#_transmit_wait
      000480 E4               [12] 1569 	clr	a
      000481 F2               [24] 1570 	movx	@r0,a
      000482 08               [12] 1571 	inc	r0
      000483 F2               [24] 1572 	movx	@r0,a
      000484 02r01rA7         [24] 1573 	ljmp	00121$
      000487                       1574 00123$:
                                   1575 ;	radio/tdm.c:296: if (tdm_state == TDM_SYNC) {
      000487 78r00            [12] 1576 	mov	r0,#_tdm_state
      000489 E2               [24] 1577 	movx	a,@r0
      00048A B4 02 10         [24] 1578 	cjne	a,#0x02,00125$
                                   1579 ;	radio/tdm.c:297: radio_set_channel(fhop_sync_channel());
      00048D C0 07            [24] 1580 	push	ar7
      00048F C0 06            [24] 1581 	push	ar6
      000491 12r00r00         [24] 1582 	lcall	_fhop_sync_channel
      000494 12r00r00         [24] 1583 	lcall	_radio_set_channel
      000497 D0 06            [24] 1584 	pop	ar6
      000499 D0 07            [24] 1585 	pop	ar7
      00049B 80 0E            [24] 1586 	sjmp	00126$
      00049D                       1587 00125$:
                                   1588 ;	radio/tdm.c:299: radio_set_channel(fhop_receive_channel());
      00049D C0 07            [24] 1589 	push	ar7
      00049F C0 06            [24] 1590 	push	ar6
      0004A1 12r00r00         [24] 1591 	lcall	_fhop_receive_channel
      0004A4 12r00r00         [24] 1592 	lcall	_radio_set_channel
      0004A7 D0 06            [24] 1593 	pop	ar6
      0004A9 D0 07            [24] 1594 	pop	ar7
      0004AB                       1595 00126$:
                                   1596 ;	radio/tdm.c:302: tdm_state_remaining -= tdelta;
      0004AB 78r07            [12] 1597 	mov	r0,#_tdm_state_remaining
      0004AD E2               [24] 1598 	movx	a,@r0
      0004AE C3               [12] 1599 	clr	c
      0004AF 9E               [12] 1600 	subb	a,r6
      0004B0 F2               [24] 1601 	movx	@r0,a
      0004B1 08               [12] 1602 	inc	r0
      0004B2 E2               [24] 1603 	movx	a,@r0
      0004B3 9F               [12] 1604 	subb	a,r7
      0004B4 F2               [24] 1605 	movx	@r0,a
      0004B5 22               [24] 1606 	ret
                                   1607 ;------------------------------------------------------------
                                   1608 ;Allocation info for local variables in function 'tdm_yield_update'
                                   1609 ;------------------------------------------------------------
                                   1610 ;	radio/tdm.c:309: tdm_yield_update(__pdata uint8_t set_yield, __pdata uint8_t no_data)
                                   1611 ;	-----------------------------------------
                                   1612 ;	 function tdm_yield_update
                                   1613 ;	-----------------------------------------
      0004B6                       1614 _tdm_yield_update:
      0004B6 AF 82            [24] 1615 	mov	r7,dpl
                                   1616 ;	radio/tdm.c:312: if(tdm_state == TDM_SYNC && !set_yield) {
      0004B8 78r00            [12] 1617 	mov	r0,#_tdm_state
      0004BA E2               [24] 1618 	movx	a,@r0
      0004BB B4 02 24         [24] 1619 	cjne	a,#0x02,00105$
      0004BE EF               [12] 1620 	mov	a,r7
      0004BF 70 21            [24] 1621 	jnz	00105$
                                   1622 ;	radio/tdm.c:313: if (nodeId == BASE_NODEID) {
      0004C1 78r00            [12] 1623 	mov	r0,#_nodeId
      0004C3 E2               [24] 1624 	movx	a,@r0
      0004C4 F5 F0            [12] 1625 	mov	b,a
      0004C6 08               [12] 1626 	inc	r0
      0004C7 E2               [24] 1627 	movx	a,@r0
      0004C8 45 F0            [12] 1628 	orl	a,b
      0004CA 70 04            [24] 1629 	jnz	00102$
                                   1630 ;	radio/tdm.c:314: return YIELD_TRANSMIT;
      0004CC 75 82 01         [24] 1631 	mov	dpl,#0x01
      0004CF 22               [24] 1632 	ret
      0004D0                       1633 00102$:
                                   1634 ;	radio/tdm.c:317: lastTransmitWindow = nodeId | 0x8000;
      0004D0 78r00            [12] 1635 	mov	r0,#_nodeId
      0004D2 79r10            [12] 1636 	mov	r1,#_lastTransmitWindow
      0004D4 E2               [24] 1637 	movx	a,@r0
      0004D5 44 00            [12] 1638 	orl	a,#0x00
      0004D7 F3               [24] 1639 	movx	@r1,a
      0004D8 08               [12] 1640 	inc	r0
      0004D9 E2               [24] 1641 	movx	a,@r0
      0004DA 44 80            [12] 1642 	orl	a,#0x80
      0004DC 09               [12] 1643 	inc	r1
      0004DD F3               [24] 1644 	movx	@r1,a
                                   1645 ;	radio/tdm.c:318: return YIELD_RECEIVE;
      0004DE 75 82 00         [24] 1646 	mov	dpl,#0x00
      0004E1 22               [24] 1647 	ret
      0004E2                       1648 00105$:
                                   1649 ;	radio/tdm.c:322: if (tdm_state != TDM_TRANSMIT) {
      0004E2 78r00            [12] 1650 	mov	r0,#_tdm_state
      0004E4 E2               [24] 1651 	movx	a,@r0
      0004E5 70 03            [24] 1652 	jnz	00193$
      0004E7 02r06rE0         [24] 1653 	ljmp	00137$
      0004EA                       1654 00193$:
                                   1655 ;	radio/tdm.c:323: if(received_packet) {
                                   1656 ;	radio/tdm.c:324: received_packet = false;
      0004EA 10*01 00         [24] 1657 	jbc	_received_packet,00194$
      0004ED                       1658 00194$:
                                   1659 ;	radio/tdm.c:332: if(set_yield == YIELD_GET) {
      0004ED EF               [12] 1660 	mov	a,r7
      0004EE 60 03            [24] 1661 	jz	00195$
      0004F0 02r05r75         [24] 1662 	ljmp	00125$
      0004F3                       1663 00195$:
                                   1664 ;	radio/tdm.c:333: if((nodeTransmitSeq != 0 && (lastTransmitWindow & 0x7FFF) == ((nodeTransmitSeq-1) % (nodeCount-1))) || 
      0004F3 78r01            [12] 1665 	mov	r0,#_nodeTransmitSeq
      0004F5 E2               [24] 1666 	movx	a,@r0
      0004F6 F5 F0            [12] 1667 	mov	b,a
      0004F8 08               [12] 1668 	inc	r0
      0004F9 E2               [24] 1669 	movx	a,@r0
      0004FA 45 F0            [12] 1670 	orl	a,b
      0004FC 60 46            [24] 1671 	jz	00114$
      0004FE 78r10            [12] 1672 	mov	r0,#_lastTransmitWindow
      000500 E2               [24] 1673 	movx	a,@r0
      000501 54 FF            [12] 1674 	anl	a,#0xFF
      000503 FE               [12] 1675 	mov	r6,a
      000504 08               [12] 1676 	inc	r0
      000505 E2               [24] 1677 	movx	a,@r0
      000506 54 7F            [12] 1678 	anl	a,#0x7F
      000508 FF               [12] 1679 	mov	r7,a
      000509 78r01            [12] 1680 	mov	r0,#_nodeTransmitSeq
      00050B E2               [24] 1681 	movx	a,@r0
      00050C 24 FF            [12] 1682 	add	a,#0xFF
      00050E FC               [12] 1683 	mov	r4,a
      00050F 08               [12] 1684 	inc	r0
      000510 E2               [24] 1685 	movx	a,@r0
      000511 34 FF            [12] 1686 	addc	a,#0xFF
      000513 FD               [12] 1687 	mov	r5,a
      000514 78r30            [12] 1688 	mov	r0,#_nodeCount
      000516 E2               [24] 1689 	movx	a,@r0
      000517 24 FF            [12] 1690 	add	a,#0xFF
      000519 FA               [12] 1691 	mov	r2,a
      00051A 08               [12] 1692 	inc	r0
      00051B E2               [24] 1693 	movx	a,@r0
      00051C 34 FF            [12] 1694 	addc	a,#0xFF
      00051E FB               [12] 1695 	mov	r3,a
      00051F 90r00r00         [24] 1696 	mov	dptr,#__moduint_PARM_2
      000522 EA               [12] 1697 	mov	a,r2
      000523 F0               [24] 1698 	movx	@dptr,a
      000524 EB               [12] 1699 	mov	a,r3
      000525 A3               [24] 1700 	inc	dptr
      000526 F0               [24] 1701 	movx	@dptr,a
      000527 8C 82            [24] 1702 	mov	dpl,r4
      000529 8D 83            [24] 1703 	mov	dph,r5
      00052B C0 07            [24] 1704 	push	ar7
      00052D C0 06            [24] 1705 	push	ar6
      00052F 12r00r00         [24] 1706 	lcall	__moduint
      000532 AC 82            [24] 1707 	mov	r4,dpl
      000534 AD 83            [24] 1708 	mov	r5,dph
      000536 D0 06            [24] 1709 	pop	ar6
      000538 D0 07            [24] 1710 	pop	ar7
      00053A EE               [12] 1711 	mov	a,r6
      00053B B5 04 06         [24] 1712 	cjne	a,ar4,00197$
      00053E EF               [12] 1713 	mov	a,r7
      00053F B5 05 02         [24] 1714 	cjne	a,ar5,00197$
      000542 80 29            [24] 1715 	sjmp	00109$
      000544                       1716 00197$:
      000544                       1717 00114$:
                                   1718 ;	radio/tdm.c:334: (nodeTransmitSeq == 0 && (lastTransmitWindow & 0x7FFF) == (nodeCount-2)) ) {
      000544 78r01            [12] 1719 	mov	r0,#_nodeTransmitSeq
      000546 E2               [24] 1720 	movx	a,@r0
      000547 F5 F0            [12] 1721 	mov	b,a
      000549 08               [12] 1722 	inc	r0
      00054A E2               [24] 1723 	movx	a,@r0
      00054B 45 F0            [12] 1724 	orl	a,b
      00054D 70 22            [24] 1725 	jnz	00110$
      00054F 78r10            [12] 1726 	mov	r0,#_lastTransmitWindow
      000551 E2               [24] 1727 	movx	a,@r0
      000552 54 FF            [12] 1728 	anl	a,#0xFF
      000554 FE               [12] 1729 	mov	r6,a
      000555 08               [12] 1730 	inc	r0
      000556 E2               [24] 1731 	movx	a,@r0
      000557 54 7F            [12] 1732 	anl	a,#0x7F
      000559 FF               [12] 1733 	mov	r7,a
      00055A 78r30            [12] 1734 	mov	r0,#_nodeCount
      00055C E2               [24] 1735 	movx	a,@r0
      00055D 24 FE            [12] 1736 	add	a,#0xFE
      00055F FC               [12] 1737 	mov	r4,a
      000560 08               [12] 1738 	inc	r0
      000561 E2               [24] 1739 	movx	a,@r0
      000562 34 FF            [12] 1740 	addc	a,#0xFF
      000564 FD               [12] 1741 	mov	r5,a
      000565 EE               [12] 1742 	mov	a,r6
      000566 B5 04 08         [24] 1743 	cjne	a,ar4,00110$
      000569 EF               [12] 1744 	mov	a,r7
      00056A B5 05 04         [24] 1745 	cjne	a,ar5,00110$
      00056D                       1746 00109$:
                                   1747 ;	radio/tdm.c:335: return YIELD_TRANSMIT;
      00056D 75 82 01         [24] 1748 	mov	dpl,#0x01
      000570 22               [24] 1749 	ret
      000571                       1750 00110$:
                                   1751 ;	radio/tdm.c:338: return YIELD_RECEIVE;
      000571 75 82 00         [24] 1752 	mov	dpl,#0x00
      000574 22               [24] 1753 	ret
      000575                       1754 00125$:
                                   1755 ;	radio/tdm.c:341: else if(no_data) {
      000575 78r32            [12] 1756 	mov	r0,#_tdm_yield_update_PARM_2
      000577 E2               [24] 1757 	movx	a,@r0
      000578 70 03            [24] 1758 	jnz	00201$
      00057A 02r06rCE         [24] 1759 	ljmp	00122$
      00057D                       1760 00201$:
                                   1761 ;	radio/tdm.c:343: if((lastTransmitWindow & 0x7FFF) != trailer.nodeid){
      00057D 78r10            [12] 1762 	mov	r0,#_lastTransmitWindow
      00057F E2               [24] 1763 	movx	a,@r0
      000580 54 FF            [12] 1764 	anl	a,#0xFF
      000582 FE               [12] 1765 	mov	r6,a
      000583 08               [12] 1766 	inc	r0
      000584 E2               [24] 1767 	movx	a,@r0
      000585 54 7F            [12] 1768 	anl	a,#0x7F
      000587 FF               [12] 1769 	mov	r7,a
      000588 78r2C            [12] 1770 	mov	r0,#(_trailer + 0x0002)
      00058A E2               [24] 1771 	movx	a,@r0
      00058B FC               [12] 1772 	mov	r4,a
      00058C 08               [12] 1773 	inc	r0
      00058D E2               [24] 1774 	movx	a,@r0
      00058E FD               [12] 1775 	mov	r5,a
      00058F EE               [12] 1776 	mov	a,r6
      000590 B5 04 06         [24] 1777 	cjne	a,ar4,00202$
      000593 EF               [12] 1778 	mov	a,r7
      000594 B5 05 02         [24] 1779 	cjne	a,ar5,00202$
      000597 80 02            [24] 1780 	sjmp	00116$
      000599                       1781 00202$:
                                   1782 ;	radio/tdm.c:344: transmit_yield = true;
      000599 D2*03            [12] 1783 	setb	_transmit_yield
      00059B                       1784 00116$:
                                   1785 ;	radio/tdm.c:349: if (lastTransmitWindow < 0x8000 && trailer.nodeid == ((lastTransmitWindow+1) % (nodeCount-1))) {
      00059B 78r10            [12] 1786 	mov	r0,#_lastTransmitWindow
      00059D C3               [12] 1787 	clr	c
      00059E 08               [12] 1788 	inc	r0
      00059F E2               [24] 1789 	movx	a,@r0
      0005A0 94 80            [12] 1790 	subb	a,#0x80
      0005A2 50 79            [24] 1791 	jnc	00118$
      0005A4 78r10            [12] 1792 	mov	r0,#_lastTransmitWindow
      0005A6 E2               [24] 1793 	movx	a,@r0
      0005A7 24 01            [12] 1794 	add	a,#0x01
      0005A9 FE               [12] 1795 	mov	r6,a
      0005AA 08               [12] 1796 	inc	r0
      0005AB E2               [24] 1797 	movx	a,@r0
      0005AC 34 00            [12] 1798 	addc	a,#0x00
      0005AE FF               [12] 1799 	mov	r7,a
      0005AF 78r30            [12] 1800 	mov	r0,#_nodeCount
      0005B1 E2               [24] 1801 	movx	a,@r0
      0005B2 24 FF            [12] 1802 	add	a,#0xFF
      0005B4 FA               [12] 1803 	mov	r2,a
      0005B5 08               [12] 1804 	inc	r0
      0005B6 E2               [24] 1805 	movx	a,@r0
      0005B7 34 FF            [12] 1806 	addc	a,#0xFF
      0005B9 FB               [12] 1807 	mov	r3,a
      0005BA 90r00r00         [24] 1808 	mov	dptr,#__moduint_PARM_2
      0005BD EA               [12] 1809 	mov	a,r2
      0005BE F0               [24] 1810 	movx	@dptr,a
      0005BF EB               [12] 1811 	mov	a,r3
      0005C0 A3               [24] 1812 	inc	dptr
      0005C1 F0               [24] 1813 	movx	@dptr,a
      0005C2 8E 82            [24] 1814 	mov	dpl,r6
      0005C4 8F 83            [24] 1815 	mov	dph,r7
      0005C6 C0 05            [24] 1816 	push	ar5
      0005C8 C0 04            [24] 1817 	push	ar4
      0005CA 12r00r00         [24] 1818 	lcall	__moduint
      0005CD AE 82            [24] 1819 	mov	r6,dpl
      0005CF AF 83            [24] 1820 	mov	r7,dph
      0005D1 D0 04            [24] 1821 	pop	ar4
      0005D3 D0 05            [24] 1822 	pop	ar5
      0005D5 EC               [12] 1823 	mov	a,r4
      0005D6 B5 06 44         [24] 1824 	cjne	a,ar6,00118$
      0005D9 ED               [12] 1825 	mov	a,r5
      0005DA B5 07 40         [24] 1826 	cjne	a,ar7,00118$
                                   1827 ;	radio/tdm.c:350: lastTransmitWindow = trailer.nodeid;
      0005DD 78r10            [12] 1828 	mov	r0,#_lastTransmitWindow
      0005DF EC               [12] 1829 	mov	a,r4
      0005E0 F2               [24] 1830 	movx	@r0,a
      0005E1 08               [12] 1831 	inc	r0
      0005E2 ED               [12] 1832 	mov	a,r5
      0005E3 F2               [24] 1833 	movx	@r0,a
                                   1834 ;	radio/tdm.c:351: transmit_wait = packet_latency + ((uint16_t)rand())%(packet_latency*2);
      0005E4 12r00r00         [24] 1835 	lcall	_rand
      0005E7 AE 82            [24] 1836 	mov	r6,dpl
      0005E9 AF 83            [24] 1837 	mov	r7,dph
      0005EB 78r13            [12] 1838 	mov	r0,#_packet_latency
      0005ED E2               [24] 1839 	movx	a,@r0
      0005EE FA               [12] 1840 	mov	r2,a
      0005EF 08               [12] 1841 	inc	r0
      0005F0 E2               [24] 1842 	movx	a,@r0
      0005F1 CA               [12] 1843 	xch	a,r2
      0005F2 25 E0            [12] 1844 	add	a,acc
      0005F4 CA               [12] 1845 	xch	a,r2
      0005F5 33               [12] 1846 	rlc	a
      0005F6 FB               [12] 1847 	mov	r3,a
      0005F7 90r00r00         [24] 1848 	mov	dptr,#__moduint_PARM_2
      0005FA EA               [12] 1849 	mov	a,r2
      0005FB F0               [24] 1850 	movx	@dptr,a
      0005FC EB               [12] 1851 	mov	a,r3
      0005FD A3               [24] 1852 	inc	dptr
      0005FE F0               [24] 1853 	movx	@dptr,a
      0005FF 8E 82            [24] 1854 	mov	dpl,r6
      000601 8F 83            [24] 1855 	mov	dph,r7
      000603 12r00r00         [24] 1856 	lcall	__moduint
      000606 AE 82            [24] 1857 	mov	r6,dpl
      000608 AF 83            [24] 1858 	mov	r7,dph
      00060A 78r13            [12] 1859 	mov	r0,#_packet_latency
      00060C E2               [24] 1860 	movx	a,@r0
      00060D 2E               [12] 1861 	add	a,r6
      00060E FE               [12] 1862 	mov	r6,a
      00060F 08               [12] 1863 	inc	r0
      000610 E2               [24] 1864 	movx	a,@r0
      000611 3F               [12] 1865 	addc	a,r7
      000612 FF               [12] 1866 	mov	r7,a
      000613 78r17            [12] 1867 	mov	r0,#_transmit_wait
      000615 EE               [12] 1868 	mov	a,r6
      000616 F2               [24] 1869 	movx	@r0,a
      000617 08               [12] 1870 	inc	r0
      000618 EF               [12] 1871 	mov	a,r7
      000619 F2               [24] 1872 	movx	@r0,a
      00061A 02r06r9B         [24] 1873 	ljmp	00119$
      00061D                       1874 00118$:
                                   1875 ;	radio/tdm.c:355: lastTransmitWindow = trailer.nodeid | 0x8000;
      00061D 78r10            [12] 1876 	mov	r0,#_lastTransmitWindow
      00061F EC               [12] 1877 	mov	a,r4
      000620 F2               [24] 1878 	movx	@r0,a
      000621 74 80            [12] 1879 	mov	a,#0x80
      000623 4D               [12] 1880 	orl	a,r5
      000624 08               [12] 1881 	inc	r0
      000625 F2               [24] 1882 	movx	@r0,a
                                   1883 ;	radio/tdm.c:357: transmit_wait = (packet_latency*(nodeId+1) + ((uint16_t)rand())%(packet_latency*(nodeId+2)));
      000626 78r00            [12] 1884 	mov	r0,#_nodeId
      000628 90r00r00         [24] 1885 	mov	dptr,#__mulint_PARM_2
      00062B E2               [24] 1886 	movx	a,@r0
      00062C 24 01            [12] 1887 	add	a,#0x01
      00062E F0               [24] 1888 	movx	@dptr,a
      00062F 08               [12] 1889 	inc	r0
      000630 E2               [24] 1890 	movx	a,@r0
      000631 34 00            [12] 1891 	addc	a,#0x00
      000633 A3               [24] 1892 	inc	dptr
      000634 F0               [24] 1893 	movx	@dptr,a
      000635 78r13            [12] 1894 	mov	r0,#_packet_latency
      000637 E2               [24] 1895 	movx	a,@r0
      000638 F5 82            [12] 1896 	mov	dpl,a
      00063A 08               [12] 1897 	inc	r0
      00063B E2               [24] 1898 	movx	a,@r0
      00063C F5 83            [12] 1899 	mov	dph,a
      00063E 12r00r00         [24] 1900 	lcall	__mulint
      000641 AE 82            [24] 1901 	mov	r6,dpl
      000643 AF 83            [24] 1902 	mov	r7,dph
      000645 C0 07            [24] 1903 	push	ar7
      000647 C0 06            [24] 1904 	push	ar6
      000649 12r00r00         [24] 1905 	lcall	_rand
      00064C AC 82            [24] 1906 	mov	r4,dpl
      00064E AD 83            [24] 1907 	mov	r5,dph
      000650 78r00            [12] 1908 	mov	r0,#_nodeId
      000652 90r00r00         [24] 1909 	mov	dptr,#__mulint_PARM_2
      000655 E2               [24] 1910 	movx	a,@r0
      000656 24 02            [12] 1911 	add	a,#0x02
      000658 F0               [24] 1912 	movx	@dptr,a
      000659 08               [12] 1913 	inc	r0
      00065A E2               [24] 1914 	movx	a,@r0
      00065B 34 00            [12] 1915 	addc	a,#0x00
      00065D A3               [24] 1916 	inc	dptr
      00065E F0               [24] 1917 	movx	@dptr,a
      00065F 78r13            [12] 1918 	mov	r0,#_packet_latency
      000661 E2               [24] 1919 	movx	a,@r0
      000662 F5 82            [12] 1920 	mov	dpl,a
      000664 08               [12] 1921 	inc	r0
      000665 E2               [24] 1922 	movx	a,@r0
      000666 F5 83            [12] 1923 	mov	dph,a
      000668 C0 05            [24] 1924 	push	ar5
      00066A C0 04            [24] 1925 	push	ar4
      00066C 12r00r00         [24] 1926 	lcall	__mulint
      00066F AA 82            [24] 1927 	mov	r2,dpl
      000671 AB 83            [24] 1928 	mov	r3,dph
      000673 D0 04            [24] 1929 	pop	ar4
      000675 D0 05            [24] 1930 	pop	ar5
      000677 90r00r00         [24] 1931 	mov	dptr,#__moduint_PARM_2
      00067A EA               [12] 1932 	mov	a,r2
      00067B F0               [24] 1933 	movx	@dptr,a
      00067C EB               [12] 1934 	mov	a,r3
      00067D A3               [24] 1935 	inc	dptr
      00067E F0               [24] 1936 	movx	@dptr,a
      00067F 8C 82            [24] 1937 	mov	dpl,r4
      000681 8D 83            [24] 1938 	mov	dph,r5
      000683 12r00r00         [24] 1939 	lcall	__moduint
      000686 AC 82            [24] 1940 	mov	r4,dpl
      000688 AD 83            [24] 1941 	mov	r5,dph
      00068A D0 06            [24] 1942 	pop	ar6
      00068C D0 07            [24] 1943 	pop	ar7
      00068E EC               [12] 1944 	mov	a,r4
      00068F 2E               [12] 1945 	add	a,r6
      000690 FE               [12] 1946 	mov	r6,a
      000691 ED               [12] 1947 	mov	a,r5
      000692 3F               [12] 1948 	addc	a,r7
      000693 FF               [12] 1949 	mov	r7,a
      000694 78r17            [12] 1950 	mov	r0,#_transmit_wait
      000696 EE               [12] 1951 	mov	a,r6
      000697 F2               [24] 1952 	movx	@r0,a
      000698 08               [12] 1953 	inc	r0
      000699 EF               [12] 1954 	mov	a,r7
      00069A F2               [24] 1955 	movx	@r0,a
      00069B                       1956 00119$:
                                   1957 ;	radio/tdm.c:360: transmit_wait %= (packet_latency*4);
      00069B 78r13            [12] 1958 	mov	r0,#_packet_latency
      00069D E2               [24] 1959 	movx	a,@r0
      00069E FE               [12] 1960 	mov	r6,a
      00069F 08               [12] 1961 	inc	r0
      0006A0 E2               [24] 1962 	movx	a,@r0
      0006A1 CE               [12] 1963 	xch	a,r6
      0006A2 25 E0            [12] 1964 	add	a,acc
      0006A4 CE               [12] 1965 	xch	a,r6
      0006A5 33               [12] 1966 	rlc	a
      0006A6 CE               [12] 1967 	xch	a,r6
      0006A7 25 E0            [12] 1968 	add	a,acc
      0006A9 CE               [12] 1969 	xch	a,r6
      0006AA 33               [12] 1970 	rlc	a
      0006AB FF               [12] 1971 	mov	r7,a
      0006AC 90r00r00         [24] 1972 	mov	dptr,#__moduint_PARM_2
      0006AF EE               [12] 1973 	mov	a,r6
      0006B0 F0               [24] 1974 	movx	@dptr,a
      0006B1 EF               [12] 1975 	mov	a,r7
      0006B2 A3               [24] 1976 	inc	dptr
      0006B3 F0               [24] 1977 	movx	@dptr,a
      0006B4 78r17            [12] 1978 	mov	r0,#_transmit_wait
      0006B6 E2               [24] 1979 	movx	a,@r0
      0006B7 F5 82            [12] 1980 	mov	dpl,a
      0006B9 08               [12] 1981 	inc	r0
      0006BA E2               [24] 1982 	movx	a,@r0
      0006BB F5 83            [12] 1983 	mov	dph,a
      0006BD 12r00r00         [24] 1984 	lcall	__moduint
      0006C0 E5 82            [12] 1985 	mov	a,dpl
      0006C2 85 83 F0         [24] 1986 	mov	b,dph
      0006C5 78r17            [12] 1987 	mov	r0,#_transmit_wait
      0006C7 F2               [24] 1988 	movx	@r0,a
      0006C8 08               [12] 1989 	inc	r0
      0006C9 E5 F0            [12] 1990 	mov	a,b
      0006CB F2               [24] 1991 	movx	@r0,a
      0006CC 80 0E            [24] 1992 	sjmp	00126$
      0006CE                       1993 00122$:
                                   1994 ;	radio/tdm.c:364: lastTransmitWindow = nodeId | 0x8000;
      0006CE 78r00            [12] 1995 	mov	r0,#_nodeId
      0006D0 79r10            [12] 1996 	mov	r1,#_lastTransmitWindow
      0006D2 E2               [24] 1997 	movx	a,@r0
      0006D3 44 00            [12] 1998 	orl	a,#0x00
      0006D5 F3               [24] 1999 	movx	@r1,a
      0006D6 08               [12] 2000 	inc	r0
      0006D7 E2               [24] 2001 	movx	a,@r0
      0006D8 44 80            [12] 2002 	orl	a,#0x80
      0006DA 09               [12] 2003 	inc	r1
      0006DB F3               [24] 2004 	movx	@r1,a
      0006DC                       2005 00126$:
                                   2006 ;	radio/tdm.c:368: return YIELD_RECEIVE;
      0006DC 75 82 00         [24] 2007 	mov	dpl,#0x00
      0006DF 22               [24] 2008 	ret
      0006E0                       2009 00137$:
                                   2010 ;	radio/tdm.c:370: else if(tdm_state == TDM_TRANSMIT) { // We must be in Transmit Mode
      0006E0 78r00            [12] 2011 	mov	r0,#_tdm_state
      0006E2 E2               [24] 2012 	movx	a,@r0
      0006E3 70 5A            [24] 2013 	jnz	00138$
                                   2014 ;	radio/tdm.c:372: if(received_packet) {
      0006E5 30*01 0C         [24] 2015 	jnb	_received_packet,00128$
                                   2016 ;	radio/tdm.c:373: lastTransmitWindow = 0x8000;
      0006E8 78r10            [12] 2017 	mov	r0,#_lastTransmitWindow
      0006EA E4               [12] 2018 	clr	a
      0006EB F2               [24] 2019 	movx	@r0,a
      0006EC 08               [12] 2020 	inc	r0
      0006ED 74 80            [12] 2021 	mov	a,#0x80
      0006EF F2               [24] 2022 	movx	@r0,a
                                   2023 ;	radio/tdm.c:374: return YIELD_RECEIVE;
      0006F0 75 82 00         [24] 2024 	mov	dpl,#0x00
      0006F3 22               [24] 2025 	ret
      0006F4                       2026 00128$:
                                   2027 ;	radio/tdm.c:377: if(yielded_slot) {
      0006F4 30*02 10         [24] 2028 	jnb	_yielded_slot,00130$
                                   2029 ;	radio/tdm.c:379: lastTransmitWindow = nodeId | 0x8000;
      0006F7 78r00            [12] 2030 	mov	r0,#_nodeId
      0006F9 79r10            [12] 2031 	mov	r1,#_lastTransmitWindow
      0006FB E2               [24] 2032 	movx	a,@r0
      0006FC 44 00            [12] 2033 	orl	a,#0x00
      0006FE F3               [24] 2034 	movx	@r1,a
      0006FF 08               [12] 2035 	inc	r0
      000700 E2               [24] 2036 	movx	a,@r0
      000701 44 80            [12] 2037 	orl	a,#0x80
      000703 09               [12] 2038 	inc	r1
      000704 F3               [24] 2039 	movx	@r1,a
      000705 80 0E            [24] 2040 	sjmp	00131$
      000707                       2041 00130$:
                                   2042 ;	radio/tdm.c:382: lastTransmitWindow = nodeId;
      000707 78r00            [12] 2043 	mov	r0,#_nodeId
      000709 E2               [24] 2044 	movx	a,@r0
      00070A FE               [12] 2045 	mov	r6,a
      00070B 08               [12] 2046 	inc	r0
      00070C E2               [24] 2047 	movx	a,@r0
      00070D FF               [12] 2048 	mov	r7,a
      00070E 78r10            [12] 2049 	mov	r0,#_lastTransmitWindow
      000710 EE               [12] 2050 	mov	a,r6
      000711 F2               [24] 2051 	movx	@r0,a
      000712 08               [12] 2052 	inc	r0
      000713 EF               [12] 2053 	mov	a,r7
      000714 F2               [24] 2054 	movx	@r0,a
      000715                       2055 00131$:
                                   2056 ;	radio/tdm.c:385: if (transmit_yield) {
                                   2057 ;	radio/tdm.c:387: transmit_yield = false;
      000715 10*03 02         [24] 2058 	jbc	_transmit_yield,00209$
      000718 80 21            [24] 2059 	sjmp	00133$
      00071A                       2060 00209$:
                                   2061 ;	radio/tdm.c:390: transmit_wait = packet_latency*6;
      00071A 78r13            [12] 2062 	mov	r0,#_packet_latency
      00071C 90r00r00         [24] 2063 	mov	dptr,#__mulint_PARM_2
      00071F E2               [24] 2064 	movx	a,@r0
      000720 F0               [24] 2065 	movx	@dptr,a
      000721 08               [12] 2066 	inc	r0
      000722 E2               [24] 2067 	movx	a,@r0
      000723 A3               [24] 2068 	inc	dptr
      000724 F0               [24] 2069 	movx	@dptr,a
      000725 90 00 06         [24] 2070 	mov	dptr,#0x0006
      000728 12r00r00         [24] 2071 	lcall	__mulint
      00072B E5 82            [12] 2072 	mov	a,dpl
      00072D 85 83 F0         [24] 2073 	mov	b,dph
      000730 78r17            [12] 2074 	mov	r0,#_transmit_wait
      000732 F2               [24] 2075 	movx	@r0,a
      000733 08               [12] 2076 	inc	r0
      000734 E5 F0            [12] 2077 	mov	a,b
      000736 F2               [24] 2078 	movx	@r0,a
                                   2079 ;	radio/tdm.c:392: return YIELD_RECEIVE;
      000737 75 82 00         [24] 2080 	mov	dpl,#0x00
      00073A 22               [24] 2081 	ret
      00073B                       2082 00133$:
                                   2083 ;	radio/tdm.c:394: return YIELD_TRANSMIT;
      00073B 75 82 01         [24] 2084 	mov	dpl,#0x01
      00073E 22               [24] 2085 	ret
      00073F                       2086 00138$:
                                   2087 ;	radio/tdm.c:396: return YIELD_TRANSMIT;	
      00073F 75 82 01         [24] 2088 	mov	dpl,#0x01
      000742 22               [24] 2089 	ret
                                   2090 ;------------------------------------------------------------
                                   2091 ;Allocation info for local variables in function 'temperature_update'
                                   2092 ;------------------------------------------------------------
                                   2093 ;diff                      Allocated to registers r6 r7 
                                   2094 ;------------------------------------------------------------
                                   2095 ;	radio/tdm.c:402: static void temperature_update(void)
                                   2096 ;	-----------------------------------------
                                   2097 ;	 function temperature_update
                                   2098 ;	-----------------------------------------
      000743                       2099 _temperature_update:
                                   2100 ;	radio/tdm.c:405: if (radio_get_transmit_power() <= 20) {
      000743 12r00r00         [24] 2101 	lcall	_radio_get_transmit_power
      000746 E5 82            [12] 2102 	mov	a,dpl
      000748 FF               [12] 2103 	mov	r7,a
      000749 24 EB            [12] 2104 	add	a,#0xff - 0x14
      00074B 40 05            [24] 2105 	jc	00102$
                                   2106 ;	radio/tdm.c:406: duty_cycle_offset = 0;
      00074D 78r1A            [12] 2107 	mov	r0,#_duty_cycle_offset
      00074F E4               [12] 2108 	clr	a
      000750 F2               [24] 2109 	movx	@r0,a
                                   2110 ;	radio/tdm.c:407: return;
      000751 22               [24] 2111 	ret
      000752                       2112 00102$:
                                   2113 ;	radio/tdm.c:410: diff = radio_temperature() - MAX_PA_TEMPERATURE;
      000752 12r00r00         [24] 2114 	lcall	_radio_temperature
      000755 E5 82            [12] 2115 	mov	a,dpl
      000757 85 83 F0         [24] 2116 	mov	b,dph
      00075A 24 9C            [12] 2117 	add	a,#0x9C
      00075C FE               [12] 2118 	mov	r6,a
      00075D E5 F0            [12] 2119 	mov	a,b
      00075F 34 FF            [12] 2120 	addc	a,#0xFF
      000761 FF               [12] 2121 	mov	r7,a
                                   2122 ;	radio/tdm.c:411: if (diff <= 0 && duty_cycle_offset > 0) {
      000762 C3               [12] 2123 	clr	c
      000763 E4               [12] 2124 	clr	a
      000764 9E               [12] 2125 	subb	a,r6
      000765 74 80            [12] 2126 	mov	a,#(0x00 ^ 0x80)
      000767 8F F0            [24] 2127 	mov	b,r7
      000769 63 F0 80         [24] 2128 	xrl	b,#0x80
      00076C 95 F0            [12] 2129 	subb	a,b
      00076E E4               [12] 2130 	clr	a
      00076F 33               [12] 2131 	rlc	a
      000770 FD               [12] 2132 	mov	r5,a
      000771 70 0C            [24] 2133 	jnz	00112$
      000773 78r1A            [12] 2134 	mov	r0,#_duty_cycle_offset
      000775 E2               [24] 2135 	movx	a,@r0
      000776 60 07            [24] 2136 	jz	00112$
                                   2137 ;	radio/tdm.c:413: duty_cycle_offset -= 1;
      000778 78r1A            [12] 2138 	mov	r0,#_duty_cycle_offset
      00077A E2               [24] 2139 	movx	a,@r0
      00077B 14               [12] 2140 	dec	a
      00077C F2               [24] 2141 	movx	@r0,a
      00077D 80 37            [24] 2142 	sjmp	00113$
      00077F                       2143 00112$:
                                   2144 ;	radio/tdm.c:414: } else if (diff > 10) {
      00077F C3               [12] 2145 	clr	c
      000780 74 0A            [12] 2146 	mov	a,#0x0A
      000782 9E               [12] 2147 	subb	a,r6
      000783 74 80            [12] 2148 	mov	a,#(0x00 ^ 0x80)
      000785 8F F0            [24] 2149 	mov	b,r7
      000787 63 F0 80         [24] 2150 	xrl	b,#0x80
      00078A 95 F0            [12] 2151 	subb	a,b
      00078C 50 08            [24] 2152 	jnc	00109$
                                   2153 ;	radio/tdm.c:416: duty_cycle_offset += 10;
      00078E 78r1A            [12] 2154 	mov	r0,#_duty_cycle_offset
      000790 E2               [24] 2155 	movx	a,@r0
      000791 24 0A            [12] 2156 	add	a,#0x0A
      000793 F2               [24] 2157 	movx	@r0,a
      000794 80 20            [24] 2158 	sjmp	00113$
      000796                       2159 00109$:
                                   2160 ;	radio/tdm.c:417: } else if (diff > 5) {
      000796 C3               [12] 2161 	clr	c
      000797 74 05            [12] 2162 	mov	a,#0x05
      000799 9E               [12] 2163 	subb	a,r6
      00079A 74 80            [12] 2164 	mov	a,#(0x00 ^ 0x80)
      00079C 8F F0            [24] 2165 	mov	b,r7
      00079E 63 F0 80         [24] 2166 	xrl	b,#0x80
      0007A1 95 F0            [12] 2167 	subb	a,b
      0007A3 50 08            [24] 2168 	jnc	00106$
                                   2169 ;	radio/tdm.c:419: duty_cycle_offset += 5;
      0007A5 78r1A            [12] 2170 	mov	r0,#_duty_cycle_offset
      0007A7 E2               [24] 2171 	movx	a,@r0
      0007A8 24 05            [12] 2172 	add	a,#0x05
      0007AA F2               [24] 2173 	movx	@r0,a
      0007AB 80 09            [24] 2174 	sjmp	00113$
      0007AD                       2175 00106$:
                                   2176 ;	radio/tdm.c:420: } else if (diff > 0) {
      0007AD ED               [12] 2177 	mov	a,r5
      0007AE 60 06            [24] 2178 	jz	00113$
                                   2179 ;	radio/tdm.c:422: duty_cycle_offset += 1;				
      0007B0 78r1A            [12] 2180 	mov	r0,#_duty_cycle_offset
      0007B2 E2               [24] 2181 	movx	a,@r0
      0007B3 24 01            [12] 2182 	add	a,#0x01
      0007B5 F2               [24] 2183 	movx	@r0,a
      0007B6                       2184 00113$:
                                   2185 ;	radio/tdm.c:425: if ((duty_cycle-duty_cycle_offset) < 20) {
      0007B6 78r19            [12] 2186 	mov	r0,#_duty_cycle
      0007B8 E2               [24] 2187 	movx	a,@r0
      0007B9 FE               [12] 2188 	mov	r6,a
      0007BA 7F 00            [12] 2189 	mov	r7,#0x00
      0007BC 78r1A            [12] 2190 	mov	r0,#_duty_cycle_offset
      0007BE E2               [24] 2191 	movx	a,@r0
      0007BF FC               [12] 2192 	mov	r4,a
      0007C0 7D 00            [12] 2193 	mov	r5,#0x00
      0007C2 EE               [12] 2194 	mov	a,r6
      0007C3 C3               [12] 2195 	clr	c
      0007C4 9C               [12] 2196 	subb	a,r4
      0007C5 FE               [12] 2197 	mov	r6,a
      0007C6 EF               [12] 2198 	mov	a,r7
      0007C7 9D               [12] 2199 	subb	a,r5
      0007C8 FF               [12] 2200 	mov	r7,a
      0007C9 C3               [12] 2201 	clr	c
      0007CA EE               [12] 2202 	mov	a,r6
      0007CB 94 14            [12] 2203 	subb	a,#0x14
      0007CD EF               [12] 2204 	mov	a,r7
      0007CE 64 80            [12] 2205 	xrl	a,#0x80
      0007D0 94 80            [12] 2206 	subb	a,#0x80
      0007D2 50 08            [24] 2207 	jnc	00117$
                                   2208 ;	radio/tdm.c:426: duty_cycle_offset = duty_cycle - 20;
      0007D4 78r19            [12] 2209 	mov	r0,#_duty_cycle
      0007D6 79r1A            [12] 2210 	mov	r1,#_duty_cycle_offset
      0007D8 E2               [24] 2211 	movx	a,@r0
      0007D9 24 EC            [12] 2212 	add	a,#0xEC
      0007DB F3               [24] 2213 	movx	@r1,a
      0007DC                       2214 00117$:
      0007DC 22               [24] 2215 	ret
                                   2216 ;------------------------------------------------------------
                                   2217 ;Allocation info for local variables in function 'link_update'
                                   2218 ;------------------------------------------------------------
                                   2219 ;	radio/tdm.c:435: link_update(void)
                                   2220 ;	-----------------------------------------
                                   2221 ;	 function link_update
                                   2222 ;	-----------------------------------------
      0007DD                       2223 _link_update:
                                   2224 ;	radio/tdm.c:437: if (nodeId == BASE_NODEID || received_sync) {
      0007DD 78r00            [12] 2225 	mov	r0,#_nodeId
      0007DF E2               [24] 2226 	movx	a,@r0
      0007E0 F5 F0            [12] 2227 	mov	b,a
      0007E2 08               [12] 2228 	inc	r0
      0007E3 E2               [24] 2229 	movx	a,@r0
      0007E4 45 F0            [12] 2230 	orl	a,b
      0007E6 60 03            [24] 2231 	jz	00101$
      0007E8 30*05 0E         [24] 2232 	jnb	_received_sync,00102$
      0007EB                       2233 00101$:
                                   2234 ;	radio/tdm.c:438: unlock_count = 0;
      0007EB 90r01r0D         [24] 2235 	mov	dptr,#_unlock_count
      0007EE E4               [12] 2236 	clr	a
      0007EF F0               [24] 2237 	movx	@dptr,a
                                   2238 ;	radio/tdm.c:439: received_sync = false;
      0007F0 C2*05            [12] 2239 	clr	_received_sync
                                   2240 ;	radio/tdm.c:440: fhop_set_locked(true);
      0007F2 D2*00            [12] 2241 	setb	_fhop_set_locked_PARM_1
      0007F4 12r00r00         [24] 2242 	lcall	_fhop_set_locked
      0007F7 80 07            [24] 2243 	sjmp	00103$
      0007F9                       2244 00102$:
                                   2245 ;	radio/tdm.c:445: unlock_count++;
      0007F9 90r01r0D         [24] 2246 	mov	dptr,#_unlock_count
      0007FC E0               [24] 2247 	movx	a,@dptr
      0007FD 24 01            [12] 2248 	add	a,#0x01
      0007FF F0               [24] 2249 	movx	@dptr,a
      000800                       2250 00103$:
                                   2251 ;	radio/tdm.c:449: if (unlock_count < 2) {
      000800 90r01r0D         [24] 2252 	mov	dptr,#_unlock_count
      000803 E0               [24] 2253 	movx	a,@dptr
      000804 FF               [12] 2254 	mov	r7,a
      000805 BF 02 00         [24] 2255 	cjne	r7,#0x02,00149$
      000808                       2256 00149$:
      000808 50 04            [24] 2257 	jnc	00106$
                                   2258 ;	radio/tdm.c:450: RADIO_LED(LED_ON);
      00080A C2 95            [12] 2259 	clr	_LED_GREEN
      00080C 80 45            [24] 2260 	sjmp	00107$
      00080E                       2261 00106$:
                                   2262 ;	radio/tdm.c:452: sync_count = 0;
      00080E 78r12            [12] 2263 	mov	r0,#_sync_count
      000810 E4               [12] 2264 	clr	a
      000811 F2               [24] 2265 	movx	@r0,a
                                   2266 ;	radio/tdm.c:453: RADIO_LED(blink_state);
      000812 A2*04            [12] 2267 	mov	c,_blink_state
      000814 92 95            [24] 2268 	mov	_LED_GREEN,c
                                   2269 ;	radio/tdm.c:454: blink_state = !blink_state;
      000816 B2*04            [12] 2270 	cpl	_blink_state
                                   2271 ;	radio/tdm.c:455: nodeTransmitSeq = 0xFFFF;
      000818 78r01            [12] 2272 	mov	r0,#_nodeTransmitSeq
      00081A 74 FF            [12] 2273 	mov	a,#0xFF
      00081C F2               [24] 2274 	movx	@r0,a
      00081D 08               [12] 2275 	inc	r0
      00081E F2               [24] 2276 	movx	@r0,a
                                   2277 ;	radio/tdm.c:457: memset(remote_statistics, 0, sizeof(remote_statistics));
      00081F 90r00r00         [24] 2278 	mov	dptr,#_memset_PARM_2
      000822 E4               [12] 2279 	clr	a
      000823 F0               [24] 2280 	movx	@dptr,a
      000824 90r00r00         [24] 2281 	mov	dptr,#_memset_PARM_3
      000827 74 10            [12] 2282 	mov	a,#0x10
      000829 F0               [24] 2283 	movx	@dptr,a
      00082A E4               [12] 2284 	clr	a
      00082B A3               [24] 2285 	inc	dptr
      00082C F0               [24] 2286 	movx	@dptr,a
      00082D 90r00r00         [24] 2287 	mov	dptr,#_remote_statistics
      000830 75 F0 00         [24] 2288 	mov	b,#0x00
      000833 12r00r00         [24] 2289 	lcall	_memset
                                   2290 ;	radio/tdm.c:458: memset(statistics, 0, sizeof(statistics));
      000836 90r00r00         [24] 2291 	mov	dptr,#_memset_PARM_2
      000839 E4               [12] 2292 	clr	a
      00083A F0               [24] 2293 	movx	@dptr,a
      00083B 90r00r00         [24] 2294 	mov	dptr,#_memset_PARM_3
      00083E 74 10            [12] 2295 	mov	a,#0x10
      000840 F0               [24] 2296 	movx	@dptr,a
      000841 E4               [12] 2297 	clr	a
      000842 A3               [24] 2298 	inc	dptr
      000843 F0               [24] 2299 	movx	@dptr,a
      000844 90r00r00         [24] 2300 	mov	dptr,#_statistics
      000847 75 F0 00         [24] 2301 	mov	b,#0x00
      00084A 12r00r00         [24] 2302 	lcall	_memset
                                   2303 ;	radio/tdm.c:461: statistics_receive_count = 0;
      00084D 78r25            [12] 2304 	mov	r0,#_statistics_receive_count
      00084F E4               [12] 2305 	clr	a
      000850 F2               [24] 2306 	movx	@r0,a
      000851 08               [12] 2307 	inc	r0
      000852 F2               [24] 2308 	movx	@r0,a
      000853                       2309 00107$:
                                   2310 ;	radio/tdm.c:469: if (unlock_count > 3) {
      000853 90r01r0D         [24] 2311 	mov	dptr,#_unlock_count
      000856 E0               [24] 2312 	movx	a,@dptr
      000857 FF               [12] 2313 	mov  r7,a
      000858 24 FC            [12] 2314 	add	a,#0xff - 0x03
      00085A 50 29            [24] 2315 	jnc	00116$
                                   2316 ;	radio/tdm.c:470: if(sync_any) {
      00085C 30*06 0F         [24] 2317 	jnb	_sync_any,00111$
                                   2318 ;	radio/tdm.c:471: if(unlock_count % 5 == 4) {
      00085F 75 F0 05         [24] 2319 	mov	b,#0x05
      000862 EF               [12] 2320 	mov	a,r7
      000863 84               [48] 2321 	div	ab
      000864 AF F0            [24] 2322 	mov	r7,b
      000866 BF 04 10         [24] 2323 	cjne	r7,#0x04,00112$
                                   2324 ;	radio/tdm.c:472: fhop_window_change(); // Try our luck on another channel
      000869 12r00r00         [24] 2325 	lcall	_fhop_window_change
      00086C 80 0B            [24] 2326 	sjmp	00112$
      00086E                       2327 00111$:
                                   2328 ;	radio/tdm.c:476: fhop_set_locked(false); // Set channel back to sync and try again
      00086E C2*00            [12] 2329 	clr	_fhop_set_locked_PARM_1
      000870 12r00r00         [24] 2330 	lcall	_fhop_set_locked
                                   2331 ;	radio/tdm.c:477: radio_set_channel(fhop_sync_channel());
      000873 12r00r00         [24] 2332 	lcall	_fhop_sync_channel
      000876 12r00r00         [24] 2333 	lcall	_radio_set_channel
      000879                       2334 00112$:
                                   2335 ;	radio/tdm.c:482: if (unlock_count > UNLOCK_RESET_SEC) {
      000879 90r01r0D         [24] 2336 	mov	dptr,#_unlock_count
      00087C E0               [24] 2337 	movx	a,@dptr
      00087D FF               [12] 2338 	mov  r7,a
      00087E 24 C3            [12] 2339 	add	a,#0xff - 0x3C
      000880 50 03            [24] 2340 	jnc	00116$
                                   2341 ;	radio/tdm.c:484: RSTSRC |= 0x10;
      000882 43 EF 10         [24] 2342 	orl	_RSTSRC,#0x10
      000885                       2343 00116$:
                                   2344 ;	radio/tdm.c:489: statistics_transmit_stats = 0;
      000885 78r27            [12] 2345 	mov	r0,#_statistics_transmit_stats
      000887 E4               [12] 2346 	clr	a
      000888 F2               [24] 2347 	movx	@r0,a
      000889 08               [12] 2348 	inc	r0
      00088A F2               [24] 2349 	movx	@r0,a
                                   2350 ;	radio/tdm.c:492: if(test_display_toggle) {
      00088B 30*00 07         [24] 2351 	jnb	_test_display_toggle,00118$
                                   2352 ;	radio/tdm.c:493: test_display = at_testmode;
      00088E 78r00            [12] 2353 	mov	r0,#_at_testmode
      000890 E2               [24] 2354 	movx	a,@r0
      000891 FF               [12] 2355 	mov	r7,a
      000892 78r24            [12] 2356 	mov	r0,#_test_display
      000894 F2               [24] 2357 	movx	@r0,a
      000895                       2358 00118$:
                                   2359 ;	radio/tdm.c:495: test_display_toggle = !test_display_toggle;
      000895 B2*00            [12] 2360 	cpl	_test_display_toggle
                                   2361 ;	radio/tdm.c:497: temperature_count++;
      000897 90r01r0E         [24] 2362 	mov	dptr,#_temperature_count
      00089A E0               [24] 2363 	movx	a,@dptr
      00089B 24 01            [12] 2364 	add	a,#0x01
      00089D F0               [24] 2365 	movx	@dptr,a
                                   2366 ;	radio/tdm.c:498: if (temperature_count == 4) {
      00089E E0               [24] 2367 	movx	a,@dptr
      00089F FF               [12] 2368 	mov	r7,a
      0008A0 BF 04 08         [24] 2369 	cjne	r7,#0x04,00121$
                                   2370 ;	radio/tdm.c:500: temperature_update();
      0008A3 12r07r43         [24] 2371 	lcall	_temperature_update
                                   2372 ;	radio/tdm.c:501: temperature_count = 0;
      0008A6 90r01r0E         [24] 2373 	mov	dptr,#_temperature_count
      0008A9 E4               [12] 2374 	clr	a
      0008AA F0               [24] 2375 	movx	@dptr,a
      0008AB                       2376 00121$:
      0008AB 22               [24] 2377 	ret
                                   2378 ;------------------------------------------------------------
                                   2379 ;Allocation info for local variables in function 'tdm_remote_at'
                                   2380 ;------------------------------------------------------------
                                   2381 ;	radio/tdm.c:507: tdm_remote_at(__pdata uint16_t destination)
                                   2382 ;	-----------------------------------------
                                   2383 ;	 function tdm_remote_at
                                   2384 ;	-----------------------------------------
      0008AC                       2385 _tdm_remote_at:
      0008AC AE 82            [24] 2386 	mov	r6,dpl
      0008AE AF 83            [24] 2387 	mov	r7,dph
                                   2388 ;	radio/tdm.c:509: memcpy(remote_at_cmd, at_cmd, strlen(at_cmd)+1);
      0008B0 90r00r00         [24] 2389 	mov	dptr,#_at_cmd
      0008B3 75 F0 00         [24] 2390 	mov	b,#0x00
      0008B6 C0 07            [24] 2391 	push	ar7
      0008B8 C0 06            [24] 2392 	push	ar6
      0008BA 12r00r00         [24] 2393 	lcall	_strlen
      0008BD E5 82            [12] 2394 	mov	a,dpl
      0008BF 85 83 F0         [24] 2395 	mov	b,dph
      0008C2 24 01            [12] 2396 	add	a,#0x01
      0008C4 FC               [12] 2397 	mov	r4,a
      0008C5 E4               [12] 2398 	clr	a
      0008C6 35 F0            [12] 2399 	addc	a,b
      0008C8 FD               [12] 2400 	mov	r5,a
      0008C9 90r00r00         [24] 2401 	mov	dptr,#_memcpy_PARM_2
      0008CC 74r00            [12] 2402 	mov	a,#_at_cmd
      0008CE F0               [24] 2403 	movx	@dptr,a
      0008CF 74s00            [12] 2404 	mov	a,#(_at_cmd >> 8)
      0008D1 A3               [24] 2405 	inc	dptr
      0008D2 F0               [24] 2406 	movx	@dptr,a
      0008D3 E4               [12] 2407 	clr	a
      0008D4 A3               [24] 2408 	inc	dptr
      0008D5 F0               [24] 2409 	movx	@dptr,a
      0008D6 90r00r00         [24] 2410 	mov	dptr,#_memcpy_PARM_3
      0008D9 EC               [12] 2411 	mov	a,r4
      0008DA F0               [24] 2412 	movx	@dptr,a
      0008DB ED               [12] 2413 	mov	a,r5
      0008DC A3               [24] 2414 	inc	dptr
      0008DD F0               [24] 2415 	movx	@dptr,a
      0008DE 90r00rFC         [24] 2416 	mov	dptr,#_remote_at_cmd
      0008E1 75 F0 00         [24] 2417 	mov	b,#0x00
      0008E4 12r00r00         [24] 2418 	lcall	_memcpy
      0008E7 D0 06            [24] 2419 	pop	ar6
      0008E9 D0 07            [24] 2420 	pop	ar7
                                   2421 ;	radio/tdm.c:510: send_at_command_to = destination;
      0008EB 78r2E            [12] 2422 	mov	r0,#_send_at_command_to
      0008ED EE               [12] 2423 	mov	a,r6
      0008EE F2               [24] 2424 	movx	@r0,a
      0008EF 08               [12] 2425 	inc	r0
      0008F0 EF               [12] 2426 	mov	a,r7
      0008F1 F2               [24] 2427 	movx	@r0,a
                                   2428 ;	radio/tdm.c:511: send_at_command = true;
      0008F2 D2*08            [12] 2429 	setb	_send_at_command
      0008F4 22               [24] 2430 	ret
                                   2431 ;------------------------------------------------------------
                                   2432 ;Allocation info for local variables in function 'handle_at_command'
                                   2433 ;------------------------------------------------------------
                                   2434 ;i                         Allocated to registers r6 
                                   2435 ;------------------------------------------------------------
                                   2436 ;	radio/tdm.c:516: handle_at_command(__pdata uint8_t len)
                                   2437 ;	-----------------------------------------
                                   2438 ;	 function handle_at_command
                                   2439 ;	-----------------------------------------
      0008F5                       2440 _handle_at_command:
      0008F5 AF 82            [24] 2441 	mov	r7,dpl
                                   2442 ;	radio/tdm.c:518: if (len < 2 || len > AT_CMD_MAXLEN || 
      0008F7 BF 02 00         [24] 2443 	cjne	r7,#0x02,00142$
      0008FA                       2444 00142$:
      0008FA 40 17            [24] 2445 	jc	00121$
      0008FC EF               [12] 2446 	mov	a,r7
      0008FD 24 EF            [12] 2447 	add	a,#0xff - 0x10
      0008FF 40 12            [24] 2448 	jc	00121$
                                   2449 ;	radio/tdm.c:519: pbuf[0] != (uint8_t)'R' || 
      000901 90r00r00         [24] 2450 	mov	dptr,#_pbuf
      000904 E0               [24] 2451 	movx	a,@dptr
      000905 FE               [12] 2452 	mov	r6,a
      000906 BE 52 0A         [24] 2453 	cjne	r6,#0x52,00121$
                                   2454 ;	radio/tdm.c:520: pbuf[1] != (uint8_t)'T') {
      000909 90r00r01         [24] 2455 	mov	dptr,#(_pbuf + 0x0001)
      00090C E0               [24] 2456 	movx	a,@dptr
      00090D FE               [12] 2457 	mov	r6,a
      00090E BE 54 02         [24] 2458 	cjne	r6,#0x54,00147$
      000911 80 23            [24] 2459 	sjmp	00103$
      000913                       2460 00147$:
                                   2461 ;	radio/tdm.c:523: for (i=0; i<len; i++) {
      000913                       2462 00121$:
      000913 7E 00            [12] 2463 	mov	r6,#0x00
      000915                       2464 00113$:
      000915 C3               [12] 2465 	clr	c
      000916 EE               [12] 2466 	mov	a,r6
      000917 9F               [12] 2467 	subb	a,r7
      000918 50 1B            [24] 2468 	jnc	00101$
                                   2469 ;	radio/tdm.c:524: putchar(pbuf[i]);
      00091A EE               [12] 2470 	mov	a,r6
      00091B 24r00            [12] 2471 	add	a,#_pbuf
      00091D F5 82            [12] 2472 	mov	dpl,a
      00091F E4               [12] 2473 	clr	a
      000920 34s00            [12] 2474 	addc	a,#(_pbuf >> 8)
      000922 F5 83            [12] 2475 	mov	dph,a
      000924 E0               [24] 2476 	movx	a,@dptr
      000925 F5 82            [12] 2477 	mov	dpl,a
      000927 C0 07            [24] 2478 	push	ar7
      000929 C0 06            [24] 2479 	push	ar6
      00092B 12r00r00         [24] 2480 	lcall	_putchar
      00092E D0 06            [24] 2481 	pop	ar6
      000930 D0 07            [24] 2482 	pop	ar7
                                   2483 ;	radio/tdm.c:523: for (i=0; i<len; i++) {
      000932 0E               [12] 2484 	inc	r6
      000933 80 E0            [24] 2485 	sjmp	00113$
      000935                       2486 00101$:
                                   2487 ;	radio/tdm.c:526: return;
      000935 22               [24] 2488 	ret
      000936                       2489 00103$:
                                   2490 ;	radio/tdm.c:530: send_at_command_to = trailer.nodeid;
      000936 78r2C            [12] 2491 	mov	r0,#(_trailer + 0x0002)
      000938 79r2E            [12] 2492 	mov	r1,#_send_at_command_to
      00093A E2               [24] 2493 	movx	a,@r0
      00093B F3               [24] 2494 	movx	@r1,a
      00093C 08               [12] 2495 	inc	r0
      00093D E2               [24] 2496 	movx	a,@r0
      00093E 09               [12] 2497 	inc	r1
      00093F F3               [24] 2498 	movx	@r1,a
                                   2499 ;	radio/tdm.c:533: memcpy(at_cmd, pbuf, len);
      000940 90r00r00         [24] 2500 	mov	dptr,#_memcpy_PARM_2
      000943 74r00            [12] 2501 	mov	a,#_pbuf
      000945 F0               [24] 2502 	movx	@dptr,a
      000946 74s00            [12] 2503 	mov	a,#(_pbuf >> 8)
      000948 A3               [24] 2504 	inc	dptr
      000949 F0               [24] 2505 	movx	@dptr,a
      00094A E4               [12] 2506 	clr	a
      00094B A3               [24] 2507 	inc	dptr
      00094C F0               [24] 2508 	movx	@dptr,a
      00094D 90r00r00         [24] 2509 	mov	dptr,#_memcpy_PARM_3
      000950 EF               [12] 2510 	mov	a,r7
      000951 F0               [24] 2511 	movx	@dptr,a
      000952 E4               [12] 2512 	clr	a
      000953 A3               [24] 2513 	inc	dptr
      000954 F0               [24] 2514 	movx	@dptr,a
      000955 90r00r00         [24] 2515 	mov	dptr,#_at_cmd
      000958 75 F0 00         [24] 2516 	mov	b,#0x00
      00095B C0 07            [24] 2517 	push	ar7
      00095D 12r00r00         [24] 2518 	lcall	_memcpy
      000960 D0 07            [24] 2519 	pop	ar7
                                   2520 ;	radio/tdm.c:534: at_cmd[len] = '\0';
      000962 EF               [12] 2521 	mov	a,r7
      000963 24r00            [12] 2522 	add	a,#_at_cmd
      000965 F5 82            [12] 2523 	mov	dpl,a
      000967 E4               [12] 2524 	clr	a
      000968 34s00            [12] 2525 	addc	a,#(_at_cmd >> 8)
      00096A F5 83            [12] 2526 	mov	dph,a
      00096C E4               [12] 2527 	clr	a
      00096D F0               [24] 2528 	movx	@dptr,a
                                   2529 ;	radio/tdm.c:535: at_cmd[0] = 'A'; // replace 'R'
      00096E 90r00r00         [24] 2530 	mov	dptr,#_at_cmd
      000971 74 41            [12] 2531 	mov	a,#0x41
      000973 F0               [24] 2532 	movx	@dptr,a
                                   2533 ;	radio/tdm.c:536: at_cmd_len = len;
      000974 78r00            [12] 2534 	mov	r0,#_at_cmd_len
      000976 EF               [12] 2535 	mov	a,r7
      000977 F2               [24] 2536 	movx	@r0,a
                                   2537 ;	radio/tdm.c:544: if(len == 4 && at_cmd[2] == (uint8_t)'I' && at_cmd[3] == (uint8_t)'5'){
      000978 BF 04 1B         [24] 2538 	cjne	r7,#0x04,00108$
      00097B 90r00r02         [24] 2539 	mov	dptr,#(_at_cmd + 0x0002)
      00097E E0               [24] 2540 	movx	a,@dptr
      00097F FF               [12] 2541 	mov	r7,a
      000980 BF 49 13         [24] 2542 	cjne	r7,#0x49,00108$
      000983 90r00r03         [24] 2543 	mov	dptr,#(_at_cmd + 0x0003)
      000986 E0               [24] 2544 	movx	a,@dptr
      000987 FF               [12] 2545 	mov	r7,a
      000988 BF 35 0B         [24] 2546 	cjne	r7,#0x35,00108$
                                   2547 ;	radio/tdm.c:546: packet_ati5_inject(ati5_id++);
      00098B 78r29            [12] 2548 	mov	r0,#_ati5_id
      00098D 74 01            [12] 2549 	mov	a,#0x01
      00098F F2               [24] 2550 	movx	@r0,a
      000990 75 82 00         [24] 2551 	mov	dpl,#0x00
      000993 02r00r00         [24] 2552 	ljmp	_packet_ati5_inject
      000996                       2553 00108$:
                                   2554 ;	radio/tdm.c:551: packet_at_inject();
      000996 02r00r00         [24] 2555 	ljmp	_packet_at_inject
                                   2556 ;------------------------------------------------------------
                                   2557 ;Allocation info for local variables in function 'tdm_serial_loop'
                                   2558 ;------------------------------------------------------------
                                   2559 ;sloc0                     Allocated with name '_tdm_serial_loop_sloc0_1_0'
                                   2560 ;------------------------------------------------------------
                                   2561 ;	radio/tdm.c:566: tdm_serial_loop(void)
                                   2562 ;	-----------------------------------------
                                   2563 ;	 function tdm_serial_loop
                                   2564 ;	-----------------------------------------
      000999                       2565 _tdm_serial_loop:
                                   2566 ;	radio/tdm.c:568: __pdata uint16_t last_t = timer2_tick();
      000999 12r00r00         [24] 2567 	lcall	_timer2_tick
      00099C AE 82            [24] 2568 	mov	r6,dpl
      00099E AF 83            [24] 2569 	mov	r7,dph
                                   2570 ;	radio/tdm.c:569: __pdata uint16_t last_link_update = last_t;
      0009A0 78r33            [12] 2571 	mov	r0,#_tdm_serial_loop_last_link_update_1_233
      0009A2 EE               [12] 2572 	mov	a,r6
      0009A3 F2               [24] 2573 	movx	@r0,a
      0009A4 08               [12] 2574 	inc	r0
      0009A5 EF               [12] 2575 	mov	a,r7
      0009A6 F2               [24] 2576 	movx	@r0,a
                                   2577 ;	radio/tdm.c:571: _canary = 42;
      0009A7 78 FF            [12] 2578 	mov	r0,#__canary
      0009A9 76 2A            [12] 2579 	mov	@r0,#0x2A
      0009AB                       2580 00259$:
                                   2581 ;	radio/tdm.c:578: if (_canary != 42) {
      0009AB 78 FF            [12] 2582 	mov	r0,#__canary
      0009AD B6 2A 02         [24] 2583 	cjne	@r0,#0x2A,00505$
      0009B0 80 1D            [24] 2584 	sjmp	00102$
      0009B2                       2585 00505$:
                                   2586 ;	radio/tdm.c:579: panic("stack blown\n");
      0009B2 C0 07            [24] 2587 	push	ar7
      0009B4 C0 06            [24] 2588 	push	ar6
      0009B6 74r6C            [12] 2589 	mov	a,#___str_2
      0009B8 C0 E0            [24] 2590 	push	acc
      0009BA 74s00            [12] 2591 	mov	a,#(___str_2 >> 8)
      0009BC C0 E0            [24] 2592 	push	acc
      0009BE 74 80            [12] 2593 	mov	a,#0x80
      0009C0 C0 E0            [24] 2594 	push	acc
      0009C2 12r00r00         [24] 2595 	lcall	_panic
      0009C5 15 81            [12] 2596 	dec	sp
      0009C7 15 81            [12] 2597 	dec	sp
      0009C9 15 81            [12] 2598 	dec	sp
      0009CB D0 06            [24] 2599 	pop	ar6
      0009CD D0 07            [24] 2600 	pop	ar7
      0009CF                       2601 00102$:
                                   2602 ;	radio/tdm.c:582: if (pdata_canary != 0x41) {
      0009CF 78r00            [12] 2603 	mov	r0,#_pdata_canary
      0009D1 E2               [24] 2604 	movx	a,@r0
      0009D2 B4 41 02         [24] 2605 	cjne	a,#0x41,00506$
      0009D5 80 1D            [24] 2606 	sjmp	00104$
      0009D7                       2607 00506$:
                                   2608 ;	radio/tdm.c:583: panic("pdata canary changed\n");
      0009D7 C0 07            [24] 2609 	push	ar7
      0009D9 C0 06            [24] 2610 	push	ar6
      0009DB 74r79            [12] 2611 	mov	a,#___str_3
      0009DD C0 E0            [24] 2612 	push	acc
      0009DF 74s00            [12] 2613 	mov	a,#(___str_3 >> 8)
      0009E1 C0 E0            [24] 2614 	push	acc
      0009E3 74 80            [12] 2615 	mov	a,#0x80
      0009E5 C0 E0            [24] 2616 	push	acc
      0009E7 12r00r00         [24] 2617 	lcall	_panic
      0009EA 15 81            [12] 2618 	dec	sp
      0009EC 15 81            [12] 2619 	dec	sp
      0009EE 15 81            [12] 2620 	dec	sp
      0009F0 D0 06            [24] 2621 	pop	ar6
      0009F2 D0 07            [24] 2622 	pop	ar7
      0009F4                       2623 00104$:
                                   2624 ;	radio/tdm.c:591: at_command();
      0009F4 C0 07            [24] 2625 	push	ar7
      0009F6 C0 06            [24] 2626 	push	ar6
      0009F8 12r00r00         [24] 2627 	lcall	_at_command
      0009FB D0 06            [24] 2628 	pop	ar6
      0009FD D0 07            [24] 2629 	pop	ar7
                                   2630 ;	radio/tdm.c:594: if (test_display) {
      0009FF 78r24            [12] 2631 	mov	r0,#_test_display
      000A01 E2               [24] 2632 	movx	a,@r0
      000A02 60 0F            [24] 2633 	jz	00106$
                                   2634 ;	radio/tdm.c:595: display_test_output();
      000A04 C0 07            [24] 2635 	push	ar7
      000A06 C0 06            [24] 2636 	push	ar6
      000A08 12r01r55         [24] 2637 	lcall	_display_test_output
      000A0B D0 06            [24] 2638 	pop	ar6
      000A0D D0 07            [24] 2639 	pop	ar7
                                   2640 ;	radio/tdm.c:596: test_display = 0;
      000A0F 78r24            [12] 2641 	mov	r0,#_test_display
      000A11 E4               [12] 2642 	clr	a
      000A12 F2               [24] 2643 	movx	@r0,a
      000A13                       2644 00106$:
                                   2645 ;	radio/tdm.c:599: if (seen_mavlink && feature_mavlink_framing && !at_mode_active) {
      000A13 30*00 16         [24] 2646 	jnb	_seen_mavlink,00108$
      000A16 90r00r00         [24] 2647 	mov	dptr,#_feature_mavlink_framing
      000A19 E0               [24] 2648 	movx	a,@dptr
      000A1A 60 10            [24] 2649 	jz	00108$
      000A1C 20*00 0D         [24] 2650 	jb	_at_mode_active,00108$
                                   2651 ;	radio/tdm.c:600: seen_mavlink = false;
      000A1F C2*00            [12] 2652 	clr	_seen_mavlink
                                   2653 ;	radio/tdm.c:601: MAVLink_report();
      000A21 C0 07            [24] 2654 	push	ar7
      000A23 C0 06            [24] 2655 	push	ar6
      000A25 12r00r00         [24] 2656 	lcall	_MAVLink_report
      000A28 D0 06            [24] 2657 	pop	ar6
      000A2A D0 07            [24] 2658 	pop	ar7
      000A2C                       2659 00108$:
                                   2660 ;	radio/tdm.c:605: tnow = timer2_tick();
      000A2C C0 07            [24] 2661 	push	ar7
      000A2E C0 06            [24] 2662 	push	ar6
      000A30 12r00r00         [24] 2663 	lcall	_timer2_tick
      000A33 78r36            [12] 2664 	mov	r0,#_tdm_serial_loop_tnow_2_234
      000A35 E5 82            [12] 2665 	mov	a,dpl
      000A37 F2               [24] 2666 	movx	@r0,a
      000A38 08               [12] 2667 	inc	r0
      000A39 E5 83            [12] 2668 	mov	a,dph
      000A3B F2               [24] 2669 	movx	@r0,a
                                   2670 ;	radio/tdm.c:608: if (radio_receive_packet(&len, pbuf)) {			
      000A3C 78r00            [12] 2671 	mov	r0,#_radio_receive_packet_PARM_2
      000A3E 74r00            [12] 2672 	mov	a,#_pbuf
      000A40 F2               [24] 2673 	movx	@r0,a
      000A41 08               [12] 2674 	inc	r0
      000A42 74s00            [12] 2675 	mov	a,#(_pbuf >> 8)
      000A44 F2               [24] 2676 	movx	@r0,a
      000A45 90r00r35         [24] 2677 	mov	dptr,#_tdm_serial_loop_len_2_234
      000A48 75 F0 60         [24] 2678 	mov	b,#0x60
      000A4B 12r00r00         [24] 2679 	lcall	_radio_receive_packet
      000A4E D0 06            [24] 2680 	pop	ar6
      000A50 D0 07            [24] 2681 	pop	ar7
      000A52 40 03            [24] 2682 	jc	00511$
      000A54 02r0Dr4F         [24] 2683 	ljmp	00150$
      000A57                       2684 00511$:
                                   2685 ;	radio/tdm.c:611: transmit_wait = 0;
      000A57 78r17            [12] 2686 	mov	r0,#_transmit_wait
      000A59 E4               [12] 2687 	clr	a
      000A5A F2               [24] 2688 	movx	@r0,a
      000A5B 08               [12] 2689 	inc	r0
      000A5C F2               [24] 2690 	movx	@r0,a
                                   2691 ;	radio/tdm.c:613: if (len < sizeof(trailer)) {
      000A5D 78r35            [12] 2692 	mov	r0,#_tdm_serial_loop_len_2_234
      000A5F E2               [24] 2693 	movx	a,@r0
      000A60 B4 04 00         [24] 2694 	cjne	a,#0x04,00512$
      000A63                       2695 00512$:
      000A63 50 2A            [24] 2696 	jnc	00112$
                                   2697 ;	radio/tdm.c:617: printf("Invalid length.. %u\n",len);
      000A65 78r35            [12] 2698 	mov	r0,#_tdm_serial_loop_len_2_234
      000A67 E2               [24] 2699 	movx	a,@r0
      000A68 FC               [12] 2700 	mov	r4,a
      000A69 7D 00            [12] 2701 	mov	r5,#0x00
      000A6B C0 07            [24] 2702 	push	ar7
      000A6D C0 06            [24] 2703 	push	ar6
      000A6F C0 04            [24] 2704 	push	ar4
      000A71 C0 05            [24] 2705 	push	ar5
      000A73 74r8F            [12] 2706 	mov	a,#___str_4
      000A75 C0 E0            [24] 2707 	push	acc
      000A77 74s00            [12] 2708 	mov	a,#(___str_4 >> 8)
      000A79 C0 E0            [24] 2709 	push	acc
      000A7B 74 80            [12] 2710 	mov	a,#0x80
      000A7D C0 E0            [24] 2711 	push	acc
      000A7F 12r00r00         [24] 2712 	lcall	_printfl
      000A82 E5 81            [12] 2713 	mov	a,sp
      000A84 24 FB            [12] 2714 	add	a,#0xfb
      000A86 F5 81            [12] 2715 	mov	sp,a
      000A88 D0 06            [24] 2716 	pop	ar6
      000A8A D0 07            [24] 2717 	pop	ar7
                                   2718 ;	radio/tdm.c:618: continue;
      000A8C 02r09rAB         [24] 2719 	ljmp	00259$
      000A8F                       2720 00112$:
                                   2721 ;	radio/tdm.c:623: if(tdm_state == TDM_TRANSMIT){
      000A8F 78r00            [12] 2722 	mov	r0,#_tdm_state
      000A91 E2               [24] 2723 	movx	a,@r0
      000A92 70 0A            [24] 2724 	jnz	00114$
                                   2725 ;	radio/tdm.c:624: received_packet = true;
      000A94 D2*01            [12] 2726 	setb	_received_packet
                                   2727 ;	radio/tdm.c:625: lastTransmitWindow = 0x8000;
      000A96 78r10            [12] 2728 	mov	r0,#_lastTransmitWindow
      000A98 E4               [12] 2729 	clr	a
      000A99 F2               [24] 2730 	movx	@r0,a
      000A9A 08               [12] 2731 	inc	r0
      000A9B 74 80            [12] 2732 	mov	a,#0x80
      000A9D F2               [24] 2733 	movx	@r0,a
      000A9E                       2734 00114$:
                                   2735 ;	radio/tdm.c:633: memcpy(&trailer, pbuf +len-sizeof(trailer), sizeof(trailer));
      000A9E 78r35            [12] 2736 	mov	r0,#_tdm_serial_loop_len_2_234
      000AA0 E2               [24] 2737 	movx	a,@r0
      000AA1 24r00            [12] 2738 	add	a,#_pbuf
      000AA3 FC               [12] 2739 	mov	r4,a
      000AA4 E4               [12] 2740 	clr	a
      000AA5 34s00            [12] 2741 	addc	a,#(_pbuf >> 8)
      000AA7 FD               [12] 2742 	mov	r5,a
      000AA8 EC               [12] 2743 	mov	a,r4
      000AA9 24 FC            [12] 2744 	add	a,#0xFC
      000AAB FC               [12] 2745 	mov	r4,a
      000AAC ED               [12] 2746 	mov	a,r5
      000AAD 34 FF            [12] 2747 	addc	a,#0xFF
      000AAF FD               [12] 2748 	mov	r5,a
      000AB0 90r00r00         [24] 2749 	mov	dptr,#_memcpy_PARM_2
      000AB3 EC               [12] 2750 	mov	a,r4
      000AB4 F0               [24] 2751 	movx	@dptr,a
      000AB5 ED               [12] 2752 	mov	a,r5
      000AB6 A3               [24] 2753 	inc	dptr
      000AB7 F0               [24] 2754 	movx	@dptr,a
      000AB8 E4               [12] 2755 	clr	a
      000AB9 A3               [24] 2756 	inc	dptr
      000ABA F0               [24] 2757 	movx	@dptr,a
      000ABB 90r00r00         [24] 2758 	mov	dptr,#_memcpy_PARM_3
      000ABE 74 04            [12] 2759 	mov	a,#0x04
      000AC0 F0               [24] 2760 	movx	@dptr,a
      000AC1 E4               [12] 2761 	clr	a
      000AC2 A3               [24] 2762 	inc	dptr
      000AC3 F0               [24] 2763 	movx	@dptr,a
      000AC4 90r00r2A         [24] 2764 	mov	dptr,#_trailer
      000AC7 75 F0 60         [24] 2765 	mov	b,#0x60
      000ACA C0 07            [24] 2766 	push	ar7
      000ACC C0 06            [24] 2767 	push	ar6
      000ACE 12r00r00         [24] 2768 	lcall	_memcpy
      000AD1 D0 06            [24] 2769 	pop	ar6
      000AD3 D0 07            [24] 2770 	pop	ar7
                                   2771 ;	radio/tdm.c:634: len -= sizeof(trailer);
      000AD5 78r35            [12] 2772 	mov	r0,#_tdm_serial_loop_len_2_234
      000AD7 E2               [24] 2773 	movx	a,@r0
      000AD8 14               [12] 2774 	dec	a
      000AD9 14               [12] 2775 	dec	a
      000ADA 14               [12] 2776 	dec	a
      000ADB 14               [12] 2777 	dec	a
      000ADC F2               [24] 2778 	movx	@r0,a
                                   2779 ;	radio/tdm.c:638: if(trailer.nodeid & 0x8000){
      000ADD 78r2C            [12] 2780 	mov	r0,#(_trailer + 0x0002)
      000ADF E2               [24] 2781 	movx	a,@r0
      000AE0 F5*18            [12] 2782 	mov	_tdm_serial_loop_sloc0_1_0,a
      000AE2 08               [12] 2783 	inc	r0
      000AE3 E2               [24] 2784 	movx	a,@r0
      000AE4 F5*19            [12] 2785 	mov	(_tdm_serial_loop_sloc0_1_0 + 1),a
      000AE6 30 E7 3B         [24] 2786 	jnb	acc.7,00125$
                                   2787 ;	radio/tdm.c:639: if(sync_count < 0xFF && nodeTransmitSeq == 0){
      000AE9 78r12            [12] 2788 	mov	r0,#_sync_count
      000AEB E2               [24] 2789 	movx	a,@r0
      000AEC B4 FF 00         [24] 2790 	cjne	a,#0xFF,00516$
      000AEF                       2791 00516$:
      000AEF 50 11            [24] 2792 	jnc	00116$
      000AF1 78r01            [12] 2793 	mov	r0,#_nodeTransmitSeq
      000AF3 E2               [24] 2794 	movx	a,@r0
      000AF4 F5 F0            [12] 2795 	mov	b,a
      000AF6 08               [12] 2796 	inc	r0
      000AF7 E2               [24] 2797 	movx	a,@r0
      000AF8 45 F0            [12] 2798 	orl	a,b
      000AFA 70 06            [24] 2799 	jnz	00116$
                                   2800 ;	radio/tdm.c:640: sync_count += 1;
      000AFC 78r12            [12] 2801 	mov	r0,#_sync_count
      000AFE E2               [24] 2802 	movx	a,@r0
      000AFF 24 01            [12] 2803 	add	a,#0x01
      000B01 F2               [24] 2804 	movx	@r0,a
      000B02                       2805 00116$:
                                   2806 ;	radio/tdm.c:642: nodeTransmitSeq = 0;
      000B02 78r01            [12] 2807 	mov	r0,#_nodeTransmitSeq
      000B04 E4               [12] 2808 	clr	a
      000B05 F2               [24] 2809 	movx	@r0,a
      000B06 08               [12] 2810 	inc	r0
      000B07 F2               [24] 2811 	movx	@r0,a
                                   2812 ;	radio/tdm.c:643: set_transmit_channel(trailer.nodeid & 0x7FFF);
      000B08 78r2C            [12] 2813 	mov	r0,#(_trailer + 0x0002)
      000B0A E2               [24] 2814 	movx	a,@r0
      000B0B FC               [12] 2815 	mov	r4,a
      000B0C 08               [12] 2816 	inc	r0
      000B0D E2               [24] 2817 	movx	a,@r0
      000B0E FD               [12] 2818 	mov	r5,a
      000B0F 53 05 7F         [24] 2819 	anl	ar5,#0x7F
      000B12 8C 82            [24] 2820 	mov	dpl,r4
      000B14 C0 07            [24] 2821 	push	ar7
      000B16 C0 06            [24] 2822 	push	ar6
      000B18 12r00r00         [24] 2823 	lcall	_set_transmit_channel
      000B1B D0 06            [24] 2824 	pop	ar6
      000B1D D0 07            [24] 2825 	pop	ar7
                                   2826 ;	radio/tdm.c:644: received_sync = true;
      000B1F D2*05            [12] 2827 	setb	_received_sync
                                   2828 ;	radio/tdm.c:645: continue;
      000B21 02r09rAB         [24] 2829 	ljmp	00259$
      000B24                       2830 00125$:
                                   2831 ;	radio/tdm.c:648: else if (sync_any && !trailer.bonus) {
      000B24 30*06 3F         [24] 2832 	jnb	_sync_any,00126$
      000B27 78r2B            [12] 2833 	mov	r0,#(_trailer + 0x0001)
      000B29 E2               [24] 2834 	movx	a,@r0
      000B2A 20 E6 39         [24] 2835 	jb	acc.6,00126$
                                   2836 ;	radio/tdm.c:649: if(sync_count < 0xFF && nodeTransmitSeq == trailer.nodeid + 1){
      000B2D 78r12            [12] 2837 	mov	r0,#_sync_count
      000B2F E2               [24] 2838 	movx	a,@r0
      000B30 B4 FF 00         [24] 2839 	cjne	a,#0xFF,00521$
      000B33                       2840 00521$:
      000B33 50 1E            [24] 2841 	jnc	00119$
      000B35 74 01            [12] 2842 	mov	a,#0x01
      000B37 25*18            [12] 2843 	add	a,_tdm_serial_loop_sloc0_1_0
      000B39 FC               [12] 2844 	mov	r4,a
      000B3A E4               [12] 2845 	clr	a
      000B3B 35*19            [12] 2846 	addc	a,(_tdm_serial_loop_sloc0_1_0 + 1)
      000B3D FD               [12] 2847 	mov	r5,a
      000B3E 78r01            [12] 2848 	mov	r0,#_nodeTransmitSeq
      000B40 E2               [24] 2849 	movx	a,@r0
      000B41 B5 04 07         [24] 2850 	cjne	a,ar4,00523$
      000B44 08               [12] 2851 	inc	r0
      000B45 E2               [24] 2852 	movx	a,@r0
      000B46 B5 05 02         [24] 2853 	cjne	a,ar5,00523$
      000B49 80 02            [24] 2854 	sjmp	00524$
      000B4B                       2855 00523$:
      000B4B 80 06            [24] 2856 	sjmp	00119$
      000B4D                       2857 00524$:
                                   2858 ;	radio/tdm.c:650: sync_count += 1;
      000B4D 78r12            [12] 2859 	mov	r0,#_sync_count
      000B4F E2               [24] 2860 	movx	a,@r0
      000B50 24 01            [12] 2861 	add	a,#0x01
      000B52 F2               [24] 2862 	movx	@r0,a
      000B53                       2863 00119$:
                                   2864 ;	radio/tdm.c:652: nodeTransmitSeq = trailer.nodeid + 1;
      000B53 78r2C            [12] 2865 	mov	r0,#(_trailer + 0x0002)
      000B55 E2               [24] 2866 	movx	a,@r0
      000B56 FC               [12] 2867 	mov	r4,a
      000B57 08               [12] 2868 	inc	r0
      000B58 E2               [24] 2869 	movx	a,@r0
      000B59 FD               [12] 2870 	mov	r5,a
      000B5A 78r01            [12] 2871 	mov	r0,#_nodeTransmitSeq
      000B5C 74 01            [12] 2872 	mov	a,#0x01
      000B5E 2C               [12] 2873 	add	a,r4
      000B5F F2               [24] 2874 	movx	@r0,a
      000B60 E4               [12] 2875 	clr	a
      000B61 3D               [12] 2876 	addc	a,r5
      000B62 08               [12] 2877 	inc	r0
      000B63 F2               [24] 2878 	movx	@r0,a
                                   2879 ;	radio/tdm.c:653: received_sync = true;
      000B64 D2*05            [12] 2880 	setb	_received_sync
                                   2881 ;	radio/tdm.c:1016: ACTIVITY_LED(LED_OFF);
                                   2882 ;	radio/tdm.c:653: received_sync = true;
      000B66                       2883 00126$:
                                   2884 ;	radio/tdm.c:657: if(trailer.nodeid < MAX_NODE_RSSI_STATS) {
      000B66 78r2C            [12] 2885 	mov	r0,#(_trailer + 0x0002)
      000B68 E2               [24] 2886 	movx	a,@r0
      000B69 FC               [12] 2887 	mov	r4,a
      000B6A 08               [12] 2888 	inc	r0
      000B6B E2               [24] 2889 	movx	a,@r0
      000B6C FD               [12] 2890 	mov	r5,a
      000B6D C3               [12] 2891 	clr	c
      000B6E EC               [12] 2892 	mov	a,r4
      000B6F 94 08            [12] 2893 	subb	a,#0x08
      000B71 ED               [12] 2894 	mov	a,r5
      000B72 94 00            [12] 2895 	subb	a,#0x00
      000B74 50 7C            [24] 2896 	jnc	00128$
                                   2897 ;	radio/tdm.c:658: statistics[trailer.nodeid].average_rssi = (radio_last_rssi() + 7*(uint16_t)statistics[trailer.nodeid].average_rssi)/8;
      000B76 C0 06            [24] 2898 	push	ar6
      000B78 C0 07            [24] 2899 	push	ar7
      000B7A ED               [12] 2900 	mov	a,r5
      000B7B CC               [12] 2901 	xch	a,r4
      000B7C 25 E0            [12] 2902 	add	a,acc
      000B7E CC               [12] 2903 	xch	a,r4
      000B7F 33               [12] 2904 	rlc	a
      000B80 FD               [12] 2905 	mov	r5,a
      000B81 EC               [12] 2906 	mov	a,r4
      000B82 24r00            [12] 2907 	add	a,#_statistics
      000B84 FC               [12] 2908 	mov	r4,a
      000B85 ED               [12] 2909 	mov	a,r5
      000B86 34s00            [12] 2910 	addc	a,#(_statistics >> 8)
      000B88 FD               [12] 2911 	mov	r5,a
      000B89 C0 06            [24] 2912 	push	ar6
      000B8B C0 05            [24] 2913 	push	ar5
      000B8D C0 04            [24] 2914 	push	ar4
      000B8F 12r00r00         [24] 2915 	lcall	_radio_last_rssi
      000B92 AF 82            [24] 2916 	mov	r7,dpl
      000B94 D0 04            [24] 2917 	pop	ar4
      000B96 D0 05            [24] 2918 	pop	ar5
      000B98 D0 06            [24] 2919 	pop	ar6
      000B9A 7E 00            [12] 2920 	mov	r6,#0x00
      000B9C 78r2C            [12] 2921 	mov	r0,#(_trailer + 0x0002)
      000B9E E2               [24] 2922 	movx	a,@r0
      000B9F FA               [12] 2923 	mov	r2,a
      000BA0 08               [12] 2924 	inc	r0
      000BA1 E2               [24] 2925 	movx	a,@r0
      000BA2 CA               [12] 2926 	xch	a,r2
      000BA3 25 E0            [12] 2927 	add	a,acc
      000BA5 CA               [12] 2928 	xch	a,r2
      000BA6 33               [12] 2929 	rlc	a
      000BA7 FB               [12] 2930 	mov	r3,a
      000BA8 EA               [12] 2931 	mov	a,r2
      000BA9 24r00            [12] 2932 	add	a,#_statistics
      000BAB F5 82            [12] 2933 	mov	dpl,a
      000BAD EB               [12] 2934 	mov	a,r3
      000BAE 34s00            [12] 2935 	addc	a,#(_statistics >> 8)
      000BB0 F5 83            [12] 2936 	mov	dph,a
      000BB2 E0               [24] 2937 	movx	a,@dptr
      000BB3 90r00r00         [24] 2938 	mov	dptr,#__mulint_PARM_2
      000BB6 F0               [24] 2939 	movx	@dptr,a
      000BB7 E4               [12] 2940 	clr	a
      000BB8 A3               [24] 2941 	inc	dptr
      000BB9 F0               [24] 2942 	movx	@dptr,a
      000BBA 90 00 07         [24] 2943 	mov	dptr,#0x0007
      000BBD C0 07            [24] 2944 	push	ar7
      000BBF C0 06            [24] 2945 	push	ar6
      000BC1 C0 05            [24] 2946 	push	ar5
      000BC3 C0 04            [24] 2947 	push	ar4
      000BC5 12r00r00         [24] 2948 	lcall	__mulint
      000BC8 AA 82            [24] 2949 	mov	r2,dpl
      000BCA AB 83            [24] 2950 	mov	r3,dph
      000BCC D0 04            [24] 2951 	pop	ar4
      000BCE D0 05            [24] 2952 	pop	ar5
      000BD0 D0 06            [24] 2953 	pop	ar6
      000BD2 D0 07            [24] 2954 	pop	ar7
      000BD4 EA               [12] 2955 	mov	a,r2
      000BD5 2F               [12] 2956 	add	a,r7
      000BD6 FA               [12] 2957 	mov	r2,a
      000BD7 EB               [12] 2958 	mov	a,r3
      000BD8 3E               [12] 2959 	addc	a,r6
      000BD9 C4               [12] 2960 	swap	a
      000BDA 23               [12] 2961 	rl	a
      000BDB CA               [12] 2962 	xch	a,r2
      000BDC C4               [12] 2963 	swap	a
      000BDD 23               [12] 2964 	rl	a
      000BDE 54 1F            [12] 2965 	anl	a,#0x1F
      000BE0 6A               [12] 2966 	xrl	a,r2
      000BE1 CA               [12] 2967 	xch	a,r2
      000BE2 54 1F            [12] 2968 	anl	a,#0x1F
      000BE4 CA               [12] 2969 	xch	a,r2
      000BE5 6A               [12] 2970 	xrl	a,r2
      000BE6 CA               [12] 2971 	xch	a,r2
      000BE7 FB               [12] 2972 	mov	r3,a
      000BE8 8C 82            [24] 2973 	mov	dpl,r4
      000BEA 8D 83            [24] 2974 	mov	dph,r5
      000BEC EA               [12] 2975 	mov	a,r2
      000BED F0               [24] 2976 	movx	@dptr,a
                                   2977 ;	radio/tdm.c:1016: ACTIVITY_LED(LED_OFF);
      000BEE D0 07            [24] 2978 	pop	ar7
      000BF0 D0 06            [24] 2979 	pop	ar6
                                   2980 ;	radio/tdm.c:658: statistics[trailer.nodeid].average_rssi = (radio_last_rssi() + 7*(uint16_t)statistics[trailer.nodeid].average_rssi)/8;
      000BF2                       2981 00128$:
                                   2982 ;	radio/tdm.c:660: statistics_receive_count++;
      000BF2 78r25            [12] 2983 	mov	r0,#_statistics_receive_count
      000BF4 E2               [24] 2984 	movx	a,@r0
      000BF5 24 01            [12] 2985 	add	a,#0x01
      000BF7 F2               [24] 2986 	movx	@r0,a
      000BF8 08               [12] 2987 	inc	r0
      000BF9 E2               [24] 2988 	movx	a,@r0
      000BFA 34 00            [12] 2989 	addc	a,#0x00
      000BFC F2               [24] 2990 	movx	@r0,a
                                   2991 ;	radio/tdm.c:662: if (trailer.window == 0 && len != 0) {
      000BFD 78r2A            [12] 2992 	mov	r0,#_trailer
      000BFF E2               [24] 2993 	movx	a,@r0
      000C00 FC               [12] 2994 	mov	r4,a
      000C01 08               [12] 2995 	inc	r0
      000C02 E2               [24] 2996 	movx	a,@r0
      000C03 54 1F            [12] 2997 	anl	a,#0x1F
      000C05 FD               [12] 2998 	mov	r5,a
      000C06 4C               [12] 2999 	orl	a,r4
      000C07 60 03            [24] 3000 	jz	00526$
      000C09 02r0Cr99         [24] 3001 	ljmp	00146$
      000C0C                       3002 00526$:
      000C0C 78r35            [12] 3003 	mov	r0,#_tdm_serial_loop_len_2_234
      000C0E E2               [24] 3004 	movx	a,@r0
      000C0F 70 03            [24] 3005 	jnz	00527$
      000C11 02r0Cr99         [24] 3006 	ljmp	00146$
      000C14                       3007 00527$:
                                   3008 ;	radio/tdm.c:664: if (len == (sizeof(struct statistics)+sizeof(statistics_transmit_stats)) && trailer.nodeid < MAX_NODE_RSSI_STATS) {
      000C14 78r35            [12] 3009 	mov	r0,#_tdm_serial_loop_len_2_234
      000C16 E2               [24] 3010 	movx	a,@r0
      000C17 B4 04 71         [24] 3011 	cjne	a,#0x04,00132$
      000C1A 78r2C            [12] 3012 	mov	r0,#(_trailer + 0x0002)
      000C1C E2               [24] 3013 	movx	a,@r0
      000C1D FC               [12] 3014 	mov	r4,a
      000C1E 08               [12] 3015 	inc	r0
      000C1F E2               [24] 3016 	movx	a,@r0
      000C20 FD               [12] 3017 	mov	r5,a
      000C21 C3               [12] 3018 	clr	c
      000C22 EC               [12] 3019 	mov	a,r4
      000C23 94 08            [12] 3020 	subb	a,#0x08
      000C25 ED               [12] 3021 	mov	a,r5
      000C26 94 00            [12] 3022 	subb	a,#0x00
      000C28 50 61            [24] 3023 	jnc	00132$
                                   3024 ;	radio/tdm.c:665: len -= sizeof(statistics_transmit_stats);
      000C2A 78r35            [12] 3025 	mov	r0,#_tdm_serial_loop_len_2_234
      000C2C E2               [24] 3026 	movx	a,@r0
      000C2D 14               [12] 3027 	dec	a
      000C2E 14               [12] 3028 	dec	a
      000C2F F2               [24] 3029 	movx	@r0,a
                                   3030 ;	radio/tdm.c:667: if(((uint16_t*)(pbuf+len))[0] == nodeId)
      000C30 78r35            [12] 3031 	mov	r0,#_tdm_serial_loop_len_2_234
      000C32 E2               [24] 3032 	movx	a,@r0
      000C33 24r00            [12] 3033 	add	a,#_pbuf
      000C35 FA               [12] 3034 	mov	r2,a
      000C36 E4               [12] 3035 	clr	a
      000C37 34s00            [12] 3036 	addc	a,#(_pbuf >> 8)
      000C39 FB               [12] 3037 	mov	r3,a
      000C3A 8A 82            [24] 3038 	mov	dpl,r2
      000C3C 8B 83            [24] 3039 	mov	dph,r3
      000C3E E0               [24] 3040 	movx	a,@dptr
      000C3F FA               [12] 3041 	mov	r2,a
      000C40 A3               [24] 3042 	inc	dptr
      000C41 E0               [24] 3043 	movx	a,@dptr
      000C42 FB               [12] 3044 	mov	r3,a
      000C43 78r00            [12] 3045 	mov	r0,#_nodeId
      000C45 E2               [24] 3046 	movx	a,@r0
      000C46 B5 02 07         [24] 3047 	cjne	a,ar2,00531$
      000C49 08               [12] 3048 	inc	r0
      000C4A E2               [24] 3049 	movx	a,@r0
      000C4B B5 03 02         [24] 3050 	cjne	a,ar3,00531$
      000C4E 80 02            [24] 3051 	sjmp	00532$
      000C50                       3052 00531$:
      000C50 80 39            [24] 3053 	sjmp	00132$
      000C52                       3054 00532$:
                                   3055 ;	radio/tdm.c:669: memcpy(remote_statistics +trailer.nodeid, pbuf, len);
      000C52 ED               [12] 3056 	mov	a,r5
      000C53 CC               [12] 3057 	xch	a,r4
      000C54 25 E0            [12] 3058 	add	a,acc
      000C56 CC               [12] 3059 	xch	a,r4
      000C57 33               [12] 3060 	rlc	a
      000C58 FD               [12] 3061 	mov	r5,a
      000C59 EC               [12] 3062 	mov	a,r4
      000C5A 24r00            [12] 3063 	add	a,#_remote_statistics
      000C5C FC               [12] 3064 	mov	r4,a
      000C5D ED               [12] 3065 	mov	a,r5
      000C5E 34s00            [12] 3066 	addc	a,#(_remote_statistics >> 8)
      000C60 FD               [12] 3067 	mov	r5,a
      000C61 7B 00            [12] 3068 	mov	r3,#0x00
      000C63 90r00r00         [24] 3069 	mov	dptr,#_memcpy_PARM_2
      000C66 74r00            [12] 3070 	mov	a,#_pbuf
      000C68 F0               [24] 3071 	movx	@dptr,a
      000C69 74s00            [12] 3072 	mov	a,#(_pbuf >> 8)
      000C6B A3               [24] 3073 	inc	dptr
      000C6C F0               [24] 3074 	movx	@dptr,a
      000C6D E4               [12] 3075 	clr	a
      000C6E A3               [24] 3076 	inc	dptr
      000C6F F0               [24] 3077 	movx	@dptr,a
      000C70 78r35            [12] 3078 	mov	r0,#_tdm_serial_loop_len_2_234
      000C72 90r00r00         [24] 3079 	mov	dptr,#_memcpy_PARM_3
      000C75 E2               [24] 3080 	movx	a,@r0
      000C76 F0               [24] 3081 	movx	@dptr,a
      000C77 E4               [12] 3082 	clr	a
      000C78 A3               [24] 3083 	inc	dptr
      000C79 F0               [24] 3084 	movx	@dptr,a
      000C7A 8C 82            [24] 3085 	mov	dpl,r4
      000C7C 8D 83            [24] 3086 	mov	dph,r5
      000C7E 8B F0            [24] 3087 	mov	b,r3
      000C80 C0 07            [24] 3088 	push	ar7
      000C82 C0 06            [24] 3089 	push	ar6
      000C84 12r00r00         [24] 3090 	lcall	_memcpy
      000C87 D0 06            [24] 3091 	pop	ar6
      000C89 D0 07            [24] 3092 	pop	ar7
      000C8B                       3093 00132$:
                                   3094 ;	radio/tdm.c:674: statistics_receive_count--;
      000C8B 78r25            [12] 3095 	mov	r0,#_statistics_receive_count
      000C8D E2               [24] 3096 	movx	a,@r0
      000C8E 24 FF            [12] 3097 	add	a,#0xFF
      000C90 F2               [24] 3098 	movx	@r0,a
      000C91 08               [12] 3099 	inc	r0
      000C92 E2               [24] 3100 	movx	a,@r0
      000C93 34 FF            [12] 3101 	addc	a,#0xFF
      000C95 F2               [24] 3102 	movx	@r0,a
      000C96 02r09rAB         [24] 3103 	ljmp	00259$
      000C99                       3104 00146$:
                                   3105 ;	radio/tdm.c:675: } else if (trailer.window != 0) {
      000C99 78r2A            [12] 3106 	mov	r0,#_trailer
      000C9B E2               [24] 3107 	movx	a,@r0
      000C9C FC               [12] 3108 	mov	r4,a
      000C9D 08               [12] 3109 	inc	r0
      000C9E E2               [24] 3110 	movx	a,@r0
      000C9F 54 1F            [12] 3111 	anl	a,#0x1F
      000CA1 FD               [12] 3112 	mov	r5,a
      000CA2 4C               [12] 3113 	orl	a,r4
      000CA3 70 03            [24] 3114 	jnz	00533$
      000CA5 02r09rAB         [24] 3115 	ljmp	00259$
      000CA8                       3116 00533$:
                                   3117 ;	radio/tdm.c:676: tdm_state_remaining = trailer.window;
      000CA8 78r2A            [12] 3118 	mov	r0,#_trailer
      000CAA E2               [24] 3119 	movx	a,@r0
      000CAB FC               [12] 3120 	mov	r4,a
      000CAC 08               [12] 3121 	inc	r0
      000CAD E2               [24] 3122 	movx	a,@r0
      000CAE 54 1F            [12] 3123 	anl	a,#0x1F
      000CB0 FD               [12] 3124 	mov	r5,a
      000CB1 78r07            [12] 3125 	mov	r0,#_tdm_state_remaining
      000CB3 EC               [12] 3126 	mov	a,r4
      000CB4 F2               [24] 3127 	movx	@r0,a
      000CB5 08               [12] 3128 	inc	r0
      000CB6 ED               [12] 3129 	mov	a,r5
      000CB7 F2               [24] 3130 	movx	@r0,a
                                   3131 ;	radio/tdm.c:681: tdm_yield_update(YIELD_SET, len==0);
      000CB8 78r35            [12] 3132 	mov	r0,#_tdm_serial_loop_len_2_234
      000CBA 79r32            [12] 3133 	mov	r1,#_tdm_yield_update_PARM_2
      000CBC E2               [24] 3134 	movx	a,@r0
      000CBD 70 03            [24] 3135 	jnz	00534$
      000CBF 04               [12] 3136 	inc	a
      000CC0 80 01            [24] 3137 	sjmp	00535$
      000CC2                       3138 00534$:
      000CC2 E4               [12] 3139 	clr	a
      000CC3                       3140 00535$:
      000CC3 F3               [24] 3141 	movx	@r1,a
      000CC4 75 82 01         [24] 3142 	mov	dpl,#0x01
      000CC7 12r04rB6         [24] 3143 	lcall	_tdm_yield_update
                                   3144 ;	radio/tdm.c:683: last_t = tnow;
      000CCA 78r36            [12] 3145 	mov	r0,#_tdm_serial_loop_tnow_2_234
      000CCC E2               [24] 3146 	movx	a,@r0
      000CCD FE               [12] 3147 	mov	r6,a
      000CCE 08               [12] 3148 	inc	r0
      000CCF E2               [24] 3149 	movx	a,@r0
      000CD0 FF               [12] 3150 	mov	r7,a
                                   3151 ;	radio/tdm.c:685: if (trailer.command == 1) {
      000CD1 78r2B            [12] 3152 	mov	r0,#(_trailer + 0x0001)
      000CD3 E2               [24] 3153 	movx	a,@r0
      000CD4 C4               [12] 3154 	swap	a
      000CD5 03               [12] 3155 	rr	a
      000CD6 54 01            [12] 3156 	anl	a,#0x01
      000CD8 FD               [12] 3157 	mov	r5,a
      000CD9 BD 01 22         [24] 3158 	cjne	r5,#0x01,00141$
                                   3159 ;	radio/tdm.c:687: if(len > 1)
      000CDC 78r35            [12] 3160 	mov	r0,#_tdm_serial_loop_len_2_234
      000CDE C3               [12] 3161 	clr	c
      000CDF E2               [24] 3162 	movx	a,@r0
      000CE0 F5 F0            [12] 3163 	mov	b,a
      000CE2 74 01            [12] 3164 	mov	a,#0x01
      000CE4 95 F0            [12] 3165 	subb	a,b
      000CE6 40 03            [24] 3166 	jc	00538$
      000CE8 02r09rAB         [24] 3167 	ljmp	00259$
      000CEB                       3168 00538$:
                                   3169 ;	radio/tdm.c:689: handle_at_command(len);
      000CEB 78r35            [12] 3170 	mov	r0,#_tdm_serial_loop_len_2_234
      000CED E2               [24] 3171 	movx	a,@r0
      000CEE F5 82            [12] 3172 	mov	dpl,a
      000CF0 C0 07            [24] 3173 	push	ar7
      000CF2 C0 06            [24] 3174 	push	ar6
      000CF4 12r08rF5         [24] 3175 	lcall	_handle_at_command
      000CF7 D0 06            [24] 3176 	pop	ar6
      000CF9 D0 07            [24] 3177 	pop	ar7
      000CFB 02r09rAB         [24] 3178 	ljmp	00259$
      000CFE                       3179 00141$:
                                   3180 ;	radio/tdm.c:691: } else if (len != 0 && 
      000CFE 78r35            [12] 3181 	mov	r0,#_tdm_serial_loop_len_2_234
      000D00 E2               [24] 3182 	movx	a,@r0
      000D01 70 03            [24] 3183 	jnz	00539$
      000D03 02r09rAB         [24] 3184 	ljmp	00259$
      000D06                       3185 00539$:
                                   3186 ;	radio/tdm.c:692: !packet_is_duplicate(len, pbuf, trailer.resend) &&
      000D06 78r2B            [12] 3187 	mov	r0,#(_trailer + 0x0001)
      000D08 E2               [24] 3188 	movx	a,@r0
      000D09 23               [12] 3189 	rl	a
      000D0A 54 01            [12] 3190 	anl	a,#0x01
      000D0C 24 FF            [12] 3191 	add	a,#0xff
      000D0E 92*00            [24] 3192 	mov	_packet_is_duplicate_PARM_3,c
      000D10 78r00            [12] 3193 	mov	r0,#_packet_is_duplicate_PARM_2
      000D12 74r00            [12] 3194 	mov	a,#_pbuf
      000D14 F2               [24] 3195 	movx	@r0,a
      000D15 08               [12] 3196 	inc	r0
      000D16 74s00            [12] 3197 	mov	a,#(_pbuf >> 8)
      000D18 F2               [24] 3198 	movx	@r0,a
      000D19 78r35            [12] 3199 	mov	r0,#_tdm_serial_loop_len_2_234
      000D1B E2               [24] 3200 	movx	a,@r0
      000D1C F5 82            [12] 3201 	mov	dpl,a
      000D1E C0 07            [24] 3202 	push	ar7
      000D20 C0 06            [24] 3203 	push	ar6
      000D22 12r00r00         [24] 3204 	lcall	_packet_is_duplicate
      000D25 D0 06            [24] 3205 	pop	ar6
      000D27 D0 07            [24] 3206 	pop	ar7
      000D29 50 03            [24] 3207 	jnc	00540$
      000D2B 02r09rAB         [24] 3208 	ljmp	00259$
      000D2E                       3209 00540$:
                                   3210 ;	radio/tdm.c:693: !at_mode_active) {
      000D2E 30*00 03         [24] 3211 	jnb	_at_mode_active,00541$
      000D31 02r09rAB         [24] 3212 	ljmp	00259$
      000D34                       3213 00541$:
                                   3214 ;	radio/tdm.c:695: ACTIVITY_LED(LED_ON);
      000D34 C2 96            [12] 3215 	clr	_LED_RED
                                   3216 ;	radio/tdm.c:696: serial_write_buf(pbuf, len);
      000D36 78r35            [12] 3217 	mov	r0,#_tdm_serial_loop_len_2_234
      000D38 79r00            [12] 3218 	mov	r1,#_serial_write_buf_PARM_2
      000D3A E2               [24] 3219 	movx	a,@r0
      000D3B F3               [24] 3220 	movx	@r1,a
      000D3C 90r00r00         [24] 3221 	mov	dptr,#_pbuf
      000D3F C0 07            [24] 3222 	push	ar7
      000D41 C0 06            [24] 3223 	push	ar6
      000D43 12r00r00         [24] 3224 	lcall	_serial_write_buf
      000D46 D0 06            [24] 3225 	pop	ar6
      000D48 D0 07            [24] 3226 	pop	ar7
                                   3227 ;	radio/tdm.c:697: ACTIVITY_LED(LED_OFF);
      000D4A D2 96            [12] 3228 	setb	_LED_RED
                                   3229 ;	radio/tdm.c:700: continue;
      000D4C 02r09rAB         [24] 3230 	ljmp	00259$
      000D4F                       3231 00150$:
                                   3232 ;	radio/tdm.c:706: tnow = timer2_tick();
      000D4F C0 07            [24] 3233 	push	ar7
      000D51 C0 06            [24] 3234 	push	ar6
      000D53 12r00r00         [24] 3235 	lcall	_timer2_tick
      000D56 78r36            [12] 3236 	mov	r0,#_tdm_serial_loop_tnow_2_234
      000D58 E5 82            [12] 3237 	mov	a,dpl
      000D5A F2               [24] 3238 	movx	@r0,a
      000D5B 08               [12] 3239 	inc	r0
      000D5C E5 83            [12] 3240 	mov	a,dph
      000D5E F2               [24] 3241 	movx	@r0,a
      000D5F D0 06            [24] 3242 	pop	ar6
      000D61 D0 07            [24] 3243 	pop	ar7
                                   3244 ;	radio/tdm.c:707: tdelta = tnow - last_t;
      000D63 78r36            [12] 3245 	mov	r0,#_tdm_serial_loop_tnow_2_234
      000D65 E2               [24] 3246 	movx	a,@r0
      000D66 C3               [12] 3247 	clr	c
      000D67 9E               [12] 3248 	subb	a,r6
      000D68 FC               [12] 3249 	mov	r4,a
      000D69 08               [12] 3250 	inc	r0
      000D6A E2               [24] 3251 	movx	a,@r0
      000D6B 9F               [12] 3252 	subb	a,r7
      000D6C FD               [12] 3253 	mov	r5,a
                                   3254 ;	radio/tdm.c:708: tdm_state_update(tdelta);
      000D6D 8C 82            [24] 3255 	mov	dpl,r4
      000D6F 8D 83            [24] 3256 	mov	dph,r5
      000D71 C0 05            [24] 3257 	push	ar5
      000D73 C0 04            [24] 3258 	push	ar4
      000D75 12r01r87         [24] 3259 	lcall	_tdm_state_update
      000D78 D0 04            [24] 3260 	pop	ar4
      000D7A D0 05            [24] 3261 	pop	ar5
                                   3262 ;	radio/tdm.c:709: last_t = tnow;
      000D7C 78r36            [12] 3263 	mov	r0,#_tdm_serial_loop_tnow_2_234
      000D7E E2               [24] 3264 	movx	a,@r0
      000D7F FE               [12] 3265 	mov	r6,a
      000D80 08               [12] 3266 	inc	r0
      000D81 E2               [24] 3267 	movx	a,@r0
      000D82 FF               [12] 3268 	mov	r7,a
                                   3269 ;	radio/tdm.c:712: if( (tdm_state_remaining > tx_window_width-silence_period) ||
      000D83 78r09            [12] 3270 	mov	r0,#_tx_window_width
      000D85 79r0E            [12] 3271 	mov	r1,#_silence_period
      000D87 E3               [24] 3272 	movx	a,@r1
      000D88 F5 F0            [12] 3273 	mov	b,a
      000D8A C3               [12] 3274 	clr	c
      000D8B E2               [24] 3275 	movx	a,@r0
      000D8C 95 F0            [12] 3276 	subb	a,b
      000D8E FA               [12] 3277 	mov	r2,a
      000D8F 09               [12] 3278 	inc	r1
      000D90 E3               [24] 3279 	movx	a,@r1
      000D91 F5 F0            [12] 3280 	mov	b,a
      000D93 08               [12] 3281 	inc	r0
      000D94 E2               [24] 3282 	movx	a,@r0
      000D95 95 F0            [12] 3283 	subb	a,b
      000D97 FB               [12] 3284 	mov	r3,a
      000D98 78r07            [12] 3285 	mov	r0,#_tdm_state_remaining
      000D9A C3               [12] 3286 	clr	c
      000D9B E2               [24] 3287 	movx	a,@r0
      000D9C F5 F0            [12] 3288 	mov	b,a
      000D9E EA               [12] 3289 	mov	a,r2
      000D9F 95 F0            [12] 3290 	subb	a,b
      000DA1 08               [12] 3291 	inc	r0
      000DA2 E2               [24] 3292 	movx	a,@r0
      000DA3 F5 F0            [12] 3293 	mov	b,a
      000DA5 EB               [12] 3294 	mov	a,r3
      000DA6 95 F0            [12] 3295 	subb	a,b
      000DA8 50 03            [24] 3296 	jnc	00542$
      000DAA 02r09rAB         [24] 3297 	ljmp	00259$
      000DAD                       3298 00542$:
                                   3299 ;	radio/tdm.c:713: (tdm_state == TDM_SYNC && tdm_state_remaining > tx_sync_width-silence_period))
      000DAD 78r00            [12] 3300 	mov	r0,#_tdm_state
      000DAF E2               [24] 3301 	movx	a,@r0
      000DB0 B4 02 2A         [24] 3302 	cjne	a,#0x02,00152$
      000DB3 78r0B            [12] 3303 	mov	r0,#_tx_sync_width
      000DB5 79r0E            [12] 3304 	mov	r1,#_silence_period
      000DB7 E3               [24] 3305 	movx	a,@r1
      000DB8 F5 F0            [12] 3306 	mov	b,a
      000DBA C3               [12] 3307 	clr	c
      000DBB E2               [24] 3308 	movx	a,@r0
      000DBC 95 F0            [12] 3309 	subb	a,b
      000DBE FA               [12] 3310 	mov	r2,a
      000DBF 09               [12] 3311 	inc	r1
      000DC0 E3               [24] 3312 	movx	a,@r1
      000DC1 F5 F0            [12] 3313 	mov	b,a
      000DC3 08               [12] 3314 	inc	r0
      000DC4 E2               [24] 3315 	movx	a,@r0
      000DC5 95 F0            [12] 3316 	subb	a,b
      000DC7 FB               [12] 3317 	mov	r3,a
      000DC8 78r07            [12] 3318 	mov	r0,#_tdm_state_remaining
      000DCA C3               [12] 3319 	clr	c
      000DCB E2               [24] 3320 	movx	a,@r0
      000DCC F5 F0            [12] 3321 	mov	b,a
      000DCE EA               [12] 3322 	mov	a,r2
      000DCF 95 F0            [12] 3323 	subb	a,b
      000DD1 08               [12] 3324 	inc	r0
      000DD2 E2               [24] 3325 	movx	a,@r0
      000DD3 F5 F0            [12] 3326 	mov	b,a
      000DD5 EB               [12] 3327 	mov	a,r3
      000DD6 95 F0            [12] 3328 	subb	a,b
      000DD8 50 03            [24] 3329 	jnc	00545$
      000DDA 02r09rAB         [24] 3330 	ljmp	00259$
      000DDD                       3331 00545$:
                                   3332 ;	radio/tdm.c:715: continue;
      000DDD                       3333 00152$:
                                   3334 ;	radio/tdm.c:719: if (tnow - last_link_update > 32768) {
      000DDD C0 06            [24] 3335 	push	ar6
      000DDF C0 07            [24] 3336 	push	ar7
      000DE1 78r36            [12] 3337 	mov	r0,#_tdm_serial_loop_tnow_2_234
      000DE3 79r33            [12] 3338 	mov	r1,#_tdm_serial_loop_last_link_update_1_233
      000DE5 E3               [24] 3339 	movx	a,@r1
      000DE6 F5 F0            [12] 3340 	mov	b,a
      000DE8 C3               [12] 3341 	clr	c
      000DE9 E2               [24] 3342 	movx	a,@r0
      000DEA 95 F0            [12] 3343 	subb	a,b
      000DEC FA               [12] 3344 	mov	r2,a
      000DED 09               [12] 3345 	inc	r1
      000DEE E3               [24] 3346 	movx	a,@r1
      000DEF F5 F0            [12] 3347 	mov	b,a
      000DF1 08               [12] 3348 	inc	r0
      000DF2 E2               [24] 3349 	movx	a,@r0
      000DF3 95 F0            [12] 3350 	subb	a,b
      000DF5 FB               [12] 3351 	mov	r3,a
      000DF6 7E 00            [12] 3352 	mov	r6,#0x00
      000DF8 7F 00            [12] 3353 	mov	r7,#0x00
      000DFA C3               [12] 3354 	clr	c
      000DFB E4               [12] 3355 	clr	a
      000DFC 9A               [12] 3356 	subb	a,r2
      000DFD 74 80            [12] 3357 	mov	a,#0x80
      000DFF 9B               [12] 3358 	subb	a,r3
      000E00 E4               [12] 3359 	clr	a
      000E01 9E               [12] 3360 	subb	a,r6
      000E02 74 80            [12] 3361 	mov	a,#(0x00 ^ 0x80)
      000E04 8F F0            [24] 3362 	mov	b,r7
      000E06 63 F0 80         [24] 3363 	xrl	b,#0x80
      000E09 95 F0            [12] 3364 	subb	a,b
      000E0B D0 07            [24] 3365 	pop	ar7
      000E0D D0 06            [24] 3366 	pop	ar6
      000E0F 50 1D            [24] 3367 	jnc	00156$
                                   3368 ;	radio/tdm.c:720: link_update();
      000E11 C0 07            [24] 3369 	push	ar7
      000E13 C0 06            [24] 3370 	push	ar6
      000E15 C0 05            [24] 3371 	push	ar5
      000E17 C0 04            [24] 3372 	push	ar4
      000E19 12r07rDD         [24] 3373 	lcall	_link_update
      000E1C D0 04            [24] 3374 	pop	ar4
      000E1E D0 05            [24] 3375 	pop	ar5
      000E20 D0 06            [24] 3376 	pop	ar6
      000E22 D0 07            [24] 3377 	pop	ar7
                                   3378 ;	radio/tdm.c:721: last_link_update = tnow;
      000E24 78r36            [12] 3379 	mov	r0,#_tdm_serial_loop_tnow_2_234
      000E26 79r33            [12] 3380 	mov	r1,#_tdm_serial_loop_last_link_update_1_233
      000E28 E2               [24] 3381 	movx	a,@r0
      000E29 F3               [24] 3382 	movx	@r1,a
      000E2A 08               [12] 3383 	inc	r0
      000E2B E2               [24] 3384 	movx	a,@r0
      000E2C 09               [12] 3385 	inc	r1
      000E2D F3               [24] 3386 	movx	@r1,a
      000E2E                       3387 00156$:
                                   3388 ;	radio/tdm.c:724: if (lbt_rssi != 0) {
      000E2E 78r1D            [12] 3389 	mov	r0,#_lbt_rssi
      000E30 E2               [24] 3390 	movx	a,@r0
      000E31 70 03            [24] 3391 	jnz	00547$
      000E33 02r0ErC0         [24] 3392 	ljmp	00165$
      000E36                       3393 00547$:
                                   3394 ;	radio/tdm.c:726: if (radio_current_rssi() < lbt_rssi) {
      000E36 C0 07            [24] 3395 	push	ar7
      000E38 C0 06            [24] 3396 	push	ar6
      000E3A C0 05            [24] 3397 	push	ar5
      000E3C C0 04            [24] 3398 	push	ar4
      000E3E 12r00r00         [24] 3399 	lcall	_radio_current_rssi
      000E41 AB 82            [24] 3400 	mov	r3,dpl
      000E43 D0 04            [24] 3401 	pop	ar4
      000E45 D0 05            [24] 3402 	pop	ar5
      000E47 D0 06            [24] 3403 	pop	ar6
      000E49 D0 07            [24] 3404 	pop	ar7
      000E4B 78r1D            [12] 3405 	mov	r0,#_lbt_rssi
      000E4D C3               [12] 3406 	clr	c
      000E4E E2               [24] 3407 	movx	a,@r0
      000E4F F5 F0            [12] 3408 	mov	b,a
      000E51 EB               [12] 3409 	mov	a,r3
      000E52 95 F0            [12] 3410 	subb	a,b
      000E54 50 0B            [24] 3411 	jnc	00160$
                                   3412 ;	radio/tdm.c:727: lbt_listen_time += tdelta;
      000E56 78r1E            [12] 3413 	mov	r0,#_lbt_listen_time
      000E58 E2               [24] 3414 	movx	a,@r0
      000E59 2C               [12] 3415 	add	a,r4
      000E5A F2               [24] 3416 	movx	@r0,a
      000E5B 08               [12] 3417 	inc	r0
      000E5C E2               [24] 3418 	movx	a,@r0
      000E5D 3D               [12] 3419 	addc	a,r5
      000E5E F2               [24] 3420 	movx	@r0,a
      000E5F 80 3E            [24] 3421 	sjmp	00161$
      000E61                       3422 00160$:
                                   3423 ;	radio/tdm.c:729: lbt_listen_time = 0;
      000E61 78r1E            [12] 3424 	mov	r0,#_lbt_listen_time
      000E63 E4               [12] 3425 	clr	a
      000E64 F2               [24] 3426 	movx	@r0,a
      000E65 08               [12] 3427 	inc	r0
      000E66 F2               [24] 3428 	movx	@r0,a
                                   3429 ;	radio/tdm.c:730: if (lbt_rand == 0) {
      000E67 78r22            [12] 3430 	mov	r0,#_lbt_rand
      000E69 E2               [24] 3431 	movx	a,@r0
      000E6A F5 F0            [12] 3432 	mov	b,a
      000E6C 08               [12] 3433 	inc	r0
      000E6D E2               [24] 3434 	movx	a,@r0
      000E6E 45 F0            [12] 3435 	orl	a,b
      000E70 70 2D            [24] 3436 	jnz	00161$
                                   3437 ;	radio/tdm.c:731: lbt_rand = ((uint16_t)rand()) % lbt_min_time;
      000E72 C0 07            [24] 3438 	push	ar7
      000E74 C0 06            [24] 3439 	push	ar6
      000E76 12r00r00         [24] 3440 	lcall	_rand
      000E79 AC 82            [24] 3441 	mov	r4,dpl
      000E7B AD 83            [24] 3442 	mov	r5,dph
      000E7D 78r20            [12] 3443 	mov	r0,#_lbt_min_time
      000E7F 90r00r00         [24] 3444 	mov	dptr,#__moduint_PARM_2
      000E82 E2               [24] 3445 	movx	a,@r0
      000E83 F0               [24] 3446 	movx	@dptr,a
      000E84 08               [12] 3447 	inc	r0
      000E85 E2               [24] 3448 	movx	a,@r0
      000E86 A3               [24] 3449 	inc	dptr
      000E87 F0               [24] 3450 	movx	@dptr,a
      000E88 8C 82            [24] 3451 	mov	dpl,r4
      000E8A 8D 83            [24] 3452 	mov	dph,r5
      000E8C 12r00r00         [24] 3453 	lcall	__moduint
      000E8F E5 82            [12] 3454 	mov	a,dpl
      000E91 85 83 F0         [24] 3455 	mov	b,dph
      000E94 D0 06            [24] 3456 	pop	ar6
      000E96 D0 07            [24] 3457 	pop	ar7
      000E98 78r22            [12] 3458 	mov	r0,#_lbt_rand
      000E9A F2               [24] 3459 	movx	@r0,a
      000E9B 08               [12] 3460 	inc	r0
      000E9C E5 F0            [12] 3461 	mov	a,b
      000E9E F2               [24] 3462 	movx	@r0,a
      000E9F                       3463 00161$:
                                   3464 ;	radio/tdm.c:734: if (lbt_listen_time < lbt_min_time + lbt_rand) {
      000E9F 78r20            [12] 3465 	mov	r0,#_lbt_min_time
      000EA1 79r22            [12] 3466 	mov	r1,#_lbt_rand
      000EA3 E3               [24] 3467 	movx	a,@r1
      000EA4 C5 F0            [12] 3468 	xch	a,b
      000EA6 E2               [24] 3469 	movx	a,@r0
      000EA7 25 F0            [12] 3470 	add	a,b
      000EA9 FC               [12] 3471 	mov	r4,a
      000EAA 09               [12] 3472 	inc	r1
      000EAB E3               [24] 3473 	movx	a,@r1
      000EAC C5 F0            [12] 3474 	xch	a,b
      000EAE 08               [12] 3475 	inc	r0
      000EAF E2               [24] 3476 	movx	a,@r0
      000EB0 35 F0            [12] 3477 	addc	a,b
      000EB2 FD               [12] 3478 	mov	r5,a
      000EB3 78r1E            [12] 3479 	mov	r0,#_lbt_listen_time
      000EB5 C3               [12] 3480 	clr	c
      000EB6 E2               [24] 3481 	movx	a,@r0
      000EB7 9C               [12] 3482 	subb	a,r4
      000EB8 08               [12] 3483 	inc	r0
      000EB9 E2               [24] 3484 	movx	a,@r0
      000EBA 9D               [12] 3485 	subb	a,r5
      000EBB 50 03            [24] 3486 	jnc	00550$
      000EBD 02r09rAB         [24] 3487 	ljmp	00259$
      000EC0                       3488 00550$:
                                   3489 ;	radio/tdm.c:736: continue;
      000EC0                       3490 00165$:
                                   3491 ;	radio/tdm.c:744: if (tdm_yield_update(YIELD_GET, YIELD_NO_DATA) == YIELD_RECEIVE) {
      000EC0 78r32            [12] 3492 	mov	r0,#_tdm_yield_update_PARM_2
      000EC2 E4               [12] 3493 	clr	a
      000EC3 F2               [24] 3494 	movx	@r0,a
      000EC4 75 82 00         [24] 3495 	mov	dpl,#0x00
      000EC7 C0 07            [24] 3496 	push	ar7
      000EC9 C0 06            [24] 3497 	push	ar6
      000ECB 12r04rB6         [24] 3498 	lcall	_tdm_yield_update
      000ECE E5 82            [12] 3499 	mov	a,dpl
      000ED0 D0 06            [24] 3500 	pop	ar6
      000ED2 D0 07            [24] 3501 	pop	ar7
      000ED4 70 03            [24] 3502 	jnz	00551$
      000ED6 02r09rAB         [24] 3503 	ljmp	00259$
      000ED9                       3504 00551$:
                                   3505 ;	radio/tdm.c:765: if (transmit_wait != 0) {
      000ED9 78r17            [12] 3506 	mov	r0,#_transmit_wait
      000EDB E2               [24] 3507 	movx	a,@r0
      000EDC F5 F0            [12] 3508 	mov	b,a
      000EDE 08               [12] 3509 	inc	r0
      000EDF E2               [24] 3510 	movx	a,@r0
      000EE0 45 F0            [12] 3511 	orl	a,b
      000EE2 60 03            [24] 3512 	jz	00552$
      000EE4 02r09rAB         [24] 3513 	ljmp	00259$
      000EE7                       3514 00552$:
                                   3515 ;	radio/tdm.c:770: if (radio_preamble_detected() ||
      000EE7 C0 07            [24] 3516 	push	ar7
      000EE9 C0 06            [24] 3517 	push	ar6
      000EEB 12r00r00         [24] 3518 	lcall	_radio_preamble_detected
      000EEE D0 06            [24] 3519 	pop	ar6
      000EF0 D0 07            [24] 3520 	pop	ar7
      000EF2 40 0D            [24] 3521 	jc	00172$
                                   3522 ;	radio/tdm.c:771: radio_receive_in_progress()) {
      000EF4 C0 07            [24] 3523 	push	ar7
      000EF6 C0 06            [24] 3524 	push	ar6
      000EF8 12r00r00         [24] 3525 	lcall	_radio_receive_in_progress
      000EFB D0 06            [24] 3526 	pop	ar6
      000EFD D0 07            [24] 3527 	pop	ar7
      000EFF 50 23            [24] 3528 	jnc	00173$
      000F01                       3529 00172$:
                                   3530 ;	radio/tdm.c:774: transmit_wait = packet_latency;
      000F01 78r13            [12] 3531 	mov	r0,#_packet_latency
      000F03 E2               [24] 3532 	movx	a,@r0
      000F04 FC               [12] 3533 	mov	r4,a
      000F05 08               [12] 3534 	inc	r0
      000F06 E2               [24] 3535 	movx	a,@r0
      000F07 FD               [12] 3536 	mov	r5,a
      000F08 78r17            [12] 3537 	mov	r0,#_transmit_wait
      000F0A EC               [12] 3538 	mov	a,r4
      000F0B F2               [24] 3539 	movx	@r0,a
      000F0C 08               [12] 3540 	inc	r0
      000F0D ED               [12] 3541 	mov	a,r5
      000F0E F2               [24] 3542 	movx	@r0,a
                                   3543 ;	radio/tdm.c:780: if(tdm_state == TDM_TRANSMIT){
      000F0F 78r00            [12] 3544 	mov	r0,#_tdm_state
      000F11 E2               [24] 3545 	movx	a,@r0
      000F12 60 03            [24] 3546 	jz	00555$
      000F14 02r09rAB         [24] 3547 	ljmp	00259$
      000F17                       3548 00555$:
                                   3549 ;	radio/tdm.c:781: received_packet = true;
      000F17 D2*01            [12] 3550 	setb	_received_packet
                                   3551 ;	radio/tdm.c:782: lastTransmitWindow = 0x8000;
      000F19 78r10            [12] 3552 	mov	r0,#_lastTransmitWindow
      000F1B E4               [12] 3553 	clr	a
      000F1C F2               [24] 3554 	movx	@r0,a
      000F1D 08               [12] 3555 	inc	r0
      000F1E 74 80            [12] 3556 	mov	a,#0x80
      000F20 F2               [24] 3557 	movx	@r0,a
                                   3558 ;	radio/tdm.c:789: continue;
      000F21 02r09rAB         [24] 3559 	ljmp	00259$
      000F24                       3560 00173$:
                                   3561 ;	radio/tdm.c:798: if (nodeId != BASE_NODEID && sync_count < 20) {
      000F24 78r00            [12] 3562 	mov	r0,#_nodeId
      000F26 E2               [24] 3563 	movx	a,@r0
      000F27 F5 F0            [12] 3564 	mov	b,a
      000F29 08               [12] 3565 	inc	r0
      000F2A E2               [24] 3566 	movx	a,@r0
      000F2B 45 F0            [12] 3567 	orl	a,b
      000F2D 60 0B            [24] 3568 	jz	00176$
      000F2F 78r12            [12] 3569 	mov	r0,#_sync_count
      000F31 E2               [24] 3570 	movx	a,@r0
      000F32 B4 14 00         [24] 3571 	cjne	a,#0x14,00557$
      000F35                       3572 00557$:
      000F35 50 03            [24] 3573 	jnc	00558$
      000F37 02r09rAB         [24] 3574 	ljmp	00259$
      000F3A                       3575 00558$:
                                   3576 ;	radio/tdm.c:799: continue;
      000F3A                       3577 00176$:
                                   3578 ;	radio/tdm.c:805: statistics[nodeId].average_noise = (radio_current_rssi() + 3*(uint16_t)statistics[nodeId].average_noise)/4;
      000F3A C0 06            [24] 3579 	push	ar6
      000F3C C0 07            [24] 3580 	push	ar7
      000F3E 78r00            [12] 3581 	mov	r0,#_nodeId
      000F40 E2               [24] 3582 	movx	a,@r0
      000F41 FC               [12] 3583 	mov	r4,a
      000F42 08               [12] 3584 	inc	r0
      000F43 E2               [24] 3585 	movx	a,@r0
      000F44 CC               [12] 3586 	xch	a,r4
      000F45 25 E0            [12] 3587 	add	a,acc
      000F47 CC               [12] 3588 	xch	a,r4
      000F48 33               [12] 3589 	rlc	a
      000F49 FD               [12] 3590 	mov	r5,a
      000F4A EC               [12] 3591 	mov	a,r4
      000F4B 24r00            [12] 3592 	add	a,#_statistics
      000F4D FC               [12] 3593 	mov	r4,a
      000F4E ED               [12] 3594 	mov	a,r5
      000F4F 34s00            [12] 3595 	addc	a,#(_statistics >> 8)
      000F51 FD               [12] 3596 	mov	r5,a
      000F52 0C               [12] 3597 	inc	r4
      000F53 BC 00 01         [24] 3598 	cjne	r4,#0x00,00559$
      000F56 0D               [12] 3599 	inc	r5
      000F57                       3600 00559$:
      000F57 C0 07            [24] 3601 	push	ar7
      000F59 C0 06            [24] 3602 	push	ar6
      000F5B C0 05            [24] 3603 	push	ar5
      000F5D C0 04            [24] 3604 	push	ar4
      000F5F 12r00r00         [24] 3605 	lcall	_radio_current_rssi
      000F62 AB 82            [24] 3606 	mov	r3,dpl
      000F64 D0 04            [24] 3607 	pop	ar4
      000F66 D0 05            [24] 3608 	pop	ar5
      000F68 D0 06            [24] 3609 	pop	ar6
      000F6A D0 07            [24] 3610 	pop	ar7
      000F6C 7A 00            [12] 3611 	mov	r2,#0x00
      000F6E 78r00            [12] 3612 	mov	r0,#_nodeId
      000F70 E2               [24] 3613 	movx	a,@r0
      000F71 FE               [12] 3614 	mov	r6,a
      000F72 08               [12] 3615 	inc	r0
      000F73 E2               [24] 3616 	movx	a,@r0
      000F74 CE               [12] 3617 	xch	a,r6
      000F75 25 E0            [12] 3618 	add	a,acc
      000F77 CE               [12] 3619 	xch	a,r6
      000F78 33               [12] 3620 	rlc	a
      000F79 FF               [12] 3621 	mov	r7,a
      000F7A EE               [12] 3622 	mov	a,r6
      000F7B 24r00            [12] 3623 	add	a,#_statistics
      000F7D FE               [12] 3624 	mov	r6,a
      000F7E EF               [12] 3625 	mov	a,r7
      000F7F 34s00            [12] 3626 	addc	a,#(_statistics >> 8)
      000F81 FF               [12] 3627 	mov	r7,a
      000F82 8E 82            [24] 3628 	mov	dpl,r6
      000F84 8F 83            [24] 3629 	mov	dph,r7
      000F86 A3               [24] 3630 	inc	dptr
      000F87 E0               [24] 3631 	movx	a,@dptr
      000F88 90r00r00         [24] 3632 	mov	dptr,#__mulint_PARM_2
      000F8B F0               [24] 3633 	movx	@dptr,a
      000F8C E4               [12] 3634 	clr	a
      000F8D A3               [24] 3635 	inc	dptr
      000F8E F0               [24] 3636 	movx	@dptr,a
      000F8F 90 00 03         [24] 3637 	mov	dptr,#0x0003
      000F92 C0 05            [24] 3638 	push	ar5
      000F94 C0 04            [24] 3639 	push	ar4
      000F96 C0 03            [24] 3640 	push	ar3
      000F98 C0 02            [24] 3641 	push	ar2
      000F9A 12r00r00         [24] 3642 	lcall	__mulint
      000F9D AE 82            [24] 3643 	mov	r6,dpl
      000F9F AF 83            [24] 3644 	mov	r7,dph
      000FA1 D0 02            [24] 3645 	pop	ar2
      000FA3 D0 03            [24] 3646 	pop	ar3
      000FA5 D0 04            [24] 3647 	pop	ar4
      000FA7 D0 05            [24] 3648 	pop	ar5
      000FA9 EE               [12] 3649 	mov	a,r6
      000FAA 2B               [12] 3650 	add	a,r3
      000FAB FE               [12] 3651 	mov	r6,a
      000FAC EF               [12] 3652 	mov	a,r7
      000FAD 3A               [12] 3653 	addc	a,r2
      000FAE C3               [12] 3654 	clr	c
      000FAF 13               [12] 3655 	rrc	a
      000FB0 CE               [12] 3656 	xch	a,r6
      000FB1 13               [12] 3657 	rrc	a
      000FB2 CE               [12] 3658 	xch	a,r6
      000FB3 C3               [12] 3659 	clr	c
      000FB4 13               [12] 3660 	rrc	a
      000FB5 CE               [12] 3661 	xch	a,r6
      000FB6 13               [12] 3662 	rrc	a
      000FB7 CE               [12] 3663 	xch	a,r6
      000FB8 8C 82            [24] 3664 	mov	dpl,r4
      000FBA 8D 83            [24] 3665 	mov	dph,r5
      000FBC EE               [12] 3666 	mov	a,r6
      000FBD F0               [24] 3667 	movx	@dptr,a
                                   3668 ;	radio/tdm.c:807: if (duty_cycle_wait) {
      000FBE D0 07            [24] 3669 	pop	ar7
      000FC0 D0 06            [24] 3670 	pop	ar6
      000FC2 30*07 03         [24] 3671 	jnb	_duty_cycle_wait,00560$
      000FC5 02r09rAB         [24] 3672 	ljmp	00259$
      000FC8                       3673 00560$:
                                   3674 ;	radio/tdm.c:814: if (tdm_state_remaining < packet_latency) {
      000FC8 78r07            [12] 3675 	mov	r0,#_tdm_state_remaining
      000FCA 79r13            [12] 3676 	mov	r1,#_packet_latency
      000FCC C3               [12] 3677 	clr	c
      000FCD E3               [24] 3678 	movx	a,@r1
      000FCE F5 F0            [12] 3679 	mov	b,a
      000FD0 E2               [24] 3680 	movx	a,@r0
      000FD1 95 F0            [12] 3681 	subb	a,b
      000FD3 09               [12] 3682 	inc	r1
      000FD4 E3               [24] 3683 	movx	a,@r1
      000FD5 F5 F0            [12] 3684 	mov	b,a
      000FD7 08               [12] 3685 	inc	r0
      000FD8 E2               [24] 3686 	movx	a,@r0
      000FD9 95 F0            [12] 3687 	subb	a,b
      000FDB 50 03            [24] 3688 	jnc	00561$
      000FDD 02r09rAB         [24] 3689 	ljmp	00259$
      000FE0                       3690 00561$:
                                   3691 ;	radio/tdm.c:820: if((signed) tdm_state_remaining - 2*(signed)packet_latency < 0) {
      000FE0 78r07            [12] 3692 	mov	r0,#_tdm_state_remaining
      000FE2 E2               [24] 3693 	movx	a,@r0
      000FE3 FC               [12] 3694 	mov	r4,a
      000FE4 08               [12] 3695 	inc	r0
      000FE5 E2               [24] 3696 	movx	a,@r0
      000FE6 FD               [12] 3697 	mov	r5,a
      000FE7 78r13            [12] 3698 	mov	r0,#_packet_latency
      000FE9 E2               [24] 3699 	movx	a,@r0
      000FEA FA               [12] 3700 	mov	r2,a
      000FEB 08               [12] 3701 	inc	r0
      000FEC E2               [24] 3702 	movx	a,@r0
      000FED CA               [12] 3703 	xch	a,r2
      000FEE 25 E0            [12] 3704 	add	a,acc
      000FF0 CA               [12] 3705 	xch	a,r2
      000FF1 33               [12] 3706 	rlc	a
      000FF2 FB               [12] 3707 	mov	r3,a
      000FF3 EC               [12] 3708 	mov	a,r4
      000FF4 C3               [12] 3709 	clr	c
      000FF5 9A               [12] 3710 	subb	a,r2
      000FF6 FC               [12] 3711 	mov	r4,a
      000FF7 ED               [12] 3712 	mov	a,r5
      000FF8 9B               [12] 3713 	subb	a,r3
      000FF9 FD               [12] 3714 	mov	r5,a
      000FFA 30 E7 04         [24] 3715 	jnb	acc.7,00183$
                                   3716 ;	radio/tdm.c:821: max_xmit = 0;
      000FFD 7D 00            [12] 3717 	mov	r5,#0x00
      000FFF 80 36            [24] 3718 	sjmp	00184$
      001001                       3719 00183$:
                                   3720 ;	radio/tdm.c:824: max_xmit = (tdm_state_remaining - 2*packet_latency) / ticks_per_byte;
      001001 78r13            [12] 3721 	mov	r0,#_packet_latency
      001003 E2               [24] 3722 	movx	a,@r0
      001004 FB               [12] 3723 	mov	r3,a
      001005 08               [12] 3724 	inc	r0
      001006 E2               [24] 3725 	movx	a,@r0
      001007 CB               [12] 3726 	xch	a,r3
      001008 25 E0            [12] 3727 	add	a,acc
      00100A CB               [12] 3728 	xch	a,r3
      00100B 33               [12] 3729 	rlc	a
      00100C FC               [12] 3730 	mov	r4,a
      00100D 78r07            [12] 3731 	mov	r0,#_tdm_state_remaining
      00100F E2               [24] 3732 	movx	a,@r0
      001010 C3               [12] 3733 	clr	c
      001011 9B               [12] 3734 	subb	a,r3
      001012 FB               [12] 3735 	mov	r3,a
      001013 08               [12] 3736 	inc	r0
      001014 E2               [24] 3737 	movx	a,@r0
      001015 9C               [12] 3738 	subb	a,r4
      001016 FC               [12] 3739 	mov	r4,a
      001017 78r15            [12] 3740 	mov	r0,#_ticks_per_byte
      001019 90r00r00         [24] 3741 	mov	dptr,#__divuint_PARM_2
      00101C E2               [24] 3742 	movx	a,@r0
      00101D F0               [24] 3743 	movx	@dptr,a
      00101E 08               [12] 3744 	inc	r0
      00101F E2               [24] 3745 	movx	a,@r0
      001020 A3               [24] 3746 	inc	dptr
      001021 F0               [24] 3747 	movx	@dptr,a
      001022 8B 82            [24] 3748 	mov	dpl,r3
      001024 8C 83            [24] 3749 	mov	dph,r4
      001026 C0 07            [24] 3750 	push	ar7
      001028 C0 06            [24] 3751 	push	ar6
      00102A 12r00r00         [24] 3752 	lcall	__divuint
      00102D AB 82            [24] 3753 	mov	r3,dpl
      00102F AC 83            [24] 3754 	mov	r4,dph
      001031 D0 06            [24] 3755 	pop	ar6
      001033 D0 07            [24] 3756 	pop	ar7
      001035 8B 05            [24] 3757 	mov	ar5,r3
      001037                       3758 00184$:
                                   3759 ;	radio/tdm.c:826: if (max_xmit < sizeof(trailer)+1) {
      001037 BD 05 00         [24] 3760 	cjne	r5,#0x05,00563$
      00103A                       3761 00563$:
      00103A 50 03            [24] 3762 	jnc	00564$
      00103C 02r09rAB         [24] 3763 	ljmp	00259$
      00103F                       3764 00564$:
                                   3765 ;	radio/tdm.c:831: max_xmit -= sizeof(trailer)+1;
      00103F ED               [12] 3766 	mov	a,r5
      001040 24 FB            [12] 3767 	add	a,#0xFB
      001042 FD               [12] 3768 	mov	r5,a
                                   3769 ;	radio/tdm.c:832: if (max_xmit > max_data_packet_length) {
      001043 78r0D            [12] 3770 	mov	r0,#_max_data_packet_length
      001045 C3               [12] 3771 	clr	c
      001046 E2               [24] 3772 	movx	a,@r0
      001047 9D               [12] 3773 	subb	a,r5
      001048 50 04            [24] 3774 	jnc	00188$
                                   3775 ;	radio/tdm.c:833: max_xmit = max_data_packet_length;
      00104A 78r0D            [12] 3776 	mov	r0,#_max_data_packet_length
      00104C E2               [24] 3777 	movx	a,@r0
      00104D FD               [12] 3778 	mov	r5,a
      00104E                       3779 00188$:
                                   3780 ;	radio/tdm.c:839: if(serial_read_available() > 0 && transmit_yield && tdm_state == TDM_RECEIVE)
      00104E C0 07            [24] 3781 	push	ar7
      001050 C0 06            [24] 3782 	push	ar6
      001052 C0 05            [24] 3783 	push	ar5
      001054 12r00r00         [24] 3784 	lcall	_serial_read_available
      001057 E5 82            [12] 3785 	mov	a,dpl
      001059 85 83 F0         [24] 3786 	mov	b,dph
      00105C D0 05            [24] 3787 	pop	ar5
      00105E D0 06            [24] 3788 	pop	ar6
      001060 D0 07            [24] 3789 	pop	ar7
      001062 45 F0            [12] 3790 	orl	a,b
      001064 60 42            [24] 3791 	jz	00201$
      001066 30*03 3F         [24] 3792 	jnb	_transmit_yield,00201$
      001069 78r00            [12] 3793 	mov	r0,#_tdm_state
      00106B E2               [24] 3794 	movx	a,@r0
      00106C B4 01 39         [24] 3795 	cjne	a,#0x01,00201$
                                   3796 ;	radio/tdm.c:842: if(tdm_state_remaining < tx_window_width/4) {
      00106F 78r09            [12] 3797 	mov	r0,#_tx_window_width
      001071 E2               [24] 3798 	movx	a,@r0
      001072 FB               [12] 3799 	mov	r3,a
      001073 08               [12] 3800 	inc	r0
      001074 E2               [24] 3801 	movx	a,@r0
      001075 C3               [12] 3802 	clr	c
      001076 13               [12] 3803 	rrc	a
      001077 CB               [12] 3804 	xch	a,r3
      001078 13               [12] 3805 	rrc	a
      001079 CB               [12] 3806 	xch	a,r3
      00107A C3               [12] 3807 	clr	c
      00107B 13               [12] 3808 	rrc	a
      00107C CB               [12] 3809 	xch	a,r3
      00107D 13               [12] 3810 	rrc	a
      00107E CB               [12] 3811 	xch	a,r3
      00107F FC               [12] 3812 	mov	r4,a
      001080 78r07            [12] 3813 	mov	r0,#_tdm_state_remaining
      001082 C3               [12] 3814 	clr	c
      001083 E2               [24] 3815 	movx	a,@r0
      001084 9B               [12] 3816 	subb	a,r3
      001085 08               [12] 3817 	inc	r0
      001086 E2               [24] 3818 	movx	a,@r0
      001087 9C               [12] 3819 	subb	a,r4
      001088 50 03            [24] 3820 	jnc	00570$
      00108A 02r09rAB         [24] 3821 	ljmp	00259$
      00108D                       3822 00570$:
                                   3823 ;	radio/tdm.c:846: pbuf[0] = 0xff;
      00108D 90r00r00         [24] 3824 	mov	dptr,#_pbuf
      001090 74 FF            [12] 3825 	mov	a,#0xFF
      001092 F0               [24] 3826 	movx	@dptr,a
                                   3827 ;	radio/tdm.c:847: len = 1;
      001093 78r35            [12] 3828 	mov	r0,#_tdm_serial_loop_len_2_234
      001095 74 01            [12] 3829 	mov	a,#0x01
      001097 F2               [24] 3830 	movx	@r0,a
                                   3831 ;	radio/tdm.c:848: trailer.command = 1;
      001098 78r2B            [12] 3832 	mov	r0,#(_trailer + 0x0001)
      00109A E2               [24] 3833 	movx	a,@r0
      00109B 44 20            [12] 3834 	orl	a,#0x20
      00109D F2               [24] 3835 	movx	@r0,a
                                   3836 ;	radio/tdm.c:850: nodeDestination = 0xFFFF;
      00109E 78r05            [12] 3837 	mov	r0,#_nodeDestination
      0010A0 74 FF            [12] 3838 	mov	a,#0xFF
      0010A2 F2               [24] 3839 	movx	@r0,a
      0010A3 08               [12] 3840 	inc	r0
      0010A4 F2               [24] 3841 	movx	@r0,a
      0010A5 02r11r95         [24] 3842 	ljmp	00202$
      0010A8                       3843 00201$:
                                   3844 ;	radio/tdm.c:856: if (tdm_state != TDM_SYNC) {
      0010A8 78r00            [12] 3845 	mov	r0,#_tdm_state
      0010AA E2               [24] 3846 	movx	a,@r0
      0010AB B4 02 03         [24] 3847 	cjne	a,#0x02,00571$
      0010AE 02r11r91         [24] 3848 	ljmp	00198$
      0010B1                       3849 00571$:
                                   3850 ;	radio/tdm.c:857: if (send_at_command && max_xmit >= strlen(remote_at_cmd)) {
      0010B1 20*08 03         [24] 3851 	jb	_send_at_command,00572$
      0010B4 02r11r34         [24] 3852 	ljmp	00194$
      0010B7                       3853 00572$:
      0010B7 C0 06            [24] 3854 	push	ar6
      0010B9 C0 07            [24] 3855 	push	ar7
      0010BB 90r00rFC         [24] 3856 	mov	dptr,#_remote_at_cmd
      0010BE 75 F0 00         [24] 3857 	mov	b,#0x00
      0010C1 C0 07            [24] 3858 	push	ar7
      0010C3 C0 06            [24] 3859 	push	ar6
      0010C5 C0 05            [24] 3860 	push	ar5
      0010C7 12r00r00         [24] 3861 	lcall	_strlen
      0010CA AB 82            [24] 3862 	mov	r3,dpl
      0010CC AC 83            [24] 3863 	mov	r4,dph
      0010CE D0 05            [24] 3864 	pop	ar5
      0010D0 D0 06            [24] 3865 	pop	ar6
      0010D2 D0 07            [24] 3866 	pop	ar7
      0010D4 8D 02            [24] 3867 	mov	ar2,r5
      0010D6 7F 00            [12] 3868 	mov	r7,#0x00
      0010D8 C3               [12] 3869 	clr	c
      0010D9 EA               [12] 3870 	mov	a,r2
      0010DA 9B               [12] 3871 	subb	a,r3
      0010DB EF               [12] 3872 	mov	a,r7
      0010DC 9C               [12] 3873 	subb	a,r4
      0010DD D0 07            [24] 3874 	pop	ar7
      0010DF D0 06            [24] 3875 	pop	ar6
      0010E1 40 51            [24] 3876 	jc	00194$
                                   3877 ;	radio/tdm.c:859: len = strlen(remote_at_cmd);
      0010E3 90r00rFC         [24] 3878 	mov	dptr,#_remote_at_cmd
      0010E6 75 F0 00         [24] 3879 	mov	b,#0x00
      0010E9 C0 07            [24] 3880 	push	ar7
      0010EB C0 06            [24] 3881 	push	ar6
      0010ED C0 05            [24] 3882 	push	ar5
      0010EF 12r00r00         [24] 3883 	lcall	_strlen
      0010F2 AB 82            [24] 3884 	mov	r3,dpl
      0010F4 78r35            [12] 3885 	mov	r0,#_tdm_serial_loop_len_2_234
      0010F6 EB               [12] 3886 	mov	a,r3
      0010F7 F2               [24] 3887 	movx	@r0,a
                                   3888 ;	radio/tdm.c:860: memcpy(pbuf, remote_at_cmd, len);
      0010F8 90r00r00         [24] 3889 	mov	dptr,#_memcpy_PARM_2
      0010FB 74rFC            [12] 3890 	mov	a,#_remote_at_cmd
      0010FD F0               [24] 3891 	movx	@dptr,a
      0010FE 74s00            [12] 3892 	mov	a,#(_remote_at_cmd >> 8)
      001100 A3               [24] 3893 	inc	dptr
      001101 F0               [24] 3894 	movx	@dptr,a
      001102 E4               [12] 3895 	clr	a
      001103 A3               [24] 3896 	inc	dptr
      001104 F0               [24] 3897 	movx	@dptr,a
      001105 90r00r00         [24] 3898 	mov	dptr,#_memcpy_PARM_3
      001108 EB               [12] 3899 	mov	a,r3
      001109 F0               [24] 3900 	movx	@dptr,a
      00110A E4               [12] 3901 	clr	a
      00110B A3               [24] 3902 	inc	dptr
      00110C F0               [24] 3903 	movx	@dptr,a
      00110D 90r00r00         [24] 3904 	mov	dptr,#_pbuf
      001110 75 F0 00         [24] 3905 	mov	b,#0x00
      001113 12r00r00         [24] 3906 	lcall	_memcpy
      001116 D0 05            [24] 3907 	pop	ar5
      001118 D0 06            [24] 3908 	pop	ar6
      00111A D0 07            [24] 3909 	pop	ar7
                                   3910 ;	radio/tdm.c:861: trailer.command = 1;
      00111C 78r2B            [12] 3911 	mov	r0,#(_trailer + 0x0001)
      00111E E2               [24] 3912 	movx	a,@r0
      00111F 44 20            [12] 3913 	orl	a,#0x20
      001121 F2               [24] 3914 	movx	@r0,a
                                   3915 ;	radio/tdm.c:862: nodeDestination = send_at_command_to;
      001122 78r2E            [12] 3916 	mov	r0,#_send_at_command_to
      001124 E2               [24] 3917 	movx	a,@r0
      001125 FB               [12] 3918 	mov	r3,a
      001126 08               [12] 3919 	inc	r0
      001127 E2               [24] 3920 	movx	a,@r0
      001128 FC               [12] 3921 	mov	r4,a
      001129 78r05            [12] 3922 	mov	r0,#_nodeDestination
      00112B EB               [12] 3923 	mov	a,r3
      00112C F2               [24] 3924 	movx	@r0,a
      00112D 08               [12] 3925 	inc	r0
      00112E EC               [12] 3926 	mov	a,r4
      00112F F2               [24] 3927 	movx	@r0,a
                                   3928 ;	radio/tdm.c:863: send_at_command = false;
      001130 C2*08            [12] 3929 	clr	_send_at_command
      001132 80 61            [24] 3930 	sjmp	00202$
      001134                       3931 00194$:
                                   3932 ;	radio/tdm.c:866: len = packet_get_next(max_xmit, pbuf);
      001134 78r00            [12] 3933 	mov	r0,#_packet_get_next_PARM_2
      001136 74r00            [12] 3934 	mov	a,#_pbuf
      001138 F2               [24] 3935 	movx	@r0,a
      001139 08               [12] 3936 	inc	r0
      00113A 74s00            [12] 3937 	mov	a,#(_pbuf >> 8)
      00113C F2               [24] 3938 	movx	@r0,a
      00113D 8D 82            [24] 3939 	mov	dpl,r5
      00113F C0 07            [24] 3940 	push	ar7
      001141 C0 06            [24] 3941 	push	ar6
      001143 C0 05            [24] 3942 	push	ar5
      001145 12r00r00         [24] 3943 	lcall	_packet_get_next
      001148 E5 82            [12] 3944 	mov	a,dpl
      00114A 78r35            [12] 3945 	mov	r0,#_tdm_serial_loop_len_2_234
      00114C F2               [24] 3946 	movx	@r0,a
                                   3947 ;	radio/tdm.c:867: trailer.command = packet_is_injected();
      00114D 12r00r00         [24] 3948 	lcall	_packet_is_injected
      001150 D0 05            [24] 3949 	pop	ar5
      001152 D0 06            [24] 3950 	pop	ar6
      001154 D0 07            [24] 3951 	pop	ar7
      001156 92*0A            [24] 3952 	mov  _tdm_serial_loop_sloc1_1_0,c
      001158 E4               [12] 3953 	clr	a
      001159 33               [12] 3954 	rlc	a
      00115A FC               [12] 3955 	mov	r4,a
      00115B 78r2B            [12] 3956 	mov	r0,#(_trailer + 0x0001)
      00115D 13               [12] 3957 	rrc	a
      00115E E2               [24] 3958 	movx	a,@r0
      00115F 92 E5            [24] 3959 	mov	acc.5,c
      001161 F2               [24] 3960 	movx	@r0,a
                                   3961 ;	radio/tdm.c:870: if(trailer.command) {
      001162 78r2B            [12] 3962 	mov	r0,#(_trailer + 0x0001)
      001164 E2               [24] 3963 	movx	a,@r0
      001165 30 E5 2D         [24] 3964 	jnb	acc.5,00202$
                                   3965 ;	radio/tdm.c:871: nodeDestination = send_at_command_to;
      001168 78r2E            [12] 3966 	mov	r0,#_send_at_command_to
      00116A E2               [24] 3967 	movx	a,@r0
      00116B FB               [12] 3968 	mov	r3,a
      00116C 08               [12] 3969 	inc	r0
      00116D E2               [24] 3970 	movx	a,@r0
      00116E FC               [12] 3971 	mov	r4,a
      00116F 78r05            [12] 3972 	mov	r0,#_nodeDestination
      001171 EB               [12] 3973 	mov	a,r3
      001172 F2               [24] 3974 	movx	@r0,a
      001173 08               [12] 3975 	inc	r0
      001174 EC               [12] 3976 	mov	a,r4
      001175 F2               [24] 3977 	movx	@r0,a
                                   3978 ;	radio/tdm.c:872: packet_ati5_inject(ati5_id++);
      001176 78r29            [12] 3979 	mov	r0,#_ati5_id
      001178 E2               [24] 3980 	movx	a,@r0
      001179 FC               [12] 3981 	mov	r4,a
      00117A 78r29            [12] 3982 	mov	r0,#_ati5_id
      00117C 04               [12] 3983 	inc	a
      00117D F2               [24] 3984 	movx	@r0,a
      00117E 8C 82            [24] 3985 	mov	dpl,r4
      001180 C0 07            [24] 3986 	push	ar7
      001182 C0 06            [24] 3987 	push	ar6
      001184 C0 05            [24] 3988 	push	ar5
      001186 12r00r00         [24] 3989 	lcall	_packet_ati5_inject
      001189 D0 05            [24] 3990 	pop	ar5
      00118B D0 06            [24] 3991 	pop	ar6
      00118D D0 07            [24] 3992 	pop	ar7
      00118F 80 04            [24] 3993 	sjmp	00202$
      001191                       3994 00198$:
                                   3995 ;	radio/tdm.c:877: len = 0;
      001191 78r35            [12] 3996 	mov	r0,#_tdm_serial_loop_len_2_234
      001193 E4               [12] 3997 	clr	a
      001194 F2               [24] 3998 	movx	@r0,a
      001195                       3999 00202$:
                                   4000 ;	radio/tdm.c:880: if (len > max_data_packet_length) {
      001195 78r35            [12] 4001 	mov	r0,#_tdm_serial_loop_len_2_234
      001197 79r0D            [12] 4002 	mov	r1,#_max_data_packet_length
      001199 C3               [12] 4003 	clr	c
      00119A E2               [24] 4004 	movx	a,@r0
      00119B F5 F0            [12] 4005 	mov	b,a
      00119D E3               [24] 4006 	movx	a,@r1
      00119E 95 F0            [12] 4007 	subb	a,b
      0011A0 50 21            [24] 4008 	jnc	00206$
                                   4009 ;	radio/tdm.c:881: panic("oversized tdm packet");
      0011A2 C0 07            [24] 4010 	push	ar7
      0011A4 C0 06            [24] 4011 	push	ar6
      0011A6 C0 05            [24] 4012 	push	ar5
      0011A8 74rA4            [12] 4013 	mov	a,#___str_5
      0011AA C0 E0            [24] 4014 	push	acc
      0011AC 74s00            [12] 4015 	mov	a,#(___str_5 >> 8)
      0011AE C0 E0            [24] 4016 	push	acc
      0011B0 74 80            [12] 4017 	mov	a,#0x80
      0011B2 C0 E0            [24] 4018 	push	acc
      0011B4 12r00r00         [24] 4019 	lcall	_panic
      0011B7 15 81            [12] 4020 	dec	sp
      0011B9 15 81            [12] 4021 	dec	sp
      0011BB 15 81            [12] 4022 	dec	sp
      0011BD D0 05            [24] 4023 	pop	ar5
      0011BF D0 06            [24] 4024 	pop	ar6
      0011C1 D0 07            [24] 4025 	pop	ar7
      0011C3                       4026 00206$:
                                   4027 ;	radio/tdm.c:884: trailer.bonus = (tdm_state == TDM_RECEIVE);
      0011C3 78r00            [12] 4028 	mov	r0,#_tdm_state
      0011C5 E2               [24] 4029 	movx	a,@r0
      0011C6 B4 01 03         [24] 4030 	cjne	a,#0x01,00576$
      0011C9 D3               [12] 4031 	setb	c
      0011CA 80 01            [24] 4032 	sjmp	00577$
      0011CC                       4033 00576$:
      0011CC C3               [12] 4034 	clr	c
      0011CD                       4035 00577$:
      0011CD 92*0A            [24] 4036 	mov  _tdm_serial_loop_sloc1_1_0,c
      0011CF E4               [12] 4037 	clr	a
      0011D0 33               [12] 4038 	rlc	a
      0011D1 78r2B            [12] 4039 	mov	r0,#(_trailer + 0x0001)
      0011D3 13               [12] 4040 	rrc	a
      0011D4 E2               [24] 4041 	movx	a,@r0
      0011D5 92 E6            [24] 4042 	mov	acc.6,c
      0011D7 F2               [24] 4043 	movx	@r0,a
                                   4044 ;	radio/tdm.c:885: trailer.resend = packet_is_resend();
      0011D8 C0 07            [24] 4045 	push	ar7
      0011DA C0 06            [24] 4046 	push	ar6
      0011DC C0 05            [24] 4047 	push	ar5
      0011DE 12r00r00         [24] 4048 	lcall	_packet_is_resend
      0011E1 D0 05            [24] 4049 	pop	ar5
      0011E3 D0 06            [24] 4050 	pop	ar6
      0011E5 D0 07            [24] 4051 	pop	ar7
      0011E7 92*0A            [24] 4052 	mov  _tdm_serial_loop_sloc1_1_0,c
      0011E9 E4               [12] 4053 	clr	a
      0011EA 33               [12] 4054 	rlc	a
      0011EB FC               [12] 4055 	mov	r4,a
      0011EC 78r2B            [12] 4056 	mov	r0,#(_trailer + 0x0001)
      0011EE 13               [12] 4057 	rrc	a
      0011EF E2               [24] 4058 	movx	a,@r0
      0011F0 92 E7            [24] 4059 	mov	acc.7,c
      0011F2 F2               [24] 4060 	movx	@r0,a
                                   4061 ;	radio/tdm.c:888: if (tdm_state == TDM_TRANSMIT && len == 0 && max_xmit >= (sizeof(statistics)+sizeof(statistics_transmit_stats))
      0011F3 78r00            [12] 4062 	mov	r0,#_tdm_state
      0011F5 E2               [24] 4063 	movx	a,@r0
      0011F6 60 03            [24] 4064 	jz	00578$
      0011F8 02r13r57         [24] 4065 	ljmp	00218$
      0011FB                       4066 00578$:
      0011FB 78r35            [12] 4067 	mov	r0,#_tdm_serial_loop_len_2_234
      0011FD E2               [24] 4068 	movx	a,@r0
      0011FE 60 03            [24] 4069 	jz	00579$
      001200 02r13r57         [24] 4070 	ljmp	00218$
      001203                       4071 00579$:
                                   4072 ;	radio/tdm.c:890: && statistics_transmit_stats < (nodeCount-1) && nodeId < MAX_NODE_RSSI_STATS 
      001203 BD 12 00         [24] 4073 	cjne	r5,#0x12,00580$
      001206                       4074 00580$:
      001206 50 03            [24] 4075 	jnc	00581$
      001208 02r13r57         [24] 4076 	ljmp	00218$
      00120B                       4077 00581$:
      00120B 78r30            [12] 4078 	mov	r0,#_nodeCount
      00120D E2               [24] 4079 	movx	a,@r0
      00120E 24 FF            [12] 4080 	add	a,#0xFF
      001210 FC               [12] 4081 	mov	r4,a
      001211 08               [12] 4082 	inc	r0
      001212 E2               [24] 4083 	movx	a,@r0
      001213 34 FF            [12] 4084 	addc	a,#0xFF
      001215 FD               [12] 4085 	mov	r5,a
      001216 78r27            [12] 4086 	mov	r0,#_statistics_transmit_stats
      001218 C3               [12] 4087 	clr	c
      001219 E2               [24] 4088 	movx	a,@r0
      00121A 9C               [12] 4089 	subb	a,r4
      00121B 08               [12] 4090 	inc	r0
      00121C E2               [24] 4091 	movx	a,@r0
      00121D 9D               [12] 4092 	subb	a,r5
      00121E 40 03            [24] 4093 	jc	00582$
      001220 02r13r57         [24] 4094 	ljmp	00218$
      001223                       4095 00582$:
                                   4096 ;	radio/tdm.c:892: && tdm_state_remaining < (tx_window_width-packet_latency*2)) {
      001223 78r00            [12] 4097 	mov	r0,#_nodeId
      001225 C3               [12] 4098 	clr	c
      001226 E2               [24] 4099 	movx	a,@r0
      001227 94 08            [12] 4100 	subb	a,#0x08
      001229 08               [12] 4101 	inc	r0
      00122A E2               [24] 4102 	movx	a,@r0
      00122B 94 00            [12] 4103 	subb	a,#0x00
      00122D 40 03            [24] 4104 	jc	00583$
      00122F 02r13r57         [24] 4105 	ljmp	00218$
      001232                       4106 00583$:
      001232 78r13            [12] 4107 	mov	r0,#_packet_latency
      001234 E2               [24] 4108 	movx	a,@r0
      001235 FC               [12] 4109 	mov	r4,a
      001236 08               [12] 4110 	inc	r0
      001237 E2               [24] 4111 	movx	a,@r0
      001238 CC               [12] 4112 	xch	a,r4
      001239 25 E0            [12] 4113 	add	a,acc
      00123B CC               [12] 4114 	xch	a,r4
      00123C 33               [12] 4115 	rlc	a
      00123D FD               [12] 4116 	mov	r5,a
      00123E 78r09            [12] 4117 	mov	r0,#_tx_window_width
      001240 E2               [24] 4118 	movx	a,@r0
      001241 C3               [12] 4119 	clr	c
      001242 9C               [12] 4120 	subb	a,r4
      001243 FC               [12] 4121 	mov	r4,a
      001244 08               [12] 4122 	inc	r0
      001245 E2               [24] 4123 	movx	a,@r0
      001246 9D               [12] 4124 	subb	a,r5
      001247 FD               [12] 4125 	mov	r5,a
      001248 78r07            [12] 4126 	mov	r0,#_tdm_state_remaining
      00124A C3               [12] 4127 	clr	c
      00124B E2               [24] 4128 	movx	a,@r0
      00124C 9C               [12] 4129 	subb	a,r4
      00124D 08               [12] 4130 	inc	r0
      00124E E2               [24] 4131 	movx	a,@r0
      00124F 9D               [12] 4132 	subb	a,r5
      001250 40 03            [24] 4133 	jc	00584$
      001252 02r13r57         [24] 4134 	ljmp	00218$
      001255                       4135 00584$:
                                   4136 ;	radio/tdm.c:895: if(statistics_transmit_stats == nodeId) {
      001255 78r27            [12] 4137 	mov	r0,#_statistics_transmit_stats
      001257 79r00            [12] 4138 	mov	r1,#_nodeId
      001259 E2               [24] 4139 	movx	a,@r0
      00125A F5 F0            [12] 4140 	mov	b,a
      00125C E3               [24] 4141 	movx	a,@r1
      00125D B5 F0 0B         [24] 4142 	cjne	a,b,00585$
      001260 08               [12] 4143 	inc	r0
      001261 E2               [24] 4144 	movx	a,@r0
      001262 F5 F0            [12] 4145 	mov	b,a
      001264 09               [12] 4146 	inc	r1
      001265 E3               [24] 4147 	movx	a,@r1
      001266 B5 F0 02         [24] 4148 	cjne	a,b,00585$
      001269 80 02            [24] 4149 	sjmp	00586$
      00126B                       4150 00585$:
      00126B 80 0B            [24] 4151 	sjmp	00208$
      00126D                       4152 00586$:
                                   4153 ;	radio/tdm.c:896: statistics_transmit_stats++;
      00126D 78r27            [12] 4154 	mov	r0,#_statistics_transmit_stats
      00126F E2               [24] 4155 	movx	a,@r0
      001270 24 01            [12] 4156 	add	a,#0x01
      001272 F2               [24] 4157 	movx	@r0,a
      001273 08               [12] 4158 	inc	r0
      001274 E2               [24] 4159 	movx	a,@r0
      001275 34 00            [12] 4160 	addc	a,#0x00
      001277 F2               [24] 4161 	movx	@r0,a
      001278                       4162 00208$:
                                   4163 ;	radio/tdm.c:899: len = sizeof(struct statistics);
      001278 78r35            [12] 4164 	mov	r0,#_tdm_serial_loop_len_2_234
      00127A 74 02            [12] 4165 	mov	a,#0x02
      00127C F2               [24] 4166 	movx	@r0,a
                                   4167 ;	radio/tdm.c:900: statistics[statistics_transmit_stats].average_noise = statistics[nodeId].average_noise;
      00127D 78r27            [12] 4168 	mov	r0,#_statistics_transmit_stats
      00127F E2               [24] 4169 	movx	a,@r0
      001280 FC               [12] 4170 	mov	r4,a
      001281 08               [12] 4171 	inc	r0
      001282 E2               [24] 4172 	movx	a,@r0
      001283 CC               [12] 4173 	xch	a,r4
      001284 25 E0            [12] 4174 	add	a,acc
      001286 CC               [12] 4175 	xch	a,r4
      001287 33               [12] 4176 	rlc	a
      001288 FD               [12] 4177 	mov	r5,a
      001289 EC               [12] 4178 	mov	a,r4
      00128A 24r00            [12] 4179 	add	a,#_statistics
      00128C FC               [12] 4180 	mov	r4,a
      00128D ED               [12] 4181 	mov	a,r5
      00128E 34s00            [12] 4182 	addc	a,#(_statistics >> 8)
      001290 FD               [12] 4183 	mov	r5,a
      001291 0C               [12] 4184 	inc	r4
      001292 BC 00 01         [24] 4185 	cjne	r4,#0x00,00587$
      001295 0D               [12] 4186 	inc	r5
      001296                       4187 00587$:
      001296 78r00            [12] 4188 	mov	r0,#_nodeId
      001298 E2               [24] 4189 	movx	a,@r0
      001299 FA               [12] 4190 	mov	r2,a
      00129A 08               [12] 4191 	inc	r0
      00129B E2               [24] 4192 	movx	a,@r0
      00129C CA               [12] 4193 	xch	a,r2
      00129D 25 E0            [12] 4194 	add	a,acc
      00129F CA               [12] 4195 	xch	a,r2
      0012A0 33               [12] 4196 	rlc	a
      0012A1 FB               [12] 4197 	mov	r3,a
      0012A2 EA               [12] 4198 	mov	a,r2
      0012A3 24r00            [12] 4199 	add	a,#_statistics
      0012A5 FA               [12] 4200 	mov	r2,a
      0012A6 EB               [12] 4201 	mov	a,r3
      0012A7 34s00            [12] 4202 	addc	a,#(_statistics >> 8)
      0012A9 FB               [12] 4203 	mov	r3,a
      0012AA 8A 82            [24] 4204 	mov	dpl,r2
      0012AC 8B 83            [24] 4205 	mov	dph,r3
      0012AE A3               [24] 4206 	inc	dptr
      0012AF E0               [24] 4207 	movx	a,@dptr
      0012B0 8C 82            [24] 4208 	mov	dpl,r4
      0012B2 8D 83            [24] 4209 	mov	dph,r5
      0012B4 F0               [24] 4210 	movx	@dptr,a
                                   4211 ;	radio/tdm.c:901: memcpy(pbuf, statistics+statistics_transmit_stats, len);
      0012B5 78r27            [12] 4212 	mov	r0,#_statistics_transmit_stats
      0012B7 E2               [24] 4213 	movx	a,@r0
      0012B8 FC               [12] 4214 	mov	r4,a
      0012B9 08               [12] 4215 	inc	r0
      0012BA E2               [24] 4216 	movx	a,@r0
      0012BB CC               [12] 4217 	xch	a,r4
      0012BC 25 E0            [12] 4218 	add	a,acc
      0012BE CC               [12] 4219 	xch	a,r4
      0012BF 33               [12] 4220 	rlc	a
      0012C0 FD               [12] 4221 	mov	r5,a
      0012C1 EC               [12] 4222 	mov	a,r4
      0012C2 24r00            [12] 4223 	add	a,#_statistics
      0012C4 FC               [12] 4224 	mov	r4,a
      0012C5 ED               [12] 4225 	mov	a,r5
      0012C6 34s00            [12] 4226 	addc	a,#(_statistics >> 8)
      0012C8 FD               [12] 4227 	mov	r5,a
      0012C9 90r00r00         [24] 4228 	mov	dptr,#_memcpy_PARM_2
      0012CC EC               [12] 4229 	mov	a,r4
      0012CD F0               [24] 4230 	movx	@dptr,a
      0012CE ED               [12] 4231 	mov	a,r5
      0012CF A3               [24] 4232 	inc	dptr
      0012D0 F0               [24] 4233 	movx	@dptr,a
      0012D1 E4               [12] 4234 	clr	a
      0012D2 A3               [24] 4235 	inc	dptr
      0012D3 F0               [24] 4236 	movx	@dptr,a
      0012D4 90r00r00         [24] 4237 	mov	dptr,#_memcpy_PARM_3
      0012D7 74 02            [12] 4238 	mov	a,#0x02
      0012D9 F0               [24] 4239 	movx	@dptr,a
      0012DA E4               [12] 4240 	clr	a
      0012DB A3               [24] 4241 	inc	dptr
      0012DC F0               [24] 4242 	movx	@dptr,a
      0012DD 90r00r00         [24] 4243 	mov	dptr,#_pbuf
      0012E0 75 F0 00         [24] 4244 	mov	b,#0x00
      0012E3 C0 07            [24] 4245 	push	ar7
      0012E5 C0 06            [24] 4246 	push	ar6
      0012E7 12r00r00         [24] 4247 	lcall	_memcpy
                                   4248 ;	radio/tdm.c:902: memcpy(pbuf+len, &statistics_transmit_stats, sizeof(statistics_transmit_stats));
      0012EA 90r00r00         [24] 4249 	mov	dptr,#_memcpy_PARM_2
      0012ED 74r27            [12] 4250 	mov	a,#_statistics_transmit_stats
      0012EF F0               [24] 4251 	movx	@dptr,a
      0012F0 E4               [12] 4252 	clr	a
      0012F1 A3               [24] 4253 	inc	dptr
      0012F2 F0               [24] 4254 	movx	@dptr,a
      0012F3 74 60            [12] 4255 	mov	a,#0x60
      0012F5 A3               [24] 4256 	inc	dptr
      0012F6 F0               [24] 4257 	movx	@dptr,a
      0012F7 90r00r00         [24] 4258 	mov	dptr,#_memcpy_PARM_3
      0012FA 74 02            [12] 4259 	mov	a,#0x02
      0012FC F0               [24] 4260 	movx	@dptr,a
      0012FD E4               [12] 4261 	clr	a
      0012FE A3               [24] 4262 	inc	dptr
      0012FF F0               [24] 4263 	movx	@dptr,a
      001300 90r00r02         [24] 4264 	mov	dptr,#(_pbuf + 0x0002)
      001303 75 F0 00         [24] 4265 	mov	b,#0x00
      001306 12r00r00         [24] 4266 	lcall	_memcpy
      001309 D0 06            [24] 4267 	pop	ar6
      00130B D0 07            [24] 4268 	pop	ar7
                                   4269 ;	radio/tdm.c:903: len += sizeof(statistics_transmit_stats);
      00130D 78r35            [12] 4270 	mov	r0,#_tdm_serial_loop_len_2_234
      00130F 74 04            [12] 4271 	mov	a,#0x04
      001311 F2               [24] 4272 	movx	@r0,a
                                   4273 ;	radio/tdm.c:905: statistics_transmit_stats++;
      001312 78r27            [12] 4274 	mov	r0,#_statistics_transmit_stats
      001314 E2               [24] 4275 	movx	a,@r0
      001315 24 01            [12] 4276 	add	a,#0x01
      001317 F2               [24] 4277 	movx	@r0,a
      001318 08               [12] 4278 	inc	r0
      001319 E2               [24] 4279 	movx	a,@r0
      00131A 34 00            [12] 4280 	addc	a,#0x00
      00131C F2               [24] 4281 	movx	@r0,a
                                   4282 ;	radio/tdm.c:908: if(statistics_transmit_stats == nodeId) {
      00131D 78r27            [12] 4283 	mov	r0,#_statistics_transmit_stats
      00131F 79r00            [12] 4284 	mov	r1,#_nodeId
      001321 E2               [24] 4285 	movx	a,@r0
      001322 F5 F0            [12] 4286 	mov	b,a
      001324 E3               [24] 4287 	movx	a,@r1
      001325 B5 F0 0B         [24] 4288 	cjne	a,b,00588$
      001328 08               [12] 4289 	inc	r0
      001329 E2               [24] 4290 	movx	a,@r0
      00132A F5 F0            [12] 4291 	mov	b,a
      00132C 09               [12] 4292 	inc	r1
      00132D E3               [24] 4293 	movx	a,@r1
      00132E B5 F0 02         [24] 4294 	cjne	a,b,00588$
      001331 80 02            [24] 4295 	sjmp	00589$
      001333                       4296 00588$:
      001333 80 0B            [24] 4297 	sjmp	00210$
      001335                       4298 00589$:
                                   4299 ;	radio/tdm.c:909: statistics_transmit_stats++;
      001335 78r27            [12] 4300 	mov	r0,#_statistics_transmit_stats
      001337 E2               [24] 4301 	movx	a,@r0
      001338 24 01            [12] 4302 	add	a,#0x01
      00133A F2               [24] 4303 	movx	@r0,a
      00133B 08               [12] 4304 	inc	r0
      00133C E2               [24] 4305 	movx	a,@r0
      00133D 34 00            [12] 4306 	addc	a,#0x00
      00133F F2               [24] 4307 	movx	@r0,a
      001340                       4308 00210$:
                                   4309 ;	radio/tdm.c:913: trailer.window = 0;
      001340 78r2A            [12] 4310 	mov	r0,#_trailer
      001342 E4               [12] 4311 	clr	a
      001343 F2               [24] 4312 	movx	@r0,a
      001344 08               [12] 4313 	inc	r0
      001345 E2               [24] 4314 	movx	a,@r0
      001346 54 E0            [12] 4315 	anl	a,#0xE0
      001348 F2               [24] 4316 	movx	@r0,a
                                   4317 ;	radio/tdm.c:914: trailer.resend = 0;
      001349 78r2B            [12] 4318 	mov	r0,#(_trailer + 0x0001)
      00134B E2               [24] 4319 	movx	a,@r0
      00134C 54 7F            [12] 4320 	anl	a,#0x7F
      00134E F2               [24] 4321 	movx	@r0,a
                                   4322 ;	radio/tdm.c:915: trailer.command = 0;
      00134F 78r2B            [12] 4323 	mov	r0,#(_trailer + 0x0001)
      001351 E2               [24] 4324 	movx	a,@r0
      001352 54 DF            [12] 4325 	anl	a,#0xDF
      001354 F2               [24] 4326 	movx	@r0,a
      001355 80 53            [24] 4327 	sjmp	00219$
      001357                       4328 00218$:
                                   4329 ;	radio/tdm.c:917: else if (tdm_state != TDM_TRANSMIT && len == 0 && !(tdm_state == TDM_SYNC && nodeId == BASE_NODEID)) {
      001357 78r00            [12] 4330 	mov	r0,#_tdm_state
      001359 E2               [24] 4331 	movx	a,@r0
      00135A 60 1E            [24] 4332 	jz	00212$
      00135C 78r35            [12] 4333 	mov	r0,#_tdm_serial_loop_len_2_234
      00135E E2               [24] 4334 	movx	a,@r0
      00135F 70 19            [24] 4335 	jnz	00212$
      001361 78r00            [12] 4336 	mov	r0,#_tdm_state
      001363 E2               [24] 4337 	movx	a,@r0
      001364 B4 02 02         [24] 4338 	cjne	a,#0x02,00592$
      001367 80 03            [24] 4339 	sjmp	00593$
      001369                       4340 00592$:
      001369 02r09rAB         [24] 4341 	ljmp	00259$
      00136C                       4342 00593$:
      00136C 78r00            [12] 4343 	mov	r0,#_nodeId
      00136E E2               [24] 4344 	movx	a,@r0
      00136F F5 F0            [12] 4345 	mov	b,a
      001371 08               [12] 4346 	inc	r0
      001372 E2               [24] 4347 	movx	a,@r0
      001373 45 F0            [12] 4348 	orl	a,b
      001375 60 03            [24] 4349 	jz	00594$
      001377 02r09rAB         [24] 4350 	ljmp	00259$
      00137A                       4351 00594$:
                                   4352 ;	radio/tdm.c:918: continue; // If we have nothing contructive to send be quiet..
      00137A                       4353 00212$:
                                   4354 ;	radio/tdm.c:924: trailer.window = (uint16_t)(tdm_state_remaining - flight_time_estimate(len+sizeof(trailer)));
      00137A 78r35            [12] 4355 	mov	r0,#_tdm_serial_loop_len_2_234
      00137C E2               [24] 4356 	movx	a,@r0
      00137D 24 04            [12] 4357 	add	a,#0x04
      00137F F5 82            [12] 4358 	mov	dpl,a
      001381 C0 07            [24] 4359 	push	ar7
      001383 C0 06            [24] 4360 	push	ar6
      001385 12r01r60         [24] 4361 	lcall	_flight_time_estimate
      001388 AC 82            [24] 4362 	mov	r4,dpl
      00138A AD 83            [24] 4363 	mov	r5,dph
      00138C D0 06            [24] 4364 	pop	ar6
      00138E D0 07            [24] 4365 	pop	ar7
      001390 78r07            [12] 4366 	mov	r0,#_tdm_state_remaining
      001392 E2               [24] 4367 	movx	a,@r0
      001393 C3               [12] 4368 	clr	c
      001394 9C               [12] 4369 	subb	a,r4
      001395 FC               [12] 4370 	mov	r4,a
      001396 08               [12] 4371 	inc	r0
      001397 E2               [24] 4372 	movx	a,@r0
      001398 9D               [12] 4373 	subb	a,r5
      001399 FD               [12] 4374 	mov	r5,a
      00139A 78r2A            [12] 4375 	mov	r0,#_trailer
      00139C EC               [12] 4376 	mov	a,r4
      00139D F2               [24] 4377 	movx	@r0,a
      00139E 08               [12] 4378 	inc	r0
      00139F ED               [12] 4379 	mov	a,r5
      0013A0 54 1F            [12] 4380 	anl	a,#0x1F
      0013A2 F5 F0            [12] 4381 	mov	b,a
      0013A4 E2               [24] 4382 	movx	a,@r0
      0013A5 54 E0            [12] 4383 	anl	a,#0xE0
      0013A7 45 F0            [12] 4384 	orl	a,b
      0013A9 F2               [24] 4385 	movx	@r0,a
      0013AA                       4386 00219$:
                                   4387 ;	radio/tdm.c:928: if (tdm_state == TDM_SYNC && nodeId == BASE_NODEID) {
      0013AA 78r00            [12] 4388 	mov	r0,#_tdm_state
      0013AC E2               [24] 4389 	movx	a,@r0
      0013AD B4 02 26         [24] 4390 	cjne	a,#0x02,00226$
      0013B0 78r00            [12] 4391 	mov	r0,#_nodeId
      0013B2 E2               [24] 4392 	movx	a,@r0
      0013B3 F5 F0            [12] 4393 	mov	b,a
      0013B5 08               [12] 4394 	inc	r0
      0013B6 E2               [24] 4395 	movx	a,@r0
      0013B7 45 F0            [12] 4396 	orl	a,b
      0013B9 70 1B            [24] 4397 	jnz	00226$
                                   4398 ;	radio/tdm.c:929: trailer.nodeid = get_transmit_channel() | 0x8000;
      0013BB C0 07            [24] 4399 	push	ar7
      0013BD C0 06            [24] 4400 	push	ar6
      0013BF 12r00r00         [24] 4401 	lcall	_get_transmit_channel
      0013C2 AD 82            [24] 4402 	mov	r5,dpl
      0013C4 D0 06            [24] 4403 	pop	ar6
      0013C6 D0 07            [24] 4404 	pop	ar7
      0013C8 7C 00            [12] 4405 	mov	r4,#0x00
      0013CA 43 04 80         [24] 4406 	orl	ar4,#0x80
      0013CD 78r2C            [12] 4407 	mov	r0,#(_trailer + 0x0002)
      0013CF ED               [12] 4408 	mov	a,r5
      0013D0 F2               [24] 4409 	movx	@r0,a
      0013D1 08               [12] 4410 	inc	r0
      0013D2 EC               [12] 4411 	mov	a,r4
      0013D3 F2               [24] 4412 	movx	@r0,a
      0013D4 80 0A            [24] 4413 	sjmp	00227$
      0013D6                       4414 00226$:
                                   4415 ;	radio/tdm.c:931: trailer.nodeid = nodeId;
      0013D6 78r2C            [12] 4416 	mov	r0,#(_trailer + 0x0002)
      0013D8 79r00            [12] 4417 	mov	r1,#_nodeId
      0013DA E3               [24] 4418 	movx	a,@r1
      0013DB F2               [24] 4419 	movx	@r0,a
      0013DC 08               [12] 4420 	inc	r0
      0013DD 09               [12] 4421 	inc	r1
      0013DE E3               [24] 4422 	movx	a,@r1
      0013DF F2               [24] 4423 	movx	@r0,a
      0013E0                       4424 00227$:
                                   4425 ;	radio/tdm.c:934: memcpy(pbuf+len, &trailer, sizeof(trailer));
      0013E0 78r35            [12] 4426 	mov	r0,#_tdm_serial_loop_len_2_234
      0013E2 E2               [24] 4427 	movx	a,@r0
      0013E3 24r00            [12] 4428 	add	a,#_pbuf
      0013E5 FC               [12] 4429 	mov	r4,a
      0013E6 E4               [12] 4430 	clr	a
      0013E7 34s00            [12] 4431 	addc	a,#(_pbuf >> 8)
      0013E9 FD               [12] 4432 	mov	r5,a
      0013EA 7B 00            [12] 4433 	mov	r3,#0x00
      0013EC 90r00r00         [24] 4434 	mov	dptr,#_memcpy_PARM_2
      0013EF 74r2A            [12] 4435 	mov	a,#_trailer
      0013F1 F0               [24] 4436 	movx	@dptr,a
      0013F2 E4               [12] 4437 	clr	a
      0013F3 A3               [24] 4438 	inc	dptr
      0013F4 F0               [24] 4439 	movx	@dptr,a
      0013F5 74 60            [12] 4440 	mov	a,#0x60
      0013F7 A3               [24] 4441 	inc	dptr
      0013F8 F0               [24] 4442 	movx	@dptr,a
      0013F9 90r00r00         [24] 4443 	mov	dptr,#_memcpy_PARM_3
      0013FC 74 04            [12] 4444 	mov	a,#0x04
      0013FE F0               [24] 4445 	movx	@dptr,a
      0013FF E4               [12] 4446 	clr	a
      001400 A3               [24] 4447 	inc	dptr
      001401 F0               [24] 4448 	movx	@dptr,a
      001402 8C 82            [24] 4449 	mov	dpl,r4
      001404 8D 83            [24] 4450 	mov	dph,r5
      001406 8B F0            [24] 4451 	mov	b,r3
      001408 C0 07            [24] 4452 	push	ar7
      00140A C0 06            [24] 4453 	push	ar6
      00140C 12r00r00         [24] 4454 	lcall	_memcpy
      00140F D0 06            [24] 4455 	pop	ar6
      001411 D0 07            [24] 4456 	pop	ar7
                                   4457 ;	radio/tdm.c:937: if(!trailer.command)
      001413 78r2B            [12] 4458 	mov	r0,#(_trailer + 0x0001)
      001415 E2               [24] 4459 	movx	a,@r0
      001416 20 E5 2A         [24] 4460 	jb	acc.5,00234$
                                   4461 ;	radio/tdm.c:939: if (len != 0 && trailer.window != 0) {
      001419 78r35            [12] 4462 	mov	r0,#_tdm_serial_loop_len_2_234
      00141B E2               [24] 4463 	movx	a,@r0
      00141C 60 1E            [24] 4464 	jz	00230$
      00141E 78r2A            [12] 4465 	mov	r0,#_trailer
      001420 E2               [24] 4466 	movx	a,@r0
      001421 FC               [12] 4467 	mov	r4,a
      001422 08               [12] 4468 	inc	r0
      001423 E2               [24] 4469 	movx	a,@r0
      001424 54 1F            [12] 4470 	anl	a,#0x1F
      001426 FD               [12] 4471 	mov	r5,a
      001427 4C               [12] 4472 	orl	a,r4
      001428 60 12            [24] 4473 	jz	00230$
                                   4474 ;	radio/tdm.c:941: ACTIVITY_LED(LED_ON);
      00142A C2 96            [12] 4475 	clr	_LED_RED
                                   4476 ;	radio/tdm.c:942: nodeDestination = paramNodeDestination;
      00142C 78r03            [12] 4477 	mov	r0,#_paramNodeDestination
      00142E E2               [24] 4478 	movx	a,@r0
      00142F FC               [12] 4479 	mov	r4,a
      001430 08               [12] 4480 	inc	r0
      001431 E2               [24] 4481 	movx	a,@r0
      001432 FD               [12] 4482 	mov	r5,a
      001433 78r05            [12] 4483 	mov	r0,#_nodeDestination
      001435 EC               [12] 4484 	mov	a,r4
      001436 F2               [24] 4485 	movx	@r0,a
      001437 08               [12] 4486 	inc	r0
      001438 ED               [12] 4487 	mov	a,r5
      001439 F2               [24] 4488 	movx	@r0,a
      00143A 80 07            [24] 4489 	sjmp	00234$
      00143C                       4490 00230$:
                                   4491 ;	radio/tdm.c:945: nodeDestination = 0xFFFF; 
      00143C 78r05            [12] 4492 	mov	r0,#_nodeDestination
      00143E 74 FF            [12] 4493 	mov	a,#0xFF
      001440 F2               [24] 4494 	movx	@r0,a
      001441 08               [12] 4495 	inc	r0
      001442 F2               [24] 4496 	movx	@r0,a
      001443                       4497 00234$:
                                   4498 ;	radio/tdm.c:950: if(tdm_state == TDM_TRANSMIT) {
      001443 78r00            [12] 4499 	mov	r0,#_tdm_state
      001445 E2               [24] 4500 	movx	a,@r0
      001446 70 0F            [24] 4501 	jnz	00241$
                                   4502 ;	radio/tdm.c:951: if (len == 0) {
      001448 78r35            [12] 4503 	mov	r0,#_tdm_serial_loop_len_2_234
      00144A E2               [24] 4504 	movx	a,@r0
      00144B 70 06            [24] 4505 	jnz	00236$
                                   4506 ;	radio/tdm.c:955: transmit_yield = true;
      00144D D2*03            [12] 4507 	setb	_transmit_yield
                                   4508 ;	radio/tdm.c:956: yielded_slot = true;
      00144F D2*02            [12] 4509 	setb	_yielded_slot
      001451 80 10            [24] 4510 	sjmp	00242$
      001453                       4511 00236$:
                                   4512 ;	radio/tdm.c:959: yielded_slot = false;
      001453 C2*02            [12] 4513 	clr	_yielded_slot
      001455 80 0C            [24] 4514 	sjmp	00242$
      001457                       4515 00241$:
                                   4516 ;	radio/tdm.c:963: else if (tdm_state == TDM_RECEIVE) {
      001457 78r00            [12] 4517 	mov	r0,#_tdm_state
      001459 E2               [24] 4518 	movx	a,@r0
      00145A B4 01 06         [24] 4519 	cjne	a,#0x01,00242$
                                   4520 ;	radio/tdm.c:964: lastTransmitWindow &= 0x7FFF;
      00145D 78r11            [12] 4521 	mov	r0,#(_lastTransmitWindow + 1)
      00145F E2               [24] 4522 	movx	a,@r0
      001460 54 7F            [12] 4523 	anl	a,#0x7F
      001462 F2               [24] 4524 	movx	@r0,a
      001463                       4525 00242$:
                                   4526 ;	radio/tdm.c:972: if (transmit_yield && tdm_state == TDM_RECEIVE) {
      001463 30*03 21         [24] 4527 	jnb	_transmit_yield,00244$
      001466 78r00            [12] 4528 	mov	r0,#_tdm_state
      001468 E2               [24] 4529 	movx	a,@r0
      001469 B4 01 1B         [24] 4530 	cjne	a,#0x01,00244$
                                   4531 ;	radio/tdm.c:973: transmit_yield = false;
      00146C C2*03            [12] 4532 	clr	_transmit_yield
                                   4533 ;	radio/tdm.c:974: transmit_wait = 2*packet_latency;
      00146E 78r13            [12] 4534 	mov	r0,#_packet_latency
      001470 79r17            [12] 4535 	mov	r1,#_transmit_wait
      001472 E2               [24] 4536 	movx	a,@r0
      001473 F3               [24] 4537 	movx	@r1,a
      001474 08               [12] 4538 	inc	r0
      001475 E2               [24] 4539 	movx	a,@r0
      001476 F5 F0            [12] 4540 	mov	b,a
      001478 E3               [24] 4541 	movx	a,@r1
      001479 25 E0            [12] 4542 	add	a,acc
      00147B C5 F0            [12] 4543 	xch	a,b
      00147D 33               [12] 4544 	rlc	a
      00147E C5 F0            [12] 4545 	xch	a,b
      001480 F3               [24] 4546 	movx	@r1,a
      001481 09               [12] 4547 	inc	r1
      001482 E5 F0            [12] 4548 	mov	a,b
      001484 F3               [24] 4549 	movx	@r1,a
      001485 80 0E            [24] 4550 	sjmp	00245$
      001487                       4551 00244$:
                                   4552 ;	radio/tdm.c:981: transmit_wait = packet_latency;
      001487 78r13            [12] 4553 	mov	r0,#_packet_latency
      001489 E2               [24] 4554 	movx	a,@r0
      00148A FC               [12] 4555 	mov	r4,a
      00148B 08               [12] 4556 	inc	r0
      00148C E2               [24] 4557 	movx	a,@r0
      00148D FD               [12] 4558 	mov	r5,a
      00148E 78r17            [12] 4559 	mov	r0,#_transmit_wait
      001490 EC               [12] 4560 	mov	a,r4
      001491 F2               [24] 4561 	movx	@r0,a
      001492 08               [12] 4562 	inc	r0
      001493 ED               [12] 4563 	mov	a,r5
      001494 F2               [24] 4564 	movx	@r0,a
      001495                       4565 00245$:
                                   4566 ;	radio/tdm.c:989: if ((duty_cycle - duty_cycle_offset) != 100) {
      001495 78r19            [12] 4567 	mov	r0,#_duty_cycle
      001497 E2               [24] 4568 	movx	a,@r0
      001498 FC               [12] 4569 	mov	r4,a
      001499 7D 00            [12] 4570 	mov	r5,#0x00
      00149B 78r1A            [12] 4571 	mov	r0,#_duty_cycle_offset
      00149D E2               [24] 4572 	movx	a,@r0
      00149E FA               [12] 4573 	mov	r2,a
      00149F 7B 00            [12] 4574 	mov	r3,#0x00
      0014A1 EC               [12] 4575 	mov	a,r4
      0014A2 C3               [12] 4576 	clr	c
      0014A3 9A               [12] 4577 	subb	a,r2
      0014A4 FC               [12] 4578 	mov	r4,a
      0014A5 ED               [12] 4579 	mov	a,r5
      0014A6 9B               [12] 4580 	subb	a,r3
      0014A7 FD               [12] 4581 	mov	r5,a
      0014A8 BC 64 05         [24] 4582 	cjne	r4,#0x64,00608$
      0014AB BD 00 02         [24] 4583 	cjne	r5,#0x00,00608$
      0014AE 80 1F            [24] 4584 	sjmp	00248$
      0014B0                       4585 00608$:
                                   4586 ;	radio/tdm.c:990: transmitted_ticks += flight_time_estimate(len+sizeof(trailer));
      0014B0 78r35            [12] 4587 	mov	r0,#_tdm_serial_loop_len_2_234
      0014B2 E2               [24] 4588 	movx	a,@r0
      0014B3 24 04            [12] 4589 	add	a,#0x04
      0014B5 F5 82            [12] 4590 	mov	dpl,a
      0014B7 C0 07            [24] 4591 	push	ar7
      0014B9 C0 06            [24] 4592 	push	ar6
      0014BB 12r01r60         [24] 4593 	lcall	_flight_time_estimate
      0014BE AC 82            [24] 4594 	mov	r4,dpl
      0014C0 AD 83            [24] 4595 	mov	r5,dph
      0014C2 D0 06            [24] 4596 	pop	ar6
      0014C4 D0 07            [24] 4597 	pop	ar7
      0014C6 78r1B            [12] 4598 	mov	r0,#_transmitted_ticks
      0014C8 E2               [24] 4599 	movx	a,@r0
      0014C9 2C               [12] 4600 	add	a,r4
      0014CA F2               [24] 4601 	movx	@r0,a
      0014CB 08               [12] 4602 	inc	r0
      0014CC E2               [24] 4603 	movx	a,@r0
      0014CD 3D               [12] 4604 	addc	a,r5
      0014CE F2               [24] 4605 	movx	@r0,a
      0014CF                       4606 00248$:
                                   4607 ;	radio/tdm.c:999: if (!radio_transmit(len + sizeof(trailer), pbuf, nodeDestination, tdm_state_remaining) && len != 0) {
      0014CF 78r35            [12] 4608 	mov	r0,#_tdm_serial_loop_len_2_234
      0014D1 E2               [24] 4609 	movx	a,@r0
      0014D2 24 04            [12] 4610 	add	a,#0x04
      0014D4 FD               [12] 4611 	mov	r5,a
      0014D5 78r00            [12] 4612 	mov	r0,#_radio_transmit_PARM_2
      0014D7 74r00            [12] 4613 	mov	a,#_pbuf
      0014D9 F2               [24] 4614 	movx	@r0,a
      0014DA 08               [12] 4615 	inc	r0
      0014DB 74s00            [12] 4616 	mov	a,#(_pbuf >> 8)
      0014DD F2               [24] 4617 	movx	@r0,a
      0014DE 78r05            [12] 4618 	mov	r0,#_nodeDestination
      0014E0 90r00r00         [24] 4619 	mov	dptr,#_radio_transmit_PARM_3
      0014E3 E2               [24] 4620 	movx	a,@r0
      0014E4 F0               [24] 4621 	movx	@dptr,a
      0014E5 08               [12] 4622 	inc	r0
      0014E6 E2               [24] 4623 	movx	a,@r0
      0014E7 A3               [24] 4624 	inc	dptr
      0014E8 F0               [24] 4625 	movx	@dptr,a
      0014E9 78r07            [12] 4626 	mov	r0,#_tdm_state_remaining
      0014EB 79r00            [12] 4627 	mov	r1,#_radio_transmit_PARM_4
      0014ED E2               [24] 4628 	movx	a,@r0
      0014EE F3               [24] 4629 	movx	@r1,a
      0014EF 08               [12] 4630 	inc	r0
      0014F0 E2               [24] 4631 	movx	a,@r0
      0014F1 09               [12] 4632 	inc	r1
      0014F2 F3               [24] 4633 	movx	@r1,a
      0014F3 8D 82            [24] 4634 	mov	dpl,r5
      0014F5 C0 07            [24] 4635 	push	ar7
      0014F7 C0 06            [24] 4636 	push	ar6
      0014F9 12r00r00         [24] 4637 	lcall	_radio_transmit
      0014FC D0 06            [24] 4638 	pop	ar6
      0014FE D0 07            [24] 4639 	pop	ar7
      001500 40 10            [24] 4640 	jc	00250$
      001502 78r35            [12] 4641 	mov	r0,#_tdm_serial_loop_len_2_234
      001504 E2               [24] 4642 	movx	a,@r0
      001505 60 0B            [24] 4643 	jz	00250$
                                   4644 ;	radio/tdm.c:1000: packet_force_resend();
      001507 C0 07            [24] 4645 	push	ar7
      001509 C0 06            [24] 4646 	push	ar6
      00150B 12r00r00         [24] 4647 	lcall	_packet_force_resend
      00150E D0 06            [24] 4648 	pop	ar6
      001510 D0 07            [24] 4649 	pop	ar7
      001512                       4650 00250$:
                                   4651 ;	radio/tdm.c:1003: if (lbt_rssi != 0) {
      001512 78r1D            [12] 4652 	mov	r0,#_lbt_rssi
      001514 E2               [24] 4653 	movx	a,@r0
      001515 60 0B            [24] 4654 	jz	00253$
                                   4655 ;	radio/tdm.c:1005: lbt_listen_time = 0;
      001517 78r1E            [12] 4656 	mov	r0,#_lbt_listen_time
      001519 E4               [12] 4657 	clr	a
      00151A F2               [24] 4658 	movx	@r0,a
      00151B 08               [12] 4659 	inc	r0
      00151C F2               [24] 4660 	movx	@r0,a
                                   4661 ;	radio/tdm.c:1006: lbt_rand = 0;
      00151D 78r22            [12] 4662 	mov	r0,#_lbt_rand
      00151F F2               [24] 4663 	movx	@r0,a
      001520 08               [12] 4664 	inc	r0
      001521 F2               [24] 4665 	movx	@r0,a
      001522                       4666 00253$:
                                   4667 ;	radio/tdm.c:1010: radio_set_channel(fhop_receive_channel());
      001522 C0 07            [24] 4668 	push	ar7
      001524 C0 06            [24] 4669 	push	ar6
      001526 12r00r00         [24] 4670 	lcall	_fhop_receive_channel
      001529 12r00r00         [24] 4671 	lcall	_radio_set_channel
                                   4672 ;	radio/tdm.c:1013: radio_receiver_on();
      00152C 12r00r00         [24] 4673 	lcall	_radio_receiver_on
      00152F D0 06            [24] 4674 	pop	ar6
      001531 D0 07            [24] 4675 	pop	ar7
                                   4676 ;	radio/tdm.c:1015: if (len != 0 && trailer.window != 0) {
      001533 78r35            [12] 4677 	mov	r0,#_tdm_serial_loop_len_2_234
      001535 E2               [24] 4678 	movx	a,@r0
      001536 70 03            [24] 4679 	jnz	00612$
      001538 02r09rAB         [24] 4680 	ljmp	00259$
      00153B                       4681 00612$:
      00153B 78r2A            [12] 4682 	mov	r0,#_trailer
      00153D E2               [24] 4683 	movx	a,@r0
      00153E FC               [12] 4684 	mov	r4,a
      00153F 08               [12] 4685 	inc	r0
      001540 E2               [24] 4686 	movx	a,@r0
      001541 54 1F            [12] 4687 	anl	a,#0x1F
      001543 FD               [12] 4688 	mov	r5,a
      001544 4C               [12] 4689 	orl	a,r4
      001545 70 03            [24] 4690 	jnz	00613$
      001547 02r09rAB         [24] 4691 	ljmp	00259$
      00154A                       4692 00613$:
                                   4693 ;	radio/tdm.c:1016: ACTIVITY_LED(LED_OFF);
      00154A D2 96            [12] 4694 	setb	_LED_RED
      00154C 02r09rAB         [24] 4695 	ljmp	00259$
                                   4696 ;------------------------------------------------------------
                                   4697 ;Allocation info for local variables in function 'tdm_state_sync'
                                   4698 ;------------------------------------------------------------
                                   4699 ;	radio/tdm.c:1022: tdm_state_sync()
                                   4700 ;	-----------------------------------------
                                   4701 ;	 function tdm_state_sync
                                   4702 ;	-----------------------------------------
      00154F                       4703 _tdm_state_sync:
                                   4704 ;	radio/tdm.c:1024: return received_sync;
      00154F A2*05            [12] 4705 	mov	c,_received_sync
      001551 22               [24] 4706 	ret
                                   4707 ;------------------------------------------------------------
                                   4708 ;Allocation info for local variables in function 'tdm_set_node_count'
                                   4709 ;------------------------------------------------------------
                                   4710 ;	radio/tdm.c:1030: tdm_set_node_count(__pdata uint16_t count)
                                   4711 ;	-----------------------------------------
                                   4712 ;	 function tdm_set_node_count
                                   4713 ;	-----------------------------------------
      001552                       4714 _tdm_set_node_count:
      001552 AE 82            [24] 4715 	mov	r6,dpl
      001554 AF 83            [24] 4716 	mov	r7,dph
                                   4717 ;	radio/tdm.c:1032: nodeCount = count + 1; // add 1 for the sync channel
      001556 78r30            [12] 4718 	mov	r0,#_nodeCount
      001558 74 01            [12] 4719 	mov	a,#0x01
      00155A 2E               [12] 4720 	add	a,r6
      00155B F2               [24] 4721 	movx	@r0,a
      00155C E4               [12] 4722 	clr	a
      00155D 3F               [12] 4723 	addc	a,r7
      00155E 08               [12] 4724 	inc	r0
      00155F F2               [24] 4725 	movx	@r0,a
      001560 22               [24] 4726 	ret
                                   4727 ;------------------------------------------------------------
                                   4728 ;Allocation info for local variables in function 'tdm_set_node_destination'
                                   4729 ;------------------------------------------------------------
                                   4730 ;	radio/tdm.c:1038: tdm_set_node_destination(__pdata uint16_t destination)
                                   4731 ;	-----------------------------------------
                                   4732 ;	 function tdm_set_node_destination
                                   4733 ;	-----------------------------------------
      001561                       4734 _tdm_set_node_destination:
      001561 AE 82            [24] 4735 	mov	r6,dpl
      001563 AF 83            [24] 4736 	mov	r7,dph
                                   4737 ;	radio/tdm.c:1040: paramNodeDestination = destination;
      001565 78r03            [12] 4738 	mov	r0,#_paramNodeDestination
      001567 EE               [12] 4739 	mov	a,r6
      001568 F2               [24] 4740 	movx	@r0,a
      001569 08               [12] 4741 	inc	r0
      00156A EF               [12] 4742 	mov	a,r7
      00156B F2               [24] 4743 	movx	@r0,a
      00156C 22               [24] 4744 	ret
                                   4745 ;------------------------------------------------------------
                                   4746 ;Allocation info for local variables in function 'tdm_set_sync_any'
                                   4747 ;------------------------------------------------------------
                                   4748 ;	radio/tdm.c:1044: tdm_set_sync_any(__pdata uint8_t any)
                                   4749 ;	-----------------------------------------
                                   4750 ;	 function tdm_set_sync_any
                                   4751 ;	-----------------------------------------
      00156D                       4752 _tdm_set_sync_any:
                                   4753 ;	radio/tdm.c:1046: sync_any = any;
      00156D E5 82            [12] 4754 	mov	a,dpl
      00156F 24 FF            [12] 4755 	add	a,#0xff
      001571 92*06            [24] 4756 	mov	_sync_any,c
      001573 22               [24] 4757 	ret
                                   4758 ;------------------------------------------------------------
                                   4759 ;Allocation info for local variables in function 'tdm_init'
                                   4760 ;------------------------------------------------------------
                                   4761 ;sloc0                     Allocated with name '_tdm_init_sloc0_1_0'
                                   4762 ;sloc1                     Allocated with name '_tdm_init_sloc1_1_0'
                                   4763 ;sloc2                     Allocated with name '_tdm_init_sloc2_1_0'
                                   4764 ;------------------------------------------------------------
                                   4765 ;	radio/tdm.c:1163: tdm_init(void)
                                   4766 ;	-----------------------------------------
                                   4767 ;	 function tdm_init
                                   4768 ;	-----------------------------------------
      001574                       4769 _tdm_init:
                                   4770 ;	radio/tdm.c:1166: __pdata uint8_t air_rate = radio_air_rate();
      001574 12r00r00         [24] 4771 	lcall	_radio_air_rate
      001577 AF 82            [24] 4772 	mov	r7,dpl
                                   4773 ;	radio/tdm.c:1175: ticks_per_byte = (8+(8000000UL/(air_rate*1000UL)))/16;
      001579 90r00r00         [24] 4774 	mov	dptr,#__mullong_PARM_2
      00157C EF               [12] 4775 	mov	a,r7
      00157D F0               [24] 4776 	movx	@dptr,a
      00157E E4               [12] 4777 	clr	a
      00157F A3               [24] 4778 	inc	dptr
      001580 F0               [24] 4779 	movx	@dptr,a
      001581 A3               [24] 4780 	inc	dptr
      001582 F0               [24] 4781 	movx	@dptr,a
      001583 A3               [24] 4782 	inc	dptr
      001584 F0               [24] 4783 	movx	@dptr,a
      001585 90 03 E8         [24] 4784 	mov	dptr,#0x03E8
      001588 E4               [12] 4785 	clr	a
      001589 F5 F0            [12] 4786 	mov	b,a
      00158B 12r00r00         [24] 4787 	lcall	__mullong
      00158E AC 82            [24] 4788 	mov	r4,dpl
      001590 AD 83            [24] 4789 	mov	r5,dph
      001592 AE F0            [24] 4790 	mov	r6,b
      001594 FF               [12] 4791 	mov	r7,a
      001595 90r00r00         [24] 4792 	mov	dptr,#__divulong_PARM_2
      001598 EC               [12] 4793 	mov	a,r4
      001599 F0               [24] 4794 	movx	@dptr,a
      00159A ED               [12] 4795 	mov	a,r5
      00159B A3               [24] 4796 	inc	dptr
      00159C F0               [24] 4797 	movx	@dptr,a
      00159D EE               [12] 4798 	mov	a,r6
      00159E A3               [24] 4799 	inc	dptr
      00159F F0               [24] 4800 	movx	@dptr,a
      0015A0 EF               [12] 4801 	mov	a,r7
      0015A1 A3               [24] 4802 	inc	dptr
      0015A2 F0               [24] 4803 	movx	@dptr,a
      0015A3 90 12 00         [24] 4804 	mov	dptr,#0x1200
      0015A6 75 F0 7A         [24] 4805 	mov	b,#0x7A
      0015A9 E4               [12] 4806 	clr	a
      0015AA 12r00r00         [24] 4807 	lcall	__divulong
      0015AD AC 82            [24] 4808 	mov	r4,dpl
      0015AF AD 83            [24] 4809 	mov	r5,dph
      0015B1 AE F0            [24] 4810 	mov	r6,b
      0015B3 FF               [12] 4811 	mov	r7,a
      0015B4 74 08            [12] 4812 	mov	a,#0x08
      0015B6 2C               [12] 4813 	add	a,r4
      0015B7 F5*1A            [12] 4814 	mov	_tdm_init_sloc0_1_0,a
      0015B9 E4               [12] 4815 	clr	a
      0015BA 3D               [12] 4816 	addc	a,r5
      0015BB F5*1B            [12] 4817 	mov	(_tdm_init_sloc0_1_0 + 1),a
      0015BD E4               [12] 4818 	clr	a
      0015BE 3E               [12] 4819 	addc	a,r6
      0015BF F5*1C            [12] 4820 	mov	(_tdm_init_sloc0_1_0 + 2),a
      0015C1 E4               [12] 4821 	clr	a
      0015C2 3F               [12] 4822 	addc	a,r7
      0015C3 F5*1D            [12] 4823 	mov	(_tdm_init_sloc0_1_0 + 3),a
      0015C5 AA*1A            [24] 4824 	mov	r2,_tdm_init_sloc0_1_0
      0015C7 E5*1B            [12] 4825 	mov	a,(_tdm_init_sloc0_1_0 + 1)
      0015C9 C4               [12] 4826 	swap	a
      0015CA CA               [12] 4827 	xch	a,r2
      0015CB C4               [12] 4828 	swap	a
      0015CC 54 0F            [12] 4829 	anl	a,#0x0F
      0015CE 6A               [12] 4830 	xrl	a,r2
      0015CF CA               [12] 4831 	xch	a,r2
      0015D0 54 0F            [12] 4832 	anl	a,#0x0F
      0015D2 CA               [12] 4833 	xch	a,r2
      0015D3 6A               [12] 4834 	xrl	a,r2
      0015D4 CA               [12] 4835 	xch	a,r2
      0015D5 FB               [12] 4836 	mov	r3,a
      0015D6 E5*1C            [12] 4837 	mov	a,(_tdm_init_sloc0_1_0 + 2)
      0015D8 C4               [12] 4838 	swap	a
      0015D9 54 F0            [12] 4839 	anl	a,#0xF0
      0015DB 4B               [12] 4840 	orl	a,r3
      0015DC FB               [12] 4841 	mov	r3,a
      0015DD AE*1C            [24] 4842 	mov	r6,(_tdm_init_sloc0_1_0 + 2)
      0015DF E5*1D            [12] 4843 	mov	a,(_tdm_init_sloc0_1_0 + 3)
      0015E1 C4               [12] 4844 	swap	a
      0015E2 CE               [12] 4845 	xch	a,r6
      0015E3 C4               [12] 4846 	swap	a
      0015E4 54 0F            [12] 4847 	anl	a,#0x0F
      0015E6 6E               [12] 4848 	xrl	a,r6
      0015E7 CE               [12] 4849 	xch	a,r6
      0015E8 54 0F            [12] 4850 	anl	a,#0x0F
      0015EA CE               [12] 4851 	xch	a,r6
      0015EB 6E               [12] 4852 	xrl	a,r6
      0015EC CE               [12] 4853 	xch	a,r6
      0015ED 78r15            [12] 4854 	mov	r0,#_ticks_per_byte
      0015EF EA               [12] 4855 	mov	a,r2
      0015F0 F2               [24] 4856 	movx	@r0,a
      0015F1 08               [12] 4857 	inc	r0
      0015F2 EB               [12] 4858 	mov	a,r3
      0015F3 F2               [24] 4859 	movx	@r0,a
                                   4860 ;	radio/tdm.c:1178: if(10000UL*ticks_per_byte < (8+(8000000UL/(air_rate*1000UL)))*625) {
      0015F4 90r00r00         [24] 4861 	mov	dptr,#__mullong_PARM_2
      0015F7 EA               [12] 4862 	mov	a,r2
      0015F8 F0               [24] 4863 	movx	@dptr,a
      0015F9 EB               [12] 4864 	mov	a,r3
      0015FA A3               [24] 4865 	inc	dptr
      0015FB F0               [24] 4866 	movx	@dptr,a
      0015FC E4               [12] 4867 	clr	a
      0015FD A3               [24] 4868 	inc	dptr
      0015FE F0               [24] 4869 	movx	@dptr,a
      0015FF A3               [24] 4870 	inc	dptr
      001600 F0               [24] 4871 	movx	@dptr,a
      001601 90 27 10         [24] 4872 	mov	dptr,#0x2710
      001604 E4               [12] 4873 	clr	a
      001605 F5 F0            [12] 4874 	mov	b,a
      001607 C0 03            [24] 4875 	push	ar3
      001609 C0 02            [24] 4876 	push	ar2
      00160B 12r00r00         [24] 4877 	lcall	__mullong
      00160E 85 82*1E         [24] 4878 	mov	_tdm_init_sloc1_1_0,dpl
      001611 85 83*1F         [24] 4879 	mov	(_tdm_init_sloc1_1_0 + 1),dph
      001614 85 F0*20         [24] 4880 	mov	(_tdm_init_sloc1_1_0 + 2),b
      001617 F5*21            [12] 4881 	mov	(_tdm_init_sloc1_1_0 + 3),a
      001619 90r00r00         [24] 4882 	mov	dptr,#__mullong_PARM_2
      00161C E5*1A            [12] 4883 	mov	a,_tdm_init_sloc0_1_0
      00161E F0               [24] 4884 	movx	@dptr,a
      00161F E5*1B            [12] 4885 	mov	a,(_tdm_init_sloc0_1_0 + 1)
      001621 A3               [24] 4886 	inc	dptr
      001622 F0               [24] 4887 	movx	@dptr,a
      001623 E5*1C            [12] 4888 	mov	a,(_tdm_init_sloc0_1_0 + 2)
      001625 A3               [24] 4889 	inc	dptr
      001626 F0               [24] 4890 	movx	@dptr,a
      001627 E5*1D            [12] 4891 	mov	a,(_tdm_init_sloc0_1_0 + 3)
      001629 A3               [24] 4892 	inc	dptr
      00162A F0               [24] 4893 	movx	@dptr,a
      00162B 90 02 71         [24] 4894 	mov	dptr,#0x0271
      00162E E4               [12] 4895 	clr	a
      00162F F5 F0            [12] 4896 	mov	b,a
      001631 12r00r00         [24] 4897 	lcall	__mullong
      001634 AC 82            [24] 4898 	mov	r4,dpl
      001636 AD 83            [24] 4899 	mov	r5,dph
      001638 AE F0            [24] 4900 	mov	r6,b
      00163A FF               [12] 4901 	mov	r7,a
      00163B D0 02            [24] 4902 	pop	ar2
      00163D D0 03            [24] 4903 	pop	ar3
      00163F C3               [12] 4904 	clr	c
      001640 E5*1E            [12] 4905 	mov	a,_tdm_init_sloc1_1_0
      001642 9C               [12] 4906 	subb	a,r4
      001643 E5*1F            [12] 4907 	mov	a,(_tdm_init_sloc1_1_0 + 1)
      001645 9D               [12] 4908 	subb	a,r5
      001646 E5*20            [12] 4909 	mov	a,(_tdm_init_sloc1_1_0 + 2)
      001648 9E               [12] 4910 	subb	a,r6
      001649 E5*21            [12] 4911 	mov	a,(_tdm_init_sloc1_1_0 + 3)
      00164B 9F               [12] 4912 	subb	a,r7
      00164C 50 0A            [24] 4913 	jnc	00102$
                                   4914 ;	radio/tdm.c:1179: ticks_per_byte += 1;
      00164E 78r15            [12] 4915 	mov	r0,#_ticks_per_byte
      001650 74 01            [12] 4916 	mov	a,#0x01
      001652 2A               [12] 4917 	add	a,r2
      001653 F2               [24] 4918 	movx	@r0,a
      001654 E4               [12] 4919 	clr	a
      001655 3B               [12] 4920 	addc	a,r3
      001656 08               [12] 4921 	inc	r0
      001657 F2               [24] 4922 	movx	@r0,a
      001658                       4923 00102$:
                                   4924 ;	radio/tdm.c:1187: packet_latency = (8+(10/2)) * ticks_per_byte + 13;
      001658 78r15            [12] 4925 	mov	r0,#_ticks_per_byte
      00165A 90r00r00         [24] 4926 	mov	dptr,#__mulint_PARM_2
      00165D E2               [24] 4927 	movx	a,@r0
      00165E F0               [24] 4928 	movx	@dptr,a
      00165F 08               [12] 4929 	inc	r0
      001660 E2               [24] 4930 	movx	a,@r0
      001661 A3               [24] 4931 	inc	dptr
      001662 F0               [24] 4932 	movx	@dptr,a
      001663 90 00 0D         [24] 4933 	mov	dptr,#0x000D
      001666 12r00r00         [24] 4934 	lcall	__mulint
      001669 E5 82            [12] 4935 	mov	a,dpl
      00166B 85 83 F0         [24] 4936 	mov	b,dph
      00166E 78r13            [12] 4937 	mov	r0,#_packet_latency
      001670 24 0D            [12] 4938 	add	a,#0x0D
      001672 F2               [24] 4939 	movx	@r0,a
      001673 E4               [12] 4940 	clr	a
      001674 35 F0            [12] 4941 	addc	a,b
      001676 08               [12] 4942 	inc	r0
      001677 F2               [24] 4943 	movx	@r0,a
                                   4944 ;	radio/tdm.c:1189: if (feature_golay) {
      001678 30*00 34         [24] 4945 	jnb	_feature_golay,00104$
                                   4946 ;	radio/tdm.c:1190: max_data_packet_length = (MAX_PACKET_LENGTH/2) - (6+sizeof(trailer));
      00167B 78r0D            [12] 4947 	mov	r0,#_max_data_packet_length
      00167D 74 74            [12] 4948 	mov	a,#0x74
      00167F F2               [24] 4949 	movx	@r0,a
                                   4950 ;	radio/tdm.c:1193: ticks_per_byte *= 2;
      001680 78r16            [12] 4951 	mov	r0,#(_ticks_per_byte + 1)
      001682 E2               [24] 4952 	movx	a,@r0
      001683 F5 F0            [12] 4953 	mov	b,a
      001685 18               [12] 4954 	dec	r0
      001686 E2               [24] 4955 	movx	a,@r0
      001687 25 E0            [12] 4956 	add	a,acc
      001689 C5 F0            [12] 4957 	xch	a,b
      00168B 33               [12] 4958 	rlc	a
      00168C C5 F0            [12] 4959 	xch	a,b
      00168E F2               [24] 4960 	movx	@r0,a
      00168F 08               [12] 4961 	inc	r0
      001690 E5 F0            [12] 4962 	mov	a,b
      001692 F2               [24] 4963 	movx	@r0,a
                                   4964 ;	radio/tdm.c:1196: packet_latency += 4*ticks_per_byte;
      001693 78r15            [12] 4965 	mov	r0,#_ticks_per_byte
      001695 E2               [24] 4966 	movx	a,@r0
      001696 FE               [12] 4967 	mov	r6,a
      001697 08               [12] 4968 	inc	r0
      001698 E2               [24] 4969 	movx	a,@r0
      001699 CE               [12] 4970 	xch	a,r6
      00169A 25 E0            [12] 4971 	add	a,acc
      00169C CE               [12] 4972 	xch	a,r6
      00169D 33               [12] 4973 	rlc	a
      00169E CE               [12] 4974 	xch	a,r6
      00169F 25 E0            [12] 4975 	add	a,acc
      0016A1 CE               [12] 4976 	xch	a,r6
      0016A2 33               [12] 4977 	rlc	a
      0016A3 FF               [12] 4978 	mov	r7,a
      0016A4 78r13            [12] 4979 	mov	r0,#_packet_latency
      0016A6 E2               [24] 4980 	movx	a,@r0
      0016A7 2E               [12] 4981 	add	a,r6
      0016A8 F2               [24] 4982 	movx	@r0,a
      0016A9 08               [12] 4983 	inc	r0
      0016AA E2               [24] 4984 	movx	a,@r0
      0016AB 3F               [12] 4985 	addc	a,r7
      0016AC F2               [24] 4986 	movx	@r0,a
      0016AD 80 05            [24] 4987 	sjmp	00105$
      0016AF                       4988 00104$:
                                   4989 ;	radio/tdm.c:1198: max_data_packet_length = MAX_PACKET_LENGTH - sizeof(trailer);
      0016AF 78r0D            [12] 4990 	mov	r0,#_max_data_packet_length
      0016B1 74 F8            [12] 4991 	mov	a,#0xF8
      0016B3 F2               [24] 4992 	movx	@r0,a
      0016B4                       4993 00105$:
                                   4994 ;	radio/tdm.c:1202: silence_period = 2*packet_latency;
      0016B4 78r13            [12] 4995 	mov	r0,#_packet_latency
      0016B6 E2               [24] 4996 	movx	a,@r0
      0016B7 F5*1A            [12] 4997 	mov	_tdm_init_sloc0_1_0,a
      0016B9 08               [12] 4998 	inc	r0
      0016BA E2               [24] 4999 	movx	a,@r0
      0016BB C5*1A            [12] 5000 	xch	a,_tdm_init_sloc0_1_0
      0016BD 25 E0            [12] 5001 	add	a,acc
      0016BF C5*1A            [12] 5002 	xch	a,_tdm_init_sloc0_1_0
      0016C1 33               [12] 5003 	rlc	a
      0016C2 F5*1B            [12] 5004 	mov	(_tdm_init_sloc0_1_0 + 1),a
      0016C4 78r0E            [12] 5005 	mov	r0,#_silence_period
      0016C6 E5*1A            [12] 5006 	mov	a,_tdm_init_sloc0_1_0
      0016C8 F2               [24] 5007 	movx	@r0,a
      0016C9 08               [12] 5008 	inc	r0
      0016CA E5*1B            [12] 5009 	mov	a,(_tdm_init_sloc0_1_0 + 1)
      0016CC F2               [24] 5010 	movx	@r0,a
                                   5011 ;	radio/tdm.c:1205: window_width = 2*((max_data_packet_length*(uint32_t)ticks_per_byte)+packet_latency) + silence_period + packet_latency;
      0016CD 78r15            [12] 5012 	mov	r0,#_ticks_per_byte
      0016CF 90r00r00         [24] 5013 	mov	dptr,#__mullong_PARM_2
      0016D2 E2               [24] 5014 	movx	a,@r0
      0016D3 F0               [24] 5015 	movx	@dptr,a
      0016D4 08               [12] 5016 	inc	r0
      0016D5 E2               [24] 5017 	movx	a,@r0
      0016D6 A3               [24] 5018 	inc	dptr
      0016D7 F0               [24] 5019 	movx	@dptr,a
      0016D8 E4               [12] 5020 	clr	a
      0016D9 A3               [24] 5021 	inc	dptr
      0016DA F0               [24] 5022 	movx	@dptr,a
      0016DB A3               [24] 5023 	inc	dptr
      0016DC F0               [24] 5024 	movx	@dptr,a
      0016DD 78r0D            [12] 5025 	mov	r0,#_max_data_packet_length
      0016DF E2               [24] 5026 	movx	a,@r0
      0016E0 FA               [12] 5027 	mov	r2,a
      0016E1 7B 00            [12] 5028 	mov	r3,#0x00
      0016E3 7C 00            [12] 5029 	mov	r4,#0x00
      0016E5 7D 00            [12] 5030 	mov	r5,#0x00
      0016E7 8A 82            [24] 5031 	mov	dpl,r2
      0016E9 8B 83            [24] 5032 	mov	dph,r3
      0016EB 8C F0            [24] 5033 	mov	b,r4
      0016ED ED               [12] 5034 	mov	a,r5
      0016EE 12r00r00         [24] 5035 	lcall	__mullong
      0016F1 85 82*1E         [24] 5036 	mov	_tdm_init_sloc1_1_0,dpl
      0016F4 85 83*1F         [24] 5037 	mov	(_tdm_init_sloc1_1_0 + 1),dph
      0016F7 85 F0*20         [24] 5038 	mov	(_tdm_init_sloc1_1_0 + 2),b
      0016FA F5*21            [12] 5039 	mov	(_tdm_init_sloc1_1_0 + 3),a
      0016FC 78r13            [12] 5040 	mov	r0,#_packet_latency
      0016FE E2               [24] 5041 	movx	a,@r0
      0016FF F5*22            [12] 5042 	mov	_tdm_init_sloc2_1_0,a
      001701 08               [12] 5043 	inc	r0
      001702 E2               [24] 5044 	movx	a,@r0
      001703 F5*23            [12] 5045 	mov	(_tdm_init_sloc2_1_0 + 1),a
      001705 E4               [12] 5046 	clr	a
      001706 F5*24            [12] 5047 	mov	(_tdm_init_sloc2_1_0 + 2),a
      001708 F5*25            [12] 5048 	mov	(_tdm_init_sloc2_1_0 + 3),a
      00170A E5*22            [12] 5049 	mov	a,_tdm_init_sloc2_1_0
      00170C 25*1E            [12] 5050 	add	a,_tdm_init_sloc1_1_0
      00170E FC               [12] 5051 	mov	r4,a
      00170F E5*23            [12] 5052 	mov	a,(_tdm_init_sloc2_1_0 + 1)
      001711 35*1F            [12] 5053 	addc	a,(_tdm_init_sloc1_1_0 + 1)
      001713 FD               [12] 5054 	mov	r5,a
      001714 E5*24            [12] 5055 	mov	a,(_tdm_init_sloc2_1_0 + 2)
      001716 35*20            [12] 5056 	addc	a,(_tdm_init_sloc1_1_0 + 2)
      001718 FE               [12] 5057 	mov	r6,a
      001719 E5*25            [12] 5058 	mov	a,(_tdm_init_sloc2_1_0 + 3)
      00171B 35*21            [12] 5059 	addc	a,(_tdm_init_sloc1_1_0 + 3)
      00171D FF               [12] 5060 	mov	r7,a
      00171E EC               [12] 5061 	mov	a,r4
      00171F 2C               [12] 5062 	add	a,r4
      001720 F5*1E            [12] 5063 	mov	_tdm_init_sloc1_1_0,a
      001722 ED               [12] 5064 	mov	a,r5
      001723 33               [12] 5065 	rlc	a
      001724 F5*1F            [12] 5066 	mov	(_tdm_init_sloc1_1_0 + 1),a
      001726 EE               [12] 5067 	mov	a,r6
      001727 33               [12] 5068 	rlc	a
      001728 F5*20            [12] 5069 	mov	(_tdm_init_sloc1_1_0 + 2),a
      00172A EF               [12] 5070 	mov	a,r7
      00172B 33               [12] 5071 	rlc	a
      00172C F5*21            [12] 5072 	mov	(_tdm_init_sloc1_1_0 + 3),a
      00172E AA*1A            [24] 5073 	mov	r2,_tdm_init_sloc0_1_0
      001730 AB*1B            [24] 5074 	mov	r3,(_tdm_init_sloc0_1_0 + 1)
      001732 E4               [12] 5075 	clr	a
      001733 FE               [12] 5076 	mov	r6,a
      001734 FF               [12] 5077 	mov	r7,a
      001735 EA               [12] 5078 	mov	a,r2
      001736 25*1E            [12] 5079 	add	a,_tdm_init_sloc1_1_0
      001738 FA               [12] 5080 	mov	r2,a
      001739 EB               [12] 5081 	mov	a,r3
      00173A 35*1F            [12] 5082 	addc	a,(_tdm_init_sloc1_1_0 + 1)
      00173C FB               [12] 5083 	mov	r3,a
      00173D EE               [12] 5084 	mov	a,r6
      00173E 35*20            [12] 5085 	addc	a,(_tdm_init_sloc1_1_0 + 2)
      001740 FE               [12] 5086 	mov	r6,a
      001741 EF               [12] 5087 	mov	a,r7
      001742 35*21            [12] 5088 	addc	a,(_tdm_init_sloc1_1_0 + 3)
      001744 FF               [12] 5089 	mov	r7,a
      001745 E5*22            [12] 5090 	mov	a,_tdm_init_sloc2_1_0
      001747 2A               [12] 5091 	add	a,r2
      001748 FC               [12] 5092 	mov	r4,a
      001749 E5*23            [12] 5093 	mov	a,(_tdm_init_sloc2_1_0 + 1)
      00174B 3B               [12] 5094 	addc	a,r3
      00174C FD               [12] 5095 	mov	r5,a
      00174D E5*24            [12] 5096 	mov	a,(_tdm_init_sloc2_1_0 + 2)
      00174F 3E               [12] 5097 	addc	a,r6
      001750 FE               [12] 5098 	mov	r6,a
      001751 E5*25            [12] 5099 	mov	a,(_tdm_init_sloc2_1_0 + 3)
      001753 3F               [12] 5100 	addc	a,r7
      001754 FF               [12] 5101 	mov	r7,a
                                   5102 ;	radio/tdm.c:1208: if (lbt_rssi != 0) {
      001755 78r1D            [12] 5103 	mov	r0,#_lbt_rssi
      001757 E2               [24] 5104 	movx	a,@r0
      001758 60 35            [24] 5105 	jz	00107$
                                   5106 ;	radio/tdm.c:1210: lbt_min_time = LBT_MIN_TIME_USEC/16;
      00175A 78r20            [12] 5107 	mov	r0,#_lbt_min_time
      00175C 74 38            [12] 5108 	mov	a,#0x38
      00175E F2               [24] 5109 	movx	@r0,a
      00175F 08               [12] 5110 	inc	r0
      001760 74 01            [12] 5111 	mov	a,#0x01
      001762 F2               [24] 5112 	movx	@r0,a
                                   5113 ;	radio/tdm.c:1211: window_width = constrain(window_width, 3*lbt_min_time, window_width);
      001763 78r00            [12] 5114 	mov	r0,#_constrain_PARM_2
      001765 74 A8            [12] 5115 	mov	a,#0xA8
      001767 F2               [24] 5116 	movx	@r0,a
      001768 08               [12] 5117 	inc	r0
      001769 74 03            [12] 5118 	mov	a,#0x03
      00176B F2               [24] 5119 	movx	@r0,a
      00176C 08               [12] 5120 	inc	r0
      00176D E4               [12] 5121 	clr	a
      00176E F2               [24] 5122 	movx	@r0,a
      00176F 08               [12] 5123 	inc	r0
      001770 F2               [24] 5124 	movx	@r0,a
      001771 78r00            [12] 5125 	mov	r0,#_constrain_PARM_3
      001773 EC               [12] 5126 	mov	a,r4
      001774 F2               [24] 5127 	movx	@r0,a
      001775 08               [12] 5128 	inc	r0
      001776 ED               [12] 5129 	mov	a,r5
      001777 F2               [24] 5130 	movx	@r0,a
      001778 08               [12] 5131 	inc	r0
      001779 EE               [12] 5132 	mov	a,r6
      00177A F2               [24] 5133 	movx	@r0,a
      00177B 08               [12] 5134 	inc	r0
      00177C EF               [12] 5135 	mov	a,r7
      00177D F2               [24] 5136 	movx	@r0,a
      00177E 8C 82            [24] 5137 	mov	dpl,r4
      001780 8D 83            [24] 5138 	mov	dph,r5
      001782 8E F0            [24] 5139 	mov	b,r6
      001784 EF               [12] 5140 	mov	a,r7
      001785 12r00r00         [24] 5141 	lcall	_constrain
      001788 AC 82            [24] 5142 	mov	r4,dpl
      00178A AD 83            [24] 5143 	mov	r5,dph
      00178C AE F0            [24] 5144 	mov	r6,b
      00178E FF               [12] 5145 	mov	r7,a
      00178F                       5146 00107$:
                                   5147 ;	radio/tdm.c:1215: if (window_width > 0x1FFF) {
      00178F C3               [12] 5148 	clr	c
      001790 74 FF            [12] 5149 	mov	a,#0xFF
      001792 9C               [12] 5150 	subb	a,r4
      001793 74 1F            [12] 5151 	mov	a,#0x1F
      001795 9D               [12] 5152 	subb	a,r5
      001796 E4               [12] 5153 	clr	a
      001797 9E               [12] 5154 	subb	a,r6
      001798 E4               [12] 5155 	clr	a
      001799 9F               [12] 5156 	subb	a,r7
      00179A 50 08            [24] 5157 	jnc	00109$
                                   5158 ;	radio/tdm.c:1216: window_width = 0x1FFF;
      00179C 7C FF            [12] 5159 	mov	r4,#0xFF
      00179E 7D 1F            [12] 5160 	mov	r5,#0x1F
      0017A0 7E 00            [12] 5161 	mov	r6,#0x00
      0017A2 7F 00            [12] 5162 	mov	r7,#0x00
      0017A4                       5163 00109$:
                                   5164 ;	radio/tdm.c:1220: if (window_width >= REGULATORY_MAX_WINDOW) {
      0017A4 C3               [12] 5165 	clr	c
      0017A5 EC               [12] 5166 	mov	a,r4
      0017A6 94 A8            [12] 5167 	subb	a,#0xA8
      0017A8 ED               [12] 5168 	mov	a,r5
      0017A9 94 61            [12] 5169 	subb	a,#0x61
      0017AB EE               [12] 5170 	mov	a,r6
      0017AC 94 00            [12] 5171 	subb	a,#0x00
      0017AE EF               [12] 5172 	mov	a,r7
      0017AF 94 00            [12] 5173 	subb	a,#0x00
      0017B1 40 08            [24] 5174 	jc	00111$
                                   5175 ;	radio/tdm.c:1221: window_width = REGULATORY_MAX_WINDOW;
      0017B3 7C A8            [12] 5176 	mov	r4,#0xA8
      0017B5 7D 61            [12] 5177 	mov	r5,#0x61
      0017B7 7E 00            [12] 5178 	mov	r6,#0x00
      0017B9 7F 00            [12] 5179 	mov	r7,#0x00
      0017BB                       5180 00111$:
                                   5181 ;	radio/tdm.c:1224: tx_window_width = window_width;
      0017BB 78r09            [12] 5182 	mov	r0,#_tx_window_width
      0017BD EC               [12] 5183 	mov	a,r4
      0017BE F2               [24] 5184 	movx	@r0,a
      0017BF 08               [12] 5185 	inc	r0
      0017C0 ED               [12] 5186 	mov	a,r5
      0017C1 F2               [24] 5187 	movx	@r0,a
                                   5188 ;	radio/tdm.c:1227: window_width = 4*(((sizeof(trailer))*(uint32_t)ticks_per_byte)+packet_latency) + silence_period + packet_latency;
      0017C2 78r15            [12] 5189 	mov	r0,#_ticks_per_byte
      0017C4 E2               [24] 5190 	movx	a,@r0
      0017C5 F5*22            [12] 5191 	mov	_tdm_init_sloc2_1_0,a
      0017C7 08               [12] 5192 	inc	r0
      0017C8 E2               [24] 5193 	movx	a,@r0
      0017C9 F5*23            [12] 5194 	mov	(_tdm_init_sloc2_1_0 + 1),a
      0017CB E4               [12] 5195 	clr	a
      0017CC F5*24            [12] 5196 	mov	(_tdm_init_sloc2_1_0 + 2),a
      0017CE F5*25            [12] 5197 	mov	(_tdm_init_sloc2_1_0 + 3),a
      0017D0 E5*22            [12] 5198 	mov	a,_tdm_init_sloc2_1_0
      0017D2 25*22            [12] 5199 	add	a,_tdm_init_sloc2_1_0
      0017D4 F5*22            [12] 5200 	mov	_tdm_init_sloc2_1_0,a
      0017D6 E5*23            [12] 5201 	mov	a,(_tdm_init_sloc2_1_0 + 1)
      0017D8 33               [12] 5202 	rlc	a
      0017D9 F5*23            [12] 5203 	mov	(_tdm_init_sloc2_1_0 + 1),a
      0017DB E5*24            [12] 5204 	mov	a,(_tdm_init_sloc2_1_0 + 2)
      0017DD 33               [12] 5205 	rlc	a
      0017DE F5*24            [12] 5206 	mov	(_tdm_init_sloc2_1_0 + 2),a
      0017E0 E5*25            [12] 5207 	mov	a,(_tdm_init_sloc2_1_0 + 3)
      0017E2 33               [12] 5208 	rlc	a
      0017E3 F5*25            [12] 5209 	mov	(_tdm_init_sloc2_1_0 + 3),a
      0017E5 E5*22            [12] 5210 	mov	a,_tdm_init_sloc2_1_0
      0017E7 25*22            [12] 5211 	add	a,_tdm_init_sloc2_1_0
      0017E9 F5*22            [12] 5212 	mov	_tdm_init_sloc2_1_0,a
      0017EB E5*23            [12] 5213 	mov	a,(_tdm_init_sloc2_1_0 + 1)
      0017ED 33               [12] 5214 	rlc	a
      0017EE F5*23            [12] 5215 	mov	(_tdm_init_sloc2_1_0 + 1),a
      0017F0 E5*24            [12] 5216 	mov	a,(_tdm_init_sloc2_1_0 + 2)
      0017F2 33               [12] 5217 	rlc	a
      0017F3 F5*24            [12] 5218 	mov	(_tdm_init_sloc2_1_0 + 2),a
      0017F5 E5*25            [12] 5219 	mov	a,(_tdm_init_sloc2_1_0 + 3)
      0017F7 33               [12] 5220 	rlc	a
      0017F8 F5*25            [12] 5221 	mov	(_tdm_init_sloc2_1_0 + 3),a
      0017FA 78r13            [12] 5222 	mov	r0,#_packet_latency
      0017FC E2               [24] 5223 	movx	a,@r0
      0017FD F5*1E            [12] 5224 	mov	_tdm_init_sloc1_1_0,a
      0017FF 08               [12] 5225 	inc	r0
      001800 E2               [24] 5226 	movx	a,@r0
      001801 F5*1F            [12] 5227 	mov	(_tdm_init_sloc1_1_0 + 1),a
      001803 E4               [12] 5228 	clr	a
      001804 F5*20            [12] 5229 	mov	(_tdm_init_sloc1_1_0 + 2),a
      001806 F5*21            [12] 5230 	mov	(_tdm_init_sloc1_1_0 + 3),a
      001808 E5*1E            [12] 5231 	mov	a,_tdm_init_sloc1_1_0
      00180A 25*22            [12] 5232 	add	a,_tdm_init_sloc2_1_0
      00180C F5*22            [12] 5233 	mov	_tdm_init_sloc2_1_0,a
      00180E E5*1F            [12] 5234 	mov	a,(_tdm_init_sloc1_1_0 + 1)
      001810 35*23            [12] 5235 	addc	a,(_tdm_init_sloc2_1_0 + 1)
      001812 F5*23            [12] 5236 	mov	(_tdm_init_sloc2_1_0 + 1),a
      001814 E5*20            [12] 5237 	mov	a,(_tdm_init_sloc1_1_0 + 2)
      001816 35*24            [12] 5238 	addc	a,(_tdm_init_sloc2_1_0 + 2)
      001818 F5*24            [12] 5239 	mov	(_tdm_init_sloc2_1_0 + 2),a
      00181A E5*21            [12] 5240 	mov	a,(_tdm_init_sloc1_1_0 + 3)
      00181C 35*25            [12] 5241 	addc	a,(_tdm_init_sloc2_1_0 + 3)
      00181E F5*25            [12] 5242 	mov	(_tdm_init_sloc2_1_0 + 3),a
      001820 E5*22            [12] 5243 	mov	a,_tdm_init_sloc2_1_0
      001822 25*22            [12] 5244 	add	a,_tdm_init_sloc2_1_0
      001824 F5*22            [12] 5245 	mov	_tdm_init_sloc2_1_0,a
      001826 E5*23            [12] 5246 	mov	a,(_tdm_init_sloc2_1_0 + 1)
      001828 33               [12] 5247 	rlc	a
      001829 F5*23            [12] 5248 	mov	(_tdm_init_sloc2_1_0 + 1),a
      00182B E5*24            [12] 5249 	mov	a,(_tdm_init_sloc2_1_0 + 2)
      00182D 33               [12] 5250 	rlc	a
      00182E F5*24            [12] 5251 	mov	(_tdm_init_sloc2_1_0 + 2),a
      001830 E5*25            [12] 5252 	mov	a,(_tdm_init_sloc2_1_0 + 3)
      001832 33               [12] 5253 	rlc	a
      001833 F5*25            [12] 5254 	mov	(_tdm_init_sloc2_1_0 + 3),a
      001835 E5*22            [12] 5255 	mov	a,_tdm_init_sloc2_1_0
      001837 25*22            [12] 5256 	add	a,_tdm_init_sloc2_1_0
      001839 F5*22            [12] 5257 	mov	_tdm_init_sloc2_1_0,a
      00183B E5*23            [12] 5258 	mov	a,(_tdm_init_sloc2_1_0 + 1)
      00183D 33               [12] 5259 	rlc	a
      00183E F5*23            [12] 5260 	mov	(_tdm_init_sloc2_1_0 + 1),a
      001840 E5*24            [12] 5261 	mov	a,(_tdm_init_sloc2_1_0 + 2)
      001842 33               [12] 5262 	rlc	a
      001843 F5*24            [12] 5263 	mov	(_tdm_init_sloc2_1_0 + 2),a
      001845 E5*25            [12] 5264 	mov	a,(_tdm_init_sloc2_1_0 + 3)
      001847 33               [12] 5265 	rlc	a
      001848 F5*25            [12] 5266 	mov	(_tdm_init_sloc2_1_0 + 3),a
      00184A 78r0E            [12] 5267 	mov	r0,#_silence_period
      00184C E2               [24] 5268 	movx	a,@r0
      00184D F5*1A            [12] 5269 	mov	_tdm_init_sloc0_1_0,a
      00184F 08               [12] 5270 	inc	r0
      001850 E2               [24] 5271 	movx	a,@r0
      001851 F5*1B            [12] 5272 	mov	(_tdm_init_sloc0_1_0 + 1),a
      001853 E4               [12] 5273 	clr	a
      001854 F5*1C            [12] 5274 	mov	(_tdm_init_sloc0_1_0 + 2),a
      001856 F5*1D            [12] 5275 	mov	(_tdm_init_sloc0_1_0 + 3),a
      001858 E5*1A            [12] 5276 	mov	a,_tdm_init_sloc0_1_0
      00185A 25*22            [12] 5277 	add	a,_tdm_init_sloc2_1_0
      00185C F5*22            [12] 5278 	mov	_tdm_init_sloc2_1_0,a
      00185E E5*1B            [12] 5279 	mov	a,(_tdm_init_sloc0_1_0 + 1)
      001860 35*23            [12] 5280 	addc	a,(_tdm_init_sloc2_1_0 + 1)
      001862 F5*23            [12] 5281 	mov	(_tdm_init_sloc2_1_0 + 1),a
      001864 E5*1C            [12] 5282 	mov	a,(_tdm_init_sloc0_1_0 + 2)
      001866 35*24            [12] 5283 	addc	a,(_tdm_init_sloc2_1_0 + 2)
      001868 F5*24            [12] 5284 	mov	(_tdm_init_sloc2_1_0 + 2),a
      00186A E5*1D            [12] 5285 	mov	a,(_tdm_init_sloc0_1_0 + 3)
      00186C 35*25            [12] 5286 	addc	a,(_tdm_init_sloc2_1_0 + 3)
      00186E F5*25            [12] 5287 	mov	(_tdm_init_sloc2_1_0 + 3),a
      001870 E5*1E            [12] 5288 	mov	a,_tdm_init_sloc1_1_0
      001872 25*22            [12] 5289 	add	a,_tdm_init_sloc2_1_0
      001874 FC               [12] 5290 	mov	r4,a
      001875 E5*1F            [12] 5291 	mov	a,(_tdm_init_sloc1_1_0 + 1)
      001877 35*23            [12] 5292 	addc	a,(_tdm_init_sloc2_1_0 + 1)
      001879 FD               [12] 5293 	mov	r5,a
      00187A E5*20            [12] 5294 	mov	a,(_tdm_init_sloc1_1_0 + 2)
      00187C 35*24            [12] 5295 	addc	a,(_tdm_init_sloc2_1_0 + 2)
      00187E E5*21            [12] 5296 	mov	a,(_tdm_init_sloc1_1_0 + 3)
      001880 35*25            [12] 5297 	addc	a,(_tdm_init_sloc2_1_0 + 3)
                                   5298 ;	radio/tdm.c:1228: tx_sync_width = window_width;
      001882 78r0B            [12] 5299 	mov	r0,#_tx_sync_width
      001884 EC               [12] 5300 	mov	a,r4
      001885 F2               [24] 5301 	movx	@r0,a
      001886 08               [12] 5302 	inc	r0
      001887 ED               [12] 5303 	mov	a,r5
      001888 F2               [24] 5304 	movx	@r0,a
                                   5305 ;	radio/tdm.c:1233: packet_latency += ((settings.preamble_length-10)/2) * ticks_per_byte;
      001889 78r0B            [12] 5306 	mov	r0,#(_settings + 0x000b)
      00188B E2               [24] 5307 	movx	a,@r0
      00188C 7E 00            [12] 5308 	mov	r6,#0x00
      00188E 24 F6            [12] 5309 	add	a,#0xF6
      001890 FF               [12] 5310 	mov	r7,a
      001891 EE               [12] 5311 	mov	a,r6
      001892 34 FF            [12] 5312 	addc	a,#0xFF
      001894 FE               [12] 5313 	mov	r6,a
      001895 90r00r00         [24] 5314 	mov	dptr,#__divsint_PARM_2
      001898 74 02            [12] 5315 	mov	a,#0x02
      00189A F0               [24] 5316 	movx	@dptr,a
      00189B E4               [12] 5317 	clr	a
      00189C A3               [24] 5318 	inc	dptr
      00189D F0               [24] 5319 	movx	@dptr,a
      00189E 8F 82            [24] 5320 	mov	dpl,r7
      0018A0 8E 83            [24] 5321 	mov	dph,r6
      0018A2 12r00r00         [24] 5322 	lcall	__divsint
      0018A5 AE 82            [24] 5323 	mov	r6,dpl
      0018A7 AF 83            [24] 5324 	mov	r7,dph
      0018A9 78r15            [12] 5325 	mov	r0,#_ticks_per_byte
      0018AB 90r00r00         [24] 5326 	mov	dptr,#__mulint_PARM_2
      0018AE E2               [24] 5327 	movx	a,@r0
      0018AF F0               [24] 5328 	movx	@dptr,a
      0018B0 08               [12] 5329 	inc	r0
      0018B1 E2               [24] 5330 	movx	a,@r0
      0018B2 A3               [24] 5331 	inc	dptr
      0018B3 F0               [24] 5332 	movx	@dptr,a
      0018B4 8E 82            [24] 5333 	mov	dpl,r6
      0018B6 8F 83            [24] 5334 	mov	dph,r7
      0018B8 12r00r00         [24] 5335 	lcall	__mulint
      0018BB AE 82            [24] 5336 	mov	r6,dpl
      0018BD AF 83            [24] 5337 	mov	r7,dph
      0018BF 78r13            [12] 5338 	mov	r0,#_packet_latency
      0018C1 E2               [24] 5339 	movx	a,@r0
      0018C2 2E               [12] 5340 	add	a,r6
      0018C3 F2               [24] 5341 	movx	@r0,a
      0018C4 08               [12] 5342 	inc	r0
      0018C5 E2               [24] 5343 	movx	a,@r0
      0018C6 3F               [12] 5344 	addc	a,r7
      0018C7 F2               [24] 5345 	movx	@r0,a
                                   5346 ;	radio/tdm.c:1237: i = (tx_window_width - packet_latency) / ticks_per_byte;
      0018C8 78r09            [12] 5347 	mov	r0,#_tx_window_width
      0018CA 79r13            [12] 5348 	mov	r1,#_packet_latency
      0018CC E3               [24] 5349 	movx	a,@r1
      0018CD F5 F0            [12] 5350 	mov	b,a
      0018CF C3               [12] 5351 	clr	c
      0018D0 E2               [24] 5352 	movx	a,@r0
      0018D1 95 F0            [12] 5353 	subb	a,b
      0018D3 FE               [12] 5354 	mov	r6,a
      0018D4 09               [12] 5355 	inc	r1
      0018D5 E3               [24] 5356 	movx	a,@r1
      0018D6 F5 F0            [12] 5357 	mov	b,a
      0018D8 08               [12] 5358 	inc	r0
      0018D9 E2               [24] 5359 	movx	a,@r0
      0018DA 95 F0            [12] 5360 	subb	a,b
      0018DC FF               [12] 5361 	mov	r7,a
      0018DD 78r15            [12] 5362 	mov	r0,#_ticks_per_byte
      0018DF 90r00r00         [24] 5363 	mov	dptr,#__divuint_PARM_2
      0018E2 E2               [24] 5364 	movx	a,@r0
      0018E3 F0               [24] 5365 	movx	@dptr,a
      0018E4 08               [12] 5366 	inc	r0
      0018E5 E2               [24] 5367 	movx	a,@r0
      0018E6 A3               [24] 5368 	inc	dptr
      0018E7 F0               [24] 5369 	movx	@dptr,a
      0018E8 8E 82            [24] 5370 	mov	dpl,r6
      0018EA 8F 83            [24] 5371 	mov	dph,r7
      0018EC 12r00r00         [24] 5372 	lcall	__divuint
      0018EF AE 82            [24] 5373 	mov	r6,dpl
      0018F1 AF 83            [24] 5374 	mov	r7,dph
                                   5375 ;	radio/tdm.c:1238: if (i > max_data_packet_length) {
      0018F3 78r0D            [12] 5376 	mov	r0,#_max_data_packet_length
      0018F5 E2               [24] 5377 	movx	a,@r0
      0018F6 FC               [12] 5378 	mov	r4,a
      0018F7 7D 00            [12] 5379 	mov	r5,#0x00
      0018F9 C3               [12] 5380 	clr	c
      0018FA EC               [12] 5381 	mov	a,r4
      0018FB 9E               [12] 5382 	subb	a,r6
      0018FC ED               [12] 5383 	mov	a,r5
      0018FD 9F               [12] 5384 	subb	a,r7
      0018FE 50 04            [24] 5385 	jnc	00113$
                                   5386 ;	radio/tdm.c:1239: i = max_data_packet_length;
      001900 8C 06            [24] 5387 	mov	ar6,r4
      001902 8D 07            [24] 5388 	mov	ar7,r5
      001904                       5389 00113$:
                                   5390 ;	radio/tdm.c:1241: packet_set_max_xmit(i);
      001904 8E 82            [24] 5391 	mov	dpl,r6
      001906 12r00r00         [24] 5392 	lcall	_packet_set_max_xmit
                                   5393 ;	radio/tdm.c:1244: trailer.nodeid  = 0xFFFF;
      001909 78r2C            [12] 5394 	mov	r0,#(_trailer + 0x0002)
      00190B 74 FF            [12] 5395 	mov	a,#0xFF
      00190D F2               [24] 5396 	movx	@r0,a
      00190E 08               [12] 5397 	inc	r0
      00190F F2               [24] 5398 	movx	@r0,a
                                   5399 ;	radio/tdm.c:1245: nodeTransmitSeq = 0xFFFF;
      001910 78r01            [12] 5400 	mov	r0,#_nodeTransmitSeq
      001912 F2               [24] 5401 	movx	@r0,a
      001913 08               [12] 5402 	inc	r0
      001914 F2               [24] 5403 	movx	@r0,a
                                   5404 ;	radio/tdm.c:1246: memset(remote_statistics, 0, sizeof(remote_statistics));
      001915 90r00r00         [24] 5405 	mov	dptr,#_memset_PARM_2
      001918 E4               [12] 5406 	clr	a
      001919 F0               [24] 5407 	movx	@dptr,a
      00191A 90r00r00         [24] 5408 	mov	dptr,#_memset_PARM_3
      00191D 74 10            [12] 5409 	mov	a,#0x10
      00191F F0               [24] 5410 	movx	@dptr,a
      001920 E4               [12] 5411 	clr	a
      001921 A3               [24] 5412 	inc	dptr
      001922 F0               [24] 5413 	movx	@dptr,a
      001923 90r00r00         [24] 5414 	mov	dptr,#_remote_statistics
      001926 75 F0 00         [24] 5415 	mov	b,#0x00
      001929 12r00r00         [24] 5416 	lcall	_memset
                                   5417 ;	radio/tdm.c:1247: memset(statistics, 0, sizeof(statistics));
      00192C 90r00r00         [24] 5418 	mov	dptr,#_memset_PARM_2
      00192F E4               [12] 5419 	clr	a
      001930 F0               [24] 5420 	movx	@dptr,a
      001931 90r00r00         [24] 5421 	mov	dptr,#_memset_PARM_3
      001934 74 10            [12] 5422 	mov	a,#0x10
      001936 F0               [24] 5423 	movx	@dptr,a
      001937 E4               [12] 5424 	clr	a
      001938 A3               [24] 5425 	inc	dptr
      001939 F0               [24] 5426 	movx	@dptr,a
      00193A 90r00r00         [24] 5427 	mov	dptr,#_statistics
      00193D 75 F0 00         [24] 5428 	mov	b,#0x00
      001940 12r00r00         [24] 5429 	lcall	_memset
                                   5430 ;	radio/tdm.c:1255: ati5_id = PARAM_MAX;
      001943 78r29            [12] 5431 	mov	r0,#_ati5_id
      001945 74 13            [12] 5432 	mov	a,#0x13
      001947 F2               [24] 5433 	movx	@r0,a
                                   5434 ;	radio/tdm.c:1256: unlock_count = 6;
      001948 90r01r0D         [24] 5435 	mov	dptr,#_unlock_count
      00194B 74 06            [12] 5436 	mov	a,#0x06
      00194D F0               [24] 5437 	movx	@dptr,a
                                   5438 ;	radio/tdm.c:1257: RADIO_LED(LED_OFF);
      00194E D2 95            [12] 5439 	setb	_LED_GREEN
                                   5440 ;	radio/tdm.c:1260: received_packet = false;
      001950 C2*01            [12] 5441 	clr	_received_packet
      001952 22               [24] 5442 	ret
                                   5443 ;------------------------------------------------------------
                                   5444 ;Allocation info for local variables in function 'tdm_report_timing'
                                   5445 ;------------------------------------------------------------
                                   5446 ;	radio/tdm.c:1275: tdm_report_timing(void)
                                   5447 ;	-----------------------------------------
                                   5448 ;	 function tdm_report_timing
                                   5449 ;	-----------------------------------------
      001953                       5450 _tdm_report_timing:
                                   5451 ;	radio/tdm.c:1277: printf("[%u] silence_period: %u\n", nodeId, (unsigned)silence_period); delay_msec(1);
      001953 78r0E            [12] 5452 	mov	r0,#_silence_period
      001955 E2               [24] 5453 	movx	a,@r0
      001956 C0 E0            [24] 5454 	push	acc
      001958 08               [12] 5455 	inc	r0
      001959 E2               [24] 5456 	movx	a,@r0
      00195A C0 E0            [24] 5457 	push	acc
      00195C 78r00            [12] 5458 	mov	r0,#_nodeId
      00195E E2               [24] 5459 	movx	a,@r0
      00195F C0 E0            [24] 5460 	push	acc
      001961 08               [12] 5461 	inc	r0
      001962 E2               [24] 5462 	movx	a,@r0
      001963 C0 E0            [24] 5463 	push	acc
      001965 74rB9            [12] 5464 	mov	a,#___str_6
      001967 C0 E0            [24] 5465 	push	acc
      001969 74s00            [12] 5466 	mov	a,#(___str_6 >> 8)
      00196B C0 E0            [24] 5467 	push	acc
      00196D 74 80            [12] 5468 	mov	a,#0x80
      00196F C0 E0            [24] 5469 	push	acc
      001971 12r00r00         [24] 5470 	lcall	_printfl
      001974 E5 81            [12] 5471 	mov	a,sp
      001976 24 F9            [12] 5472 	add	a,#0xf9
      001978 F5 81            [12] 5473 	mov	sp,a
      00197A 90 00 01         [24] 5474 	mov	dptr,#0x0001
      00197D 12r00r00         [24] 5475 	lcall	_delay_msec
                                   5476 ;	radio/tdm.c:1278: printf("[%u] tx_window_width: %u\n", nodeId, (unsigned)tx_window_width); delay_msec(1);
      001980 78r09            [12] 5477 	mov	r0,#_tx_window_width
      001982 E2               [24] 5478 	movx	a,@r0
      001983 C0 E0            [24] 5479 	push	acc
      001985 08               [12] 5480 	inc	r0
      001986 E2               [24] 5481 	movx	a,@r0
      001987 C0 E0            [24] 5482 	push	acc
      001989 78r00            [12] 5483 	mov	r0,#_nodeId
      00198B E2               [24] 5484 	movx	a,@r0
      00198C C0 E0            [24] 5485 	push	acc
      00198E 08               [12] 5486 	inc	r0
      00198F E2               [24] 5487 	movx	a,@r0
      001990 C0 E0            [24] 5488 	push	acc
      001992 74rD2            [12] 5489 	mov	a,#___str_7
      001994 C0 E0            [24] 5490 	push	acc
      001996 74s00            [12] 5491 	mov	a,#(___str_7 >> 8)
      001998 C0 E0            [24] 5492 	push	acc
      00199A 74 80            [12] 5493 	mov	a,#0x80
      00199C C0 E0            [24] 5494 	push	acc
      00199E 12r00r00         [24] 5495 	lcall	_printfl
      0019A1 E5 81            [12] 5496 	mov	a,sp
      0019A3 24 F9            [12] 5497 	add	a,#0xf9
      0019A5 F5 81            [12] 5498 	mov	sp,a
      0019A7 90 00 01         [24] 5499 	mov	dptr,#0x0001
      0019AA 12r00r00         [24] 5500 	lcall	_delay_msec
                                   5501 ;	radio/tdm.c:1279: printf("[%u] max_data_packet_length: %u\n", nodeId, (unsigned)max_data_packet_length); delay_msec(1);
      0019AD 78r0D            [12] 5502 	mov	r0,#_max_data_packet_length
      0019AF E2               [24] 5503 	movx	a,@r0
      0019B0 FE               [12] 5504 	mov	r6,a
      0019B1 7F 00            [12] 5505 	mov	r7,#0x00
      0019B3 C0 06            [24] 5506 	push	ar6
      0019B5 C0 07            [24] 5507 	push	ar7
      0019B7 78r00            [12] 5508 	mov	r0,#_nodeId
      0019B9 E2               [24] 5509 	movx	a,@r0
      0019BA C0 E0            [24] 5510 	push	acc
      0019BC 08               [12] 5511 	inc	r0
      0019BD E2               [24] 5512 	movx	a,@r0
      0019BE C0 E0            [24] 5513 	push	acc
      0019C0 74rEC            [12] 5514 	mov	a,#___str_8
      0019C2 C0 E0            [24] 5515 	push	acc
      0019C4 74s00            [12] 5516 	mov	a,#(___str_8 >> 8)
      0019C6 C0 E0            [24] 5517 	push	acc
      0019C8 74 80            [12] 5518 	mov	a,#0x80
      0019CA C0 E0            [24] 5519 	push	acc
      0019CC 12r00r00         [24] 5520 	lcall	_printfl
      0019CF E5 81            [12] 5521 	mov	a,sp
      0019D1 24 F9            [12] 5522 	add	a,#0xf9
      0019D3 F5 81            [12] 5523 	mov	sp,a
      0019D5 90 00 01         [24] 5524 	mov	dptr,#0x0001
      0019D8 02r00r00         [24] 5525 	ljmp	_delay_msec
                                   5526 	.area CSEG    (CODE)
                                   5527 	.area CONST   (CODE)
      000000                       5528 ___str_0:
      000000 5B 25 75 5D 20 4C 2F  5529 	.ascii "[%u] L/R RSSI: %u/%u  L/R noise: %u/%u"
             52 20 52 53 53 49 3A
             20 25 75 2F 25 75 20
             20 4C 2F 52 20 6E 6F
             69 73 65 3A 20 25 75
             2F 25 75
      000026 0A                    5530 	.db 0x0A
      000027 00                    5531 	.db 0x00
      000028                       5532 ___str_1:
      000028 5B 25 75 5D 20 70 6B  5533 	.ascii "[%u] pkts: %u txe=%u rxe=%u stx=%u srx=%u ecc=%u/%u temp=%d "
             74 73 3A 20 25 75 20
             74 78 65 3D 25 75 20
             72 78 65 3D 25 75 20
             73 74 78 3D 25 75 20
             73 72 78 3D 25 75 20
             65 63 63 3D 25 75 2F
             25 75 20 74 65 6D 70
             3D 25 64 20
      000064 64 63 6F 3D 25 75     5534 	.ascii "dco=%u"
      00006A 0A                    5535 	.db 0x0A
      00006B 00                    5536 	.db 0x00
      00006C                       5537 ___str_2:
      00006C 73 74 61 63 6B 20 62  5538 	.ascii "stack blown"
             6C 6F 77 6E
      000077 0A                    5539 	.db 0x0A
      000078 00                    5540 	.db 0x00
      000079                       5541 ___str_3:
      000079 70 64 61 74 61 20 63  5542 	.ascii "pdata canary changed"
             61 6E 61 72 79 20 63
             68 61 6E 67 65 64
      00008D 0A                    5543 	.db 0x0A
      00008E 00                    5544 	.db 0x00
      00008F                       5545 ___str_4:
      00008F 49 6E 76 61 6C 69 64  5546 	.ascii "Invalid length.. %u"
             20 6C 65 6E 67 74 68
             2E 2E 20 25 75
      0000A2 0A                    5547 	.db 0x0A
      0000A3 00                    5548 	.db 0x00
      0000A4                       5549 ___str_5:
      0000A4 6F 76 65 72 73 69 7A  5550 	.ascii "oversized tdm packet"
             65 64 20 74 64 6D 20
             70 61 63 6B 65 74
      0000B8 00                    5551 	.db 0x00
      0000B9                       5552 ___str_6:
      0000B9 5B 25 75 5D 20 73 69  5553 	.ascii "[%u] silence_period: %u"
             6C 65 6E 63 65 5F 70
             65 72 69 6F 64 3A 20
             25 75
      0000D0 0A                    5554 	.db 0x0A
      0000D1 00                    5555 	.db 0x00
      0000D2                       5556 ___str_7:
      0000D2 5B 25 75 5D 20 74 78  5557 	.ascii "[%u] tx_window_width: %u"
             5F 77 69 6E 64 6F 77
             5F 77 69 64 74 68 3A
             20 25 75
      0000EA 0A                    5558 	.db 0x0A
      0000EB 00                    5559 	.db 0x00
      0000EC                       5560 ___str_8:
      0000EC 5B 25 75 5D 20 6D 61  5561 	.ascii "[%u] max_data_packet_length: %u"
             78 5F 64 61 74 61 5F
             70 61 63 6B 65 74 5F
             6C 65 6E 67 74 68 3A
             20 25 75
      00010B 0A                    5562 	.db 0x0A
      00010C 00                    5563 	.db 0x00
                                   5564 	.area XINIT   (CODE)
                                   5565 	.area CABS    (ABS,CODE)
