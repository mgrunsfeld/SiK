                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.5.0 #9253 (Mar 24 2016) (Linux)
                                      4 ; This file was generated Mon Jul 23 11:34:43 2018
                                      5 ;--------------------------------------------------------
                                      6 	.module radio
                                      7 	.optsdcc -mmcs51 --model-large
                                      8 	
                                      9 ;--------------------------------------------------------
                                     10 ; Public variables in this module
                                     11 ;--------------------------------------------------------
                                     12 	.globl _Receiver_ISR
                                     13 	.globl _delay_msec
                                     14 	.globl _delay_expired
                                     15 	.globl _delay_set
                                     16 	.globl _timer2_tick
                                     17 	.globl _panic
                                     18 	.globl _param_get
                                     19 	.globl _memcpy
                                     20 	.globl _SDN
                                     21 	.globl _NSS1
                                     22 	.globl _IRQ
                                     23 	.globl _PIN_ENABLE
                                     24 	.globl _PIN_CONFIG
                                     25 	.globl _LED_GREEN
                                     26 	.globl _LED_RED
                                     27 	.globl _SPI0EN
                                     28 	.globl _TXBMT0
                                     29 	.globl _NSS0MD0
                                     30 	.globl _NSS0MD1
                                     31 	.globl _RXOVRN0
                                     32 	.globl _MODF0
                                     33 	.globl _WCOL0
                                     34 	.globl _SPIF0
                                     35 	.globl _AD0CM0
                                     36 	.globl _AD0CM1
                                     37 	.globl _AD0CM2
                                     38 	.globl _AD0WINT
                                     39 	.globl _AD0BUSY
                                     40 	.globl _AD0INT
                                     41 	.globl _BURSTEN
                                     42 	.globl _AD0EN
                                     43 	.globl _CCF0
                                     44 	.globl _CCF1
                                     45 	.globl _CCF2
                                     46 	.globl _CCF3
                                     47 	.globl _CCF4
                                     48 	.globl _CCF5
                                     49 	.globl _CR
                                     50 	.globl _CF
                                     51 	.globl _P
                                     52 	.globl _F1
                                     53 	.globl _OV
                                     54 	.globl _RS0
                                     55 	.globl _RS1
                                     56 	.globl _F0
                                     57 	.globl _AC
                                     58 	.globl _CY
                                     59 	.globl _T2XCLK
                                     60 	.globl _T2RCLK
                                     61 	.globl _TR2
                                     62 	.globl _T2SPLIT
                                     63 	.globl _TF2CEN
                                     64 	.globl _TF2LEN
                                     65 	.globl _TF2L
                                     66 	.globl _TF2H
                                     67 	.globl _SI
                                     68 	.globl _ACK
                                     69 	.globl _ARBLOST
                                     70 	.globl _ACKRQ
                                     71 	.globl _STO
                                     72 	.globl _STA
                                     73 	.globl _TXMODE
                                     74 	.globl _MASTER
                                     75 	.globl _PX0
                                     76 	.globl _PT0
                                     77 	.globl _PX1
                                     78 	.globl _PT1
                                     79 	.globl _PS0
                                     80 	.globl _PT2
                                     81 	.globl _PSPI0
                                     82 	.globl _SPI1EN
                                     83 	.globl _TXBMT1
                                     84 	.globl _NSS1MD0
                                     85 	.globl _NSS1MD1
                                     86 	.globl _RXOVRN1
                                     87 	.globl _MODF1
                                     88 	.globl _WCOL1
                                     89 	.globl _SPIF1
                                     90 	.globl _EX0
                                     91 	.globl _ET0
                                     92 	.globl _EX1
                                     93 	.globl _ET1
                                     94 	.globl _ES0
                                     95 	.globl _ET2
                                     96 	.globl _ESPI0
                                     97 	.globl _EA
                                     98 	.globl _RI0
                                     99 	.globl _TI0
                                    100 	.globl _RB80
                                    101 	.globl _TB80
                                    102 	.globl _REN0
                                    103 	.globl _MCE0
                                    104 	.globl _S0MODE
                                    105 	.globl _CRC0VAL
                                    106 	.globl _CRC0INIT
                                    107 	.globl _CRC0SEL
                                    108 	.globl _IT0
                                    109 	.globl _IE0
                                    110 	.globl _IT1
                                    111 	.globl _IE1
                                    112 	.globl _TR0
                                    113 	.globl _TF0
                                    114 	.globl _TR1
                                    115 	.globl _TF1
                                    116 	.globl _PCA0CP4
                                    117 	.globl _PCA0CP0
                                    118 	.globl _PCA0
                                    119 	.globl _PCA0CP3
                                    120 	.globl _PCA0CP2
                                    121 	.globl _PCA0CP1
                                    122 	.globl _PCA0CP5
                                    123 	.globl _TMR2
                                    124 	.globl _TMR2RL
                                    125 	.globl _ADC0LT
                                    126 	.globl _ADC0GT
                                    127 	.globl _ADC0
                                    128 	.globl _TMR3
                                    129 	.globl _TMR3RL
                                    130 	.globl _TOFF
                                    131 	.globl _DP
                                    132 	.globl _VDM0CN
                                    133 	.globl _PCA0CPH4
                                    134 	.globl _PCA0CPL4
                                    135 	.globl _PCA0CPH0
                                    136 	.globl _PCA0CPL0
                                    137 	.globl _PCA0H
                                    138 	.globl _PCA0L
                                    139 	.globl _SPI0CN
                                    140 	.globl _EIP2
                                    141 	.globl _EIP1
                                    142 	.globl _SMB0ADM
                                    143 	.globl _SMB0ADR
                                    144 	.globl _P2MDIN
                                    145 	.globl _P1MDIN
                                    146 	.globl _P0MDIN
                                    147 	.globl _B
                                    148 	.globl _RSTSRC
                                    149 	.globl _PCA0CPH3
                                    150 	.globl _PCA0CPL3
                                    151 	.globl _PCA0CPH2
                                    152 	.globl _PCA0CPL2
                                    153 	.globl _PCA0CPH1
                                    154 	.globl _PCA0CPL1
                                    155 	.globl _ADC0CN
                                    156 	.globl _EIE2
                                    157 	.globl _EIE1
                                    158 	.globl _FLWR
                                    159 	.globl _IT01CF
                                    160 	.globl _XBR2
                                    161 	.globl _XBR1
                                    162 	.globl _XBR0
                                    163 	.globl _ACC
                                    164 	.globl _PCA0PWM
                                    165 	.globl _PCA0CPM4
                                    166 	.globl _PCA0CPM3
                                    167 	.globl _PCA0CPM2
                                    168 	.globl _PCA0CPM1
                                    169 	.globl _PCA0CPM0
                                    170 	.globl _PCA0MD
                                    171 	.globl _PCA0CN
                                    172 	.globl _P0MAT
                                    173 	.globl _P2SKIP
                                    174 	.globl _P1SKIP
                                    175 	.globl _P0SKIP
                                    176 	.globl _PCA0CPH5
                                    177 	.globl _PCA0CPL5
                                    178 	.globl _REF0CN
                                    179 	.globl _PSW
                                    180 	.globl _P1MAT
                                    181 	.globl _PCA0CPM5
                                    182 	.globl _TMR2H
                                    183 	.globl _TMR2L
                                    184 	.globl _TMR2RLH
                                    185 	.globl _TMR2RLL
                                    186 	.globl _REG0CN
                                    187 	.globl _TMR2CN
                                    188 	.globl _P0MASK
                                    189 	.globl _ADC0LTH
                                    190 	.globl _ADC0LTL
                                    191 	.globl _ADC0GTH
                                    192 	.globl _ADC0GTL
                                    193 	.globl _SMB0DAT
                                    194 	.globl _SMB0CF
                                    195 	.globl _SMB0CN
                                    196 	.globl _P1MASK
                                    197 	.globl _ADC0H
                                    198 	.globl _ADC0L
                                    199 	.globl _ADC0TK
                                    200 	.globl _ADC0CF
                                    201 	.globl _ADC0MX
                                    202 	.globl _ADC0PWR
                                    203 	.globl _ADC0AC
                                    204 	.globl _IREF0CN
                                    205 	.globl _IP
                                    206 	.globl _FLKEY
                                    207 	.globl _FLSCL
                                    208 	.globl _PMU0CF
                                    209 	.globl _OSCICL
                                    210 	.globl _OSCICN
                                    211 	.globl _OSCXCN
                                    212 	.globl _SPI1CN
                                    213 	.globl _ONESHOT
                                    214 	.globl _EMI0TC
                                    215 	.globl _RTC0KEY
                                    216 	.globl _RTC0DAT
                                    217 	.globl _RTC0ADR
                                    218 	.globl _EMI0CF
                                    219 	.globl _EMI0CN
                                    220 	.globl _CLKSEL
                                    221 	.globl _IE
                                    222 	.globl _SFRPAGE
                                    223 	.globl _P2DRV
                                    224 	.globl _P2MDOUT
                                    225 	.globl _P1DRV
                                    226 	.globl _P1MDOUT
                                    227 	.globl _P0DRV
                                    228 	.globl _P0MDOUT
                                    229 	.globl _SPI0DAT
                                    230 	.globl _SPI0CKR
                                    231 	.globl _SPI0CFG
                                    232 	.globl _P2
                                    233 	.globl _CPT0MX
                                    234 	.globl _CPT1MX
                                    235 	.globl _CPT0MD
                                    236 	.globl _CPT1MD
                                    237 	.globl _CPT0CN
                                    238 	.globl _CPT1CN
                                    239 	.globl _SBUF0
                                    240 	.globl _SCON0
                                    241 	.globl _CRC0CNT
                                    242 	.globl _DC0CN
                                    243 	.globl _CRC0AUTO
                                    244 	.globl _DC0CF
                                    245 	.globl _TMR3H
                                    246 	.globl _CRC0FLIP
                                    247 	.globl _TMR3L
                                    248 	.globl _CRC0IN
                                    249 	.globl _TMR3RLH
                                    250 	.globl _CRC0CN
                                    251 	.globl _TMR3RLL
                                    252 	.globl _CRC0DAT
                                    253 	.globl _TMR3CN
                                    254 	.globl _P1
                                    255 	.globl _PSCTL
                                    256 	.globl _CKCON
                                    257 	.globl _TH1
                                    258 	.globl _TH0
                                    259 	.globl _TL1
                                    260 	.globl _TL0
                                    261 	.globl _TMOD
                                    262 	.globl _TCON
                                    263 	.globl _PCON
                                    264 	.globl _TOFFH
                                    265 	.globl _SPI1DAT
                                    266 	.globl _TOFFL
                                    267 	.globl _SPI1CKR
                                    268 	.globl _SPI1CFG
                                    269 	.globl _DPH
                                    270 	.globl _DPL
                                    271 	.globl _SP
                                    272 	.globl _P0
                                    273 	.globl _radio_transmit_PARM_3
                                    274 	.globl _radio_buffer
                                    275 	.globl _radio_transmit_PARM_4
                                    276 	.globl _radio_transmit_PARM_2
                                    277 	.globl _radio_receive_packet_PARM_2
                                    278 	.globl _settings
                                    279 	.globl _nodeId
                                    280 	.globl _netid
                                    281 	.globl _last_rssi
                                    282 	.globl _partial_packet_length
                                    283 	.globl _receive_packet_length
                                    284 	.globl _radio_receive_packet
                                    285 	.globl _radio_receive_in_progress
                                    286 	.globl _radio_preamble_detected
                                    287 	.globl _radio_last_rssi
                                    288 	.globl _radio_current_rssi
                                    289 	.globl _radio_air_rate
                                    290 	.globl _radio_transmit
                                    291 	.globl _radio_receiver_on
                                    292 	.globl _radio_initialise
                                    293 	.globl _radio_set_frequency
                                    294 	.globl _radio_set_channel_spacing
                                    295 	.globl _radio_set_channel
                                    296 	.globl _radio_get_channel
                                    297 	.globl _radio_configure
                                    298 	.globl _radio_set_transmit_power
                                    299 	.globl _radio_get_transmit_power
                                    300 	.globl _radio_set_network_id
                                    301 	.globl _radio_set_node_id
                                    302 	.globl _radio_temperature
                                    303 	.globl _radio_set_diversity
                                    304 ;--------------------------------------------------------
                                    305 ; special function registers
                                    306 ;--------------------------------------------------------
                                    307 	.area RSEG    (ABS,DATA)
      000000                        308 	.org 0x0000
                           000080   309 _P0	=	0x0080
                           000081   310 _SP	=	0x0081
                           000082   311 _DPL	=	0x0082
                           000083   312 _DPH	=	0x0083
                           000084   313 _SPI1CFG	=	0x0084
                           000085   314 _SPI1CKR	=	0x0085
                           000085   315 _TOFFL	=	0x0085
                           000086   316 _SPI1DAT	=	0x0086
                           000086   317 _TOFFH	=	0x0086
                           000087   318 _PCON	=	0x0087
                           000088   319 _TCON	=	0x0088
                           000089   320 _TMOD	=	0x0089
                           00008A   321 _TL0	=	0x008a
                           00008B   322 _TL1	=	0x008b
                           00008C   323 _TH0	=	0x008c
                           00008D   324 _TH1	=	0x008d
                           00008E   325 _CKCON	=	0x008e
                           00008F   326 _PSCTL	=	0x008f
                           000090   327 _P1	=	0x0090
                           000091   328 _TMR3CN	=	0x0091
                           000091   329 _CRC0DAT	=	0x0091
                           000092   330 _TMR3RLL	=	0x0092
                           000092   331 _CRC0CN	=	0x0092
                           000093   332 _TMR3RLH	=	0x0093
                           000093   333 _CRC0IN	=	0x0093
                           000094   334 _TMR3L	=	0x0094
                           000095   335 _CRC0FLIP	=	0x0095
                           000095   336 _TMR3H	=	0x0095
                           000096   337 _DC0CF	=	0x0096
                           000096   338 _CRC0AUTO	=	0x0096
                           000097   339 _DC0CN	=	0x0097
                           000097   340 _CRC0CNT	=	0x0097
                           000098   341 _SCON0	=	0x0098
                           000099   342 _SBUF0	=	0x0099
                           00009A   343 _CPT1CN	=	0x009a
                           00009B   344 _CPT0CN	=	0x009b
                           00009C   345 _CPT1MD	=	0x009c
                           00009D   346 _CPT0MD	=	0x009d
                           00009E   347 _CPT1MX	=	0x009e
                           00009F   348 _CPT0MX	=	0x009f
                           0000A0   349 _P2	=	0x00a0
                           0000A1   350 _SPI0CFG	=	0x00a1
                           0000A2   351 _SPI0CKR	=	0x00a2
                           0000A3   352 _SPI0DAT	=	0x00a3
                           0000A4   353 _P0MDOUT	=	0x00a4
                           0000A4   354 _P0DRV	=	0x00a4
                           0000A5   355 _P1MDOUT	=	0x00a5
                           0000A5   356 _P1DRV	=	0x00a5
                           0000A6   357 _P2MDOUT	=	0x00a6
                           0000A6   358 _P2DRV	=	0x00a6
                           0000A7   359 _SFRPAGE	=	0x00a7
                           0000A8   360 _IE	=	0x00a8
                           0000A9   361 _CLKSEL	=	0x00a9
                           0000AA   362 _EMI0CN	=	0x00aa
                           0000AB   363 _EMI0CF	=	0x00ab
                           0000AC   364 _RTC0ADR	=	0x00ac
                           0000AD   365 _RTC0DAT	=	0x00ad
                           0000AE   366 _RTC0KEY	=	0x00ae
                           0000AF   367 _EMI0TC	=	0x00af
                           0000AF   368 _ONESHOT	=	0x00af
                           0000B0   369 _SPI1CN	=	0x00b0
                           0000B1   370 _OSCXCN	=	0x00b1
                           0000B2   371 _OSCICN	=	0x00b2
                           0000B3   372 _OSCICL	=	0x00b3
                           0000B5   373 _PMU0CF	=	0x00b5
                           0000B6   374 _FLSCL	=	0x00b6
                           0000B7   375 _FLKEY	=	0x00b7
                           0000B8   376 _IP	=	0x00b8
                           0000B9   377 _IREF0CN	=	0x00b9
                           0000BA   378 _ADC0AC	=	0x00ba
                           0000BA   379 _ADC0PWR	=	0x00ba
                           0000BB   380 _ADC0MX	=	0x00bb
                           0000BC   381 _ADC0CF	=	0x00bc
                           0000BD   382 _ADC0TK	=	0x00bd
                           0000BD   383 _ADC0L	=	0x00bd
                           0000BE   384 _ADC0H	=	0x00be
                           0000BF   385 _P1MASK	=	0x00bf
                           0000C0   386 _SMB0CN	=	0x00c0
                           0000C1   387 _SMB0CF	=	0x00c1
                           0000C2   388 _SMB0DAT	=	0x00c2
                           0000C3   389 _ADC0GTL	=	0x00c3
                           0000C4   390 _ADC0GTH	=	0x00c4
                           0000C5   391 _ADC0LTL	=	0x00c5
                           0000C6   392 _ADC0LTH	=	0x00c6
                           0000C7   393 _P0MASK	=	0x00c7
                           0000C8   394 _TMR2CN	=	0x00c8
                           0000C9   395 _REG0CN	=	0x00c9
                           0000CA   396 _TMR2RLL	=	0x00ca
                           0000CB   397 _TMR2RLH	=	0x00cb
                           0000CC   398 _TMR2L	=	0x00cc
                           0000CD   399 _TMR2H	=	0x00cd
                           0000CE   400 _PCA0CPM5	=	0x00ce
                           0000CF   401 _P1MAT	=	0x00cf
                           0000D0   402 _PSW	=	0x00d0
                           0000D1   403 _REF0CN	=	0x00d1
                           0000D2   404 _PCA0CPL5	=	0x00d2
                           0000D3   405 _PCA0CPH5	=	0x00d3
                           0000D4   406 _P0SKIP	=	0x00d4
                           0000D5   407 _P1SKIP	=	0x00d5
                           0000D6   408 _P2SKIP	=	0x00d6
                           0000D7   409 _P0MAT	=	0x00d7
                           0000D8   410 _PCA0CN	=	0x00d8
                           0000D9   411 _PCA0MD	=	0x00d9
                           0000DA   412 _PCA0CPM0	=	0x00da
                           0000DB   413 _PCA0CPM1	=	0x00db
                           0000DC   414 _PCA0CPM2	=	0x00dc
                           0000DD   415 _PCA0CPM3	=	0x00dd
                           0000DE   416 _PCA0CPM4	=	0x00de
                           0000DF   417 _PCA0PWM	=	0x00df
                           0000E0   418 _ACC	=	0x00e0
                           0000E1   419 _XBR0	=	0x00e1
                           0000E2   420 _XBR1	=	0x00e2
                           0000E3   421 _XBR2	=	0x00e3
                           0000E4   422 _IT01CF	=	0x00e4
                           0000E5   423 _FLWR	=	0x00e5
                           0000E6   424 _EIE1	=	0x00e6
                           0000E7   425 _EIE2	=	0x00e7
                           0000E8   426 _ADC0CN	=	0x00e8
                           0000E9   427 _PCA0CPL1	=	0x00e9
                           0000EA   428 _PCA0CPH1	=	0x00ea
                           0000EB   429 _PCA0CPL2	=	0x00eb
                           0000EC   430 _PCA0CPH2	=	0x00ec
                           0000ED   431 _PCA0CPL3	=	0x00ed
                           0000EE   432 _PCA0CPH3	=	0x00ee
                           0000EF   433 _RSTSRC	=	0x00ef
                           0000F0   434 _B	=	0x00f0
                           0000F1   435 _P0MDIN	=	0x00f1
                           0000F2   436 _P1MDIN	=	0x00f2
                           0000F3   437 _P2MDIN	=	0x00f3
                           0000F4   438 _SMB0ADR	=	0x00f4
                           0000F5   439 _SMB0ADM	=	0x00f5
                           0000F6   440 _EIP1	=	0x00f6
                           0000F7   441 _EIP2	=	0x00f7
                           0000F8   442 _SPI0CN	=	0x00f8
                           0000F9   443 _PCA0L	=	0x00f9
                           0000FA   444 _PCA0H	=	0x00fa
                           0000FB   445 _PCA0CPL0	=	0x00fb
                           0000FC   446 _PCA0CPH0	=	0x00fc
                           0000FD   447 _PCA0CPL4	=	0x00fd
                           0000FE   448 _PCA0CPH4	=	0x00fe
                           0000FF   449 _VDM0CN	=	0x00ff
                           008382   450 _DP	=	0x8382
                           008685   451 _TOFF	=	0x8685
                           009392   452 _TMR3RL	=	0x9392
                           009594   453 _TMR3	=	0x9594
                           00BEBD   454 _ADC0	=	0xbebd
                           00C4C3   455 _ADC0GT	=	0xc4c3
                           00C6C5   456 _ADC0LT	=	0xc6c5
                           00CBCA   457 _TMR2RL	=	0xcbca
                           00CDCC   458 _TMR2	=	0xcdcc
                           00D3D2   459 _PCA0CP5	=	0xd3d2
                           00EAE9   460 _PCA0CP1	=	0xeae9
                           00ECEB   461 _PCA0CP2	=	0xeceb
                           00EEED   462 _PCA0CP3	=	0xeeed
                           00FAF9   463 _PCA0	=	0xfaf9
                           00FCFB   464 _PCA0CP0	=	0xfcfb
                           00FEFD   465 _PCA0CP4	=	0xfefd
                                    466 ;--------------------------------------------------------
                                    467 ; special function bits
                                    468 ;--------------------------------------------------------
                                    469 	.area RSEG    (ABS,DATA)
      000000                        470 	.org 0x0000
                           00008F   471 _TF1	=	0x008f
                           00008E   472 _TR1	=	0x008e
                           00008D   473 _TF0	=	0x008d
                           00008C   474 _TR0	=	0x008c
                           00008B   475 _IE1	=	0x008b
                           00008A   476 _IT1	=	0x008a
                           000089   477 _IE0	=	0x0089
                           000088   478 _IT0	=	0x0088
                           000096   479 _CRC0SEL	=	0x0096
                           000095   480 _CRC0INIT	=	0x0095
                           000094   481 _CRC0VAL	=	0x0094
                           00009F   482 _S0MODE	=	0x009f
                           00009D   483 _MCE0	=	0x009d
                           00009C   484 _REN0	=	0x009c
                           00009B   485 _TB80	=	0x009b
                           00009A   486 _RB80	=	0x009a
                           000099   487 _TI0	=	0x0099
                           000098   488 _RI0	=	0x0098
                           0000AF   489 _EA	=	0x00af
                           0000AE   490 _ESPI0	=	0x00ae
                           0000AD   491 _ET2	=	0x00ad
                           0000AC   492 _ES0	=	0x00ac
                           0000AB   493 _ET1	=	0x00ab
                           0000AA   494 _EX1	=	0x00aa
                           0000A9   495 _ET0	=	0x00a9
                           0000A8   496 _EX0	=	0x00a8
                           0000B7   497 _SPIF1	=	0x00b7
                           0000B6   498 _WCOL1	=	0x00b6
                           0000B5   499 _MODF1	=	0x00b5
                           0000B4   500 _RXOVRN1	=	0x00b4
                           0000B3   501 _NSS1MD1	=	0x00b3
                           0000B2   502 _NSS1MD0	=	0x00b2
                           0000B1   503 _TXBMT1	=	0x00b1
                           0000B0   504 _SPI1EN	=	0x00b0
                           0000BE   505 _PSPI0	=	0x00be
                           0000BD   506 _PT2	=	0x00bd
                           0000BC   507 _PS0	=	0x00bc
                           0000BB   508 _PT1	=	0x00bb
                           0000BA   509 _PX1	=	0x00ba
                           0000B9   510 _PT0	=	0x00b9
                           0000B8   511 _PX0	=	0x00b8
                           0000C7   512 _MASTER	=	0x00c7
                           0000C6   513 _TXMODE	=	0x00c6
                           0000C5   514 _STA	=	0x00c5
                           0000C4   515 _STO	=	0x00c4
                           0000C3   516 _ACKRQ	=	0x00c3
                           0000C2   517 _ARBLOST	=	0x00c2
                           0000C1   518 _ACK	=	0x00c1
                           0000C0   519 _SI	=	0x00c0
                           0000CF   520 _TF2H	=	0x00cf
                           0000CE   521 _TF2L	=	0x00ce
                           0000CD   522 _TF2LEN	=	0x00cd
                           0000CC   523 _TF2CEN	=	0x00cc
                           0000CB   524 _T2SPLIT	=	0x00cb
                           0000CA   525 _TR2	=	0x00ca
                           0000C9   526 _T2RCLK	=	0x00c9
                           0000C8   527 _T2XCLK	=	0x00c8
                           0000D7   528 _CY	=	0x00d7
                           0000D6   529 _AC	=	0x00d6
                           0000D5   530 _F0	=	0x00d5
                           0000D4   531 _RS1	=	0x00d4
                           0000D3   532 _RS0	=	0x00d3
                           0000D2   533 _OV	=	0x00d2
                           0000D1   534 _F1	=	0x00d1
                           0000D0   535 _P	=	0x00d0
                           0000DF   536 _CF	=	0x00df
                           0000DE   537 _CR	=	0x00de
                           0000DD   538 _CCF5	=	0x00dd
                           0000DC   539 _CCF4	=	0x00dc
                           0000DB   540 _CCF3	=	0x00db
                           0000DA   541 _CCF2	=	0x00da
                           0000D9   542 _CCF1	=	0x00d9
                           0000D8   543 _CCF0	=	0x00d8
                           0000EF   544 _AD0EN	=	0x00ef
                           0000EE   545 _BURSTEN	=	0x00ee
                           0000ED   546 _AD0INT	=	0x00ed
                           0000EC   547 _AD0BUSY	=	0x00ec
                           0000EB   548 _AD0WINT	=	0x00eb
                           0000EA   549 _AD0CM2	=	0x00ea
                           0000E9   550 _AD0CM1	=	0x00e9
                           0000E8   551 _AD0CM0	=	0x00e8
                           0000FF   552 _SPIF0	=	0x00ff
                           0000FE   553 _WCOL0	=	0x00fe
                           0000FD   554 _MODF0	=	0x00fd
                           0000FC   555 _RXOVRN0	=	0x00fc
                           0000FB   556 _NSS0MD1	=	0x00fb
                           0000FA   557 _NSS0MD0	=	0x00fa
                           0000F9   558 _TXBMT0	=	0x00f9
                           0000F8   559 _SPI0EN	=	0x00f8
                           000096   560 _LED_RED	=	0x0096
                           000095   561 _LED_GREEN	=	0x0095
                           000082   562 _PIN_CONFIG	=	0x0082
                           000083   563 _PIN_ENABLE	=	0x0083
                           000087   564 _IRQ	=	0x0087
                           000094   565 _NSS1	=	0x0094
                           0000A6   566 _SDN	=	0x00a6
                                    567 ;--------------------------------------------------------
                                    568 ; overlayable register banks
                                    569 ;--------------------------------------------------------
                                    570 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        571 	.ds 8
                                    572 ;--------------------------------------------------------
                                    573 ; overlayable bit register bank
                                    574 ;--------------------------------------------------------
                                    575 	.area BIT_BANK	(REL,OVR,DATA)
      000000                        576 bits:
      000000                        577 	.ds 1
                           008000   578 	b0 = bits[0]
                           008100   579 	b1 = bits[1]
                           008200   580 	b2 = bits[2]
                           008300   581 	b3 = bits[3]
                           008400   582 	b4 = bits[4]
                           008500   583 	b5 = bits[5]
                           008600   584 	b6 = bits[6]
                           008700   585 	b7 = bits[7]
                                    586 ;--------------------------------------------------------
                                    587 ; internal ram data
                                    588 ;--------------------------------------------------------
                                    589 	.area DSEG    (DATA)
                                    590 ;--------------------------------------------------------
                                    591 ; overlayable items in internal ram 
                                    592 ;--------------------------------------------------------
                                    593 	.area	OSEG    (OVR,DATA)
                                    594 ;--------------------------------------------------------
                                    595 ; indirectly addressable internal ram data
                                    596 ;--------------------------------------------------------
                                    597 	.area ISEG    (DATA)
                                    598 ;--------------------------------------------------------
                                    599 ; absolute internal ram data
                                    600 ;--------------------------------------------------------
                                    601 	.area IABS    (ABS,DATA)
                                    602 	.area IABS    (ABS,DATA)
                                    603 ;--------------------------------------------------------
                                    604 ; bit data
                                    605 ;--------------------------------------------------------
                                    606 	.area BSEG    (BIT)
      000000                        607 _packet_received:
      000000                        608 	.ds 1
      000001                        609 _preamble_detected:
      000001                        610 	.ds 1
      000002                        611 _radio_preamble_detected_EX0_saved_1_155:
      000002                        612 	.ds 1
      000003                        613 _radio_transmit_simple_transmit_started_1_168:
      000003                        614 	.ds 1
      000004                        615 _radio_transmit_ret_1_184:
      000004                        616 	.ds 1
      000005                        617 _radio_transmit_EX0_saved_1_184:
      000005                        618 	.ds 1
      000006                        619 _radio_initialise_sloc0_1_0:
      000006                        620 	.ds 1
                                    621 ;--------------------------------------------------------
                                    622 ; paged external ram data
                                    623 ;--------------------------------------------------------
                                    624 	.area PSEG    (PAG,XDATA)
      000000                        625 _receive_packet_length::
      000000                        626 	.ds 1
      000001                        627 _partial_packet_length::
      000001                        628 	.ds 1
      000002                        629 _last_rssi::
      000002                        630 	.ds 1
      000003                        631 _netid::
      000003                        632 	.ds 2
      000005                        633 _nodeId::
      000005                        634 	.ds 2
      000007                        635 _settings::
      000007                        636 	.ds 12
      000013                        637 _radio_receive_packet_PARM_2:
      000013                        638 	.ds 2
      000015                        639 _radio_write_transmit_fifo_PARM_2:
      000015                        640 	.ds 2
      000017                        641 _radio_transmit_simple_PARM_2:
      000017                        642 	.ds 2
      000019                        643 _radio_transmit_simple_PARM_3:
      000019                        644 	.ds 2
      00001B                        645 _radio_transmit_PARM_2:
      00001B                        646 	.ds 2
      00001D                        647 _radio_transmit_PARM_4:
      00001D                        648 	.ds 2
      00001F                        649 _scale_uint32_PARM_2:
      00001F                        650 	.ds 4
      000023                        651 _scale_uint32_value_1_239:
      000023                        652 	.ds 4
      000027                        653 _set_frequency_registers_frequency_1_247:
      000027                        654 	.ds 4
                                    655 ;--------------------------------------------------------
                                    656 ; external ram data
                                    657 ;--------------------------------------------------------
                                    658 	.area XSEG    (XDATA)
      000000                        659 _radio_buffer::
      000000                        660 	.ds 252
      0000FC                        661 _radio_receive_packet_length_1_142:
      0000FC                        662 	.ds 3
      0000FF                        663 _radio_transmit_PARM_3:
      0000FF                        664 	.ds 2
      000101                        665 _radio_transmit_length_1_183:
      000101                        666 	.ds 1
      000102                        667 _radio_set_channel_channel_1_197:
      000102                        668 	.ds 1
      000103                        669 _radio_set_transmit_power_power_1_219:
      000103                        670 	.ds 1
      000104                        671 _radio_set_transmit_power_i_1_220:
      000104                        672 	.ds 1
      000105                        673 _radio_set_network_id_id_1_225:
      000105                        674 	.ds 2
      000107                        675 _radio_set_node_id_id_1_228:
      000107                        676 	.ds 2
      000109                        677 _set_frequency_registers_band_1_248:
      000109                        678 	.ds 1
      00010A                        679 _radio_set_diversity_state_1_253:
      00010A                        680 	.ds 1
                                    681 ;--------------------------------------------------------
                                    682 ; absolute external ram data
                                    683 ;--------------------------------------------------------
                                    684 	.area XABS    (ABS,XDATA)
                                    685 ;--------------------------------------------------------
                                    686 ; external initialized ram data
                                    687 ;--------------------------------------------------------
                                    688 	.area XISEG   (XDATA)
                                    689 	.area HOME    (CODE)
                                    690 	.area GSINIT0 (CODE)
                                    691 	.area GSINIT1 (CODE)
                                    692 	.area GSINIT2 (CODE)
                                    693 	.area GSINIT3 (CODE)
                                    694 	.area GSINIT4 (CODE)
                                    695 	.area GSINIT5 (CODE)
                                    696 	.area GSINIT  (CODE)
                                    697 	.area GSFINAL (CODE)
                                    698 	.area CSEG    (CODE)
                                    699 ;--------------------------------------------------------
                                    700 ; global & static initialisations
                                    701 ;--------------------------------------------------------
                                    702 	.area HOME    (CODE)
                                    703 	.area GSINIT  (CODE)
                                    704 	.area GSFINAL (CODE)
                                    705 	.area GSINIT  (CODE)
                                    706 ;--------------------------------------------------------
                                    707 ; Home
                                    708 ;--------------------------------------------------------
                                    709 	.area HOME    (CODE)
                                    710 	.area HOME    (CODE)
                                    711 ;--------------------------------------------------------
                                    712 ; code
                                    713 ;--------------------------------------------------------
                                    714 	.area CSEG    (CODE)
                                    715 ;------------------------------------------------------------
                                    716 ;Allocation info for local variables in function 'radio_receive_packet'
                                    717 ;------------------------------------------------------------
                                    718 ;errcount                  Allocated to registers 
                                    719 ;length                    Allocated with name '_radio_receive_packet_length_1_142'
                                    720 ;------------------------------------------------------------
                                    721 ;	radio/radio.c:78: radio_receive_packet(uint8_t *length, __xdata uint8_t * __pdata buf) __nonbanked
                                    722 ;	-----------------------------------------
                                    723 ;	 function radio_receive_packet
                                    724 ;	-----------------------------------------
      000000                        725 _radio_receive_packet:
                           000007   726 	ar7 = 0x07
                           000006   727 	ar6 = 0x06
                           000005   728 	ar5 = 0x05
                           000004   729 	ar4 = 0x04
                           000003   730 	ar3 = 0x03
                           000002   731 	ar2 = 0x02
                           000001   732 	ar1 = 0x01
                           000000   733 	ar0 = 0x00
      000000 AF F0            [24]  734 	mov	r7,b
      000002 AE 83            [24]  735 	mov	r6,dph
      000004 E5 82            [12]  736 	mov	a,dpl
      000006 90r00rFC         [24]  737 	mov	dptr,#_radio_receive_packet_length_1_142
      000009 F0               [24]  738 	movx	@dptr,a
      00000A EE               [12]  739 	mov	a,r6
      00000B A3               [24]  740 	inc	dptr
      00000C F0               [24]  741 	movx	@dptr,a
      00000D EF               [12]  742 	mov	a,r7
      00000E A3               [24]  743 	inc	dptr
      00000F F0               [24]  744 	movx	@dptr,a
                                    745 ;	radio/radio.c:88: if (!packet_received) {
      000010 20*00 02         [24]  746 	jb	_packet_received,00102$
                                    747 ;	radio/radio.c:89: return false;
      000013 C3               [12]  748 	clr	c
      000014 22               [24]  749 	ret
      000015                        750 00102$:
                                    751 ;	radio/radio.c:92: if (receive_packet_length > MAX_PACKET_LENGTH) {
      000015 78r00            [12]  752 	mov	r0,#_receive_packet_length
      000017 C3               [12]  753 	clr	c
      000018 E2               [24]  754 	movx	a,@r0
      000019 F5 F0            [12]  755 	mov	b,a
      00001B 74 FC            [12]  756 	mov	a,#0xFC
      00001D 95 F0            [12]  757 	subb	a,b
      00001F 50 05            [24]  758 	jnc	00104$
                                    759 ;	radio/radio.c:93: radio_receiver_on();
      000021 12r03r9A         [24]  760 	lcall	_radio_receiver_on
                                    761 ;	radio/radio.c:94: goto failed;
      000024 80 45            [24]  762 	sjmp	00105$
      000026                        763 00104$:
                                    764 ;	radio/radio.c:114: *length = receive_packet_length;
      000026 90r00rFC         [24]  765 	mov	dptr,#_radio_receive_packet_length_1_142
      000029 E0               [24]  766 	movx	a,@dptr
      00002A FD               [12]  767 	mov	r5,a
      00002B A3               [24]  768 	inc	dptr
      00002C E0               [24]  769 	movx	a,@dptr
      00002D FE               [12]  770 	mov	r6,a
      00002E A3               [24]  771 	inc	dptr
      00002F E0               [24]  772 	movx	a,@dptr
      000030 FF               [12]  773 	mov	r7,a
      000031 8D 82            [24]  774 	mov	dpl,r5
      000033 8E 83            [24]  775 	mov	dph,r6
      000035 8F F0            [24]  776 	mov	b,r7
      000037 78r00            [12]  777 	mov	r0,#_receive_packet_length
      000039 E2               [24]  778 	movx	a,@r0
      00003A 12r00r00         [24]  779 	lcall	__gptrput
                                    780 ;	radio/radio.c:115: memcpy(buf, radio_buffer, receive_packet_length);
      00003D 78r13            [12]  781 	mov	r0,#_radio_receive_packet_PARM_2
      00003F E2               [24]  782 	movx	a,@r0
      000040 FD               [12]  783 	mov	r5,a
      000041 08               [12]  784 	inc	r0
      000042 E2               [24]  785 	movx	a,@r0
      000043 FE               [12]  786 	mov	r6,a
      000044 7F 00            [12]  787 	mov	r7,#0x00
      000046 90r00r00         [24]  788 	mov	dptr,#_memcpy_PARM_2
      000049 74r00            [12]  789 	mov	a,#_radio_buffer
      00004B F0               [24]  790 	movx	@dptr,a
      00004C 74s00            [12]  791 	mov	a,#(_radio_buffer >> 8)
      00004E A3               [24]  792 	inc	dptr
      00004F F0               [24]  793 	movx	@dptr,a
      000050 E4               [12]  794 	clr	a
      000051 A3               [24]  795 	inc	dptr
      000052 F0               [24]  796 	movx	@dptr,a
      000053 78r00            [12]  797 	mov	r0,#_receive_packet_length
      000055 90r00r00         [24]  798 	mov	dptr,#_memcpy_PARM_3
      000058 E2               [24]  799 	movx	a,@r0
      000059 F0               [24]  800 	movx	@dptr,a
      00005A E4               [12]  801 	clr	a
      00005B A3               [24]  802 	inc	dptr
      00005C F0               [24]  803 	movx	@dptr,a
      00005D 8D 82            [24]  804 	mov	dpl,r5
      00005F 8E 83            [24]  805 	mov	dph,r6
      000061 8F F0            [24]  806 	mov	b,r7
      000063 12r00r00         [24]  807 	lcall	_memcpy
                                    808 ;	radio/radio.c:116: radio_receiver_on();
      000066 12r03r9A         [24]  809 	lcall	_radio_receiver_on
                                    810 ;	radio/radio.c:117: return true;
      000069 D3               [12]  811 	setb	c
                                    812 ;	radio/radio.c:190: failed:
      00006A 22               [24]  813 	ret
      00006B                        814 00105$:
                                    815 ;	radio/radio.c:191: if (errors.rx_errors != 0xFFFF) {
      00006B 78r00            [12]  816 	mov	r0,#_errors
      00006D E2               [24]  817 	movx	a,@r0
      00006E FE               [12]  818 	mov	r6,a
      00006F 08               [12]  819 	inc	r0
      000070 E2               [24]  820 	movx	a,@r0
      000071 FF               [12]  821 	mov	r7,a
      000072 BE FF 05         [24]  822 	cjne	r6,#0xFF,00121$
      000075 BF FF 02         [24]  823 	cjne	r7,#0xFF,00121$
      000078 80 0C            [24]  824 	sjmp	00107$
      00007A                        825 00121$:
                                    826 ;	radio/radio.c:192: errors.rx_errors++;
      00007A 0E               [12]  827 	inc	r6
      00007B BE 00 01         [24]  828 	cjne	r6,#0x00,00122$
      00007E 0F               [12]  829 	inc	r7
      00007F                        830 00122$:
      00007F 78r00            [12]  831 	mov	r0,#_errors
      000081 EE               [12]  832 	mov	a,r6
      000082 F2               [24]  833 	movx	@r0,a
      000083 08               [12]  834 	inc	r0
      000084 EF               [12]  835 	mov	a,r7
      000085 F2               [24]  836 	movx	@r0,a
      000086                        837 00107$:
                                    838 ;	radio/radio.c:194: return false;
      000086 C3               [12]  839 	clr	c
      000087 22               [24]  840 	ret
                                    841 ;------------------------------------------------------------
                                    842 ;Allocation info for local variables in function 'radio_write_transmit_fifo'
                                    843 ;------------------------------------------------------------
                                    844 ;n                         Allocated to registers r7 
                                    845 ;------------------------------------------------------------
                                    846 ;	radio/radio.c:201: radio_write_transmit_fifo(register uint8_t n, __xdata uint8_t * __pdata buffer) __nonbanked
                                    847 ;	-----------------------------------------
                                    848 ;	 function radio_write_transmit_fifo
                                    849 ;	-----------------------------------------
      000088                        850 _radio_write_transmit_fifo:
      000088 AF 82            [24]  851 	mov	r7,dpl
                                    852 ;	radio/radio.c:203: RADIO_PAGE();
      00008A 75 A7 00         [24]  853 	mov	_SFRPAGE,#0x00
                                    854 ;	radio/radio.c:205: NSS1 = 0;
      00008D C2 94            [12]  855 	clr	_NSS1
                                    856 ;	radio/radio.c:206: SPIF1 = 0;
      00008F C2 B7            [12]  857 	clr	_SPIF1
                                    858 ;	radio/radio.c:207: SPI1DAT = (0x80 | EZRADIOPRO_FIFO_ACCESS);
      000091 75 86 FF         [24]  859 	mov	_SPI1DAT,#0xFF
                                    860 ;	radio/radio.c:209: while (n--) {
      000094 78r15            [12]  861 	mov	r0,#_radio_write_transmit_fifo_PARM_2
      000096 E2               [24]  862 	movx	a,@r0
      000097 FD               [12]  863 	mov	r5,a
      000098 08               [12]  864 	inc	r0
      000099 E2               [24]  865 	movx	a,@r0
      00009A FE               [12]  866 	mov	r6,a
      00009B                        867 00104$:
      00009B 8F 04            [24]  868 	mov	ar4,r7
      00009D 1F               [12]  869 	dec	r7
      00009E EC               [12]  870 	mov	a,r4
      00009F 60 11            [24]  871 	jz	00107$
                                    872 ;	radio/radio.c:210: while (!TXBMT1) /* noop */;
      0000A1                        873 00101$:
      0000A1 30 B1 FD         [24]  874 	jnb	_TXBMT1,00101$
                                    875 ;	radio/radio.c:211: SPI1DAT = *buffer++;
      0000A4 8D 82            [24]  876 	mov	dpl,r5
      0000A6 8E 83            [24]  877 	mov	dph,r6
      0000A8 E0               [24]  878 	movx	a,@dptr
      0000A9 F5 86            [12]  879 	mov	_SPI1DAT,a
      0000AB A3               [24]  880 	inc	dptr
      0000AC AD 82            [24]  881 	mov	r5,dpl
      0000AE AE 83            [24]  882 	mov	r6,dph
                                    883 ;	radio/radio.c:214: while (!TXBMT1) /* noop */;
      0000B0 80 E9            [24]  884 	sjmp	00104$
      0000B2                        885 00107$:
      0000B2 30 B1 FD         [24]  886 	jnb	_TXBMT1,00107$
                                    887 ;	radio/radio.c:215: while ((SPI1CFG & 0x80) == 0x80);
      0000B5                        888 00110$:
      0000B5 74 80            [12]  889 	mov	a,#0x80
      0000B7 55 84            [12]  890 	anl	a,_SPI1CFG
      0000B9 FF               [12]  891 	mov	r7,a
      0000BA BF 80 02         [24]  892 	cjne	r7,#0x80,00137$
      0000BD 80 F6            [24]  893 	sjmp	00110$
      0000BF                        894 00137$:
                                    895 ;	radio/radio.c:217: SPIF1 = 0;
      0000BF C2 B7            [12]  896 	clr	_SPIF1
                                    897 ;	radio/radio.c:218: NSS1 = 1;
      0000C1 D2 94            [12]  898 	setb	_NSS1
                                    899 ;	radio/radio.c:220: SFRPAGE = LEGACY_PAGE;
      0000C3 75 A7 00         [24]  900 	mov	_SFRPAGE,#0x00
      0000C6 22               [24]  901 	ret
                                    902 ;------------------------------------------------------------
                                    903 ;Allocation info for local variables in function 'radio_receive_in_progress'
                                    904 ;------------------------------------------------------------
                                    905 ;	radio/radio.c:226: radio_receive_in_progress(void) __nonbanked
                                    906 ;	-----------------------------------------
                                    907 ;	 function radio_receive_in_progress
                                    908 ;	-----------------------------------------
      0000C7                        909 _radio_receive_in_progress:
                                    910 ;	radio/radio.c:228: if (packet_received ||
      0000C7 20*00 05         [24]  911 	jb	_packet_received,00101$
                                    912 ;	radio/radio.c:229: partial_packet_length != 0) {
      0000CA 78r01            [12]  913 	mov	r0,#_partial_packet_length
      0000CC E2               [24]  914 	movx	a,@r0
      0000CD 60 02            [24]  915 	jz	00102$
      0000CF                        916 00101$:
                                    917 ;	radio/radio.c:230: return true;
      0000CF D3               [12]  918 	setb	c
      0000D0 22               [24]  919 	ret
      0000D1                        920 00102$:
                                    921 ;	radio/radio.c:234: if (register_read(EZRADIOPRO_EZMAC_STATUS) & EZRADIOPRO_PKRX) {
      0000D1 75 82 31         [24]  922 	mov	dpl,#0x31
      0000D4 12r08r88         [24]  923 	lcall	_register_read
      0000D7 E5 82            [12]  924 	mov	a,dpl
      0000D9 30 E4 02         [24]  925 	jnb	acc.4,00105$
                                    926 ;	radio/radio.c:235: return true;
      0000DC D3               [12]  927 	setb	c
      0000DD 22               [24]  928 	ret
      0000DE                        929 00105$:
                                    930 ;	radio/radio.c:237: return false;
      0000DE C3               [12]  931 	clr	c
      0000DF 22               [24]  932 	ret
                                    933 ;------------------------------------------------------------
                                    934 ;Allocation info for local variables in function 'radio_preamble_detected'
                                    935 ;------------------------------------------------------------
                                    936 ;	radio/radio.c:244: radio_preamble_detected(void) __nonbanked
                                    937 ;	-----------------------------------------
                                    938 ;	 function radio_preamble_detected
                                    939 ;	-----------------------------------------
      0000E0                        940 _radio_preamble_detected:
                                    941 ;	radio/radio.c:246: EX0_SAVE_DISABLE;
      0000E0 A2 A8            [12]  942 	mov	c,_EX0
      0000E2 92*02            [24]  943 	mov	_radio_preamble_detected_EX0_saved_1_155,c
      0000E4 C2 A8            [12]  944 	clr	_EX0
                                    945 ;	radio/radio.c:247: if (preamble_detected) {
                                    946 ;	radio/radio.c:248: preamble_detected = 0;
      0000E6 10*01 02         [24]  947 	jbc	_preamble_detected,00108$
      0000E9 80 06            [24]  948 	sjmp	00102$
      0000EB                        949 00108$:
                                    950 ;	radio/radio.c:249: EX0_RESTORE;
      0000EB A2*02            [12]  951 	mov	c,_radio_preamble_detected_EX0_saved_1_155
      0000ED 92 A8            [24]  952 	mov	_EX0,c
                                    953 ;	radio/radio.c:250: return true;
      0000EF D3               [12]  954 	setb	c
      0000F0 22               [24]  955 	ret
      0000F1                        956 00102$:
                                    957 ;	radio/radio.c:252: EX0_RESTORE;
      0000F1 A2*02            [12]  958 	mov	c,_radio_preamble_detected_EX0_saved_1_155
      0000F3 92 A8            [24]  959 	mov	_EX0,c
                                    960 ;	radio/radio.c:253: return false;
      0000F5 C3               [12]  961 	clr	c
      0000F6 22               [24]  962 	ret
                                    963 ;------------------------------------------------------------
                                    964 ;Allocation info for local variables in function 'radio_last_rssi'
                                    965 ;------------------------------------------------------------
                                    966 ;	radio/radio.c:261: radio_last_rssi(void) __nonbanked
                                    967 ;	-----------------------------------------
                                    968 ;	 function radio_last_rssi
                                    969 ;	-----------------------------------------
      0000F7                        970 _radio_last_rssi:
                                    971 ;	radio/radio.c:263: return last_rssi;
      0000F7 78r02            [12]  972 	mov	r0,#_last_rssi
      0000F9 E2               [24]  973 	movx	a,@r0
      0000FA F5 82            [12]  974 	mov	dpl,a
      0000FC 22               [24]  975 	ret
                                    976 ;------------------------------------------------------------
                                    977 ;Allocation info for local variables in function 'radio_current_rssi'
                                    978 ;------------------------------------------------------------
                                    979 ;	radio/radio.c:269: radio_current_rssi(void) __nonbanked
                                    980 ;	-----------------------------------------
                                    981 ;	 function radio_current_rssi
                                    982 ;	-----------------------------------------
      0000FD                        983 _radio_current_rssi:
                                    984 ;	radio/radio.c:271: return register_read(EZRADIOPRO_RECEIVED_SIGNAL_STRENGTH_INDICATOR);
      0000FD 75 82 26         [24]  985 	mov	dpl,#0x26
      000100 02r08r88         [24]  986 	ljmp	_register_read
                                    987 ;------------------------------------------------------------
                                    988 ;Allocation info for local variables in function 'radio_air_rate'
                                    989 ;------------------------------------------------------------
                                    990 ;	radio/radio.c:277: radio_air_rate(void) __nonbanked
                                    991 ;	-----------------------------------------
                                    992 ;	 function radio_air_rate
                                    993 ;	-----------------------------------------
      000103                        994 _radio_air_rate:
                                    995 ;	radio/radio.c:279: return settings.air_data_rate;
      000103 78r0F            [12]  996 	mov	r0,#(_settings + 0x0008)
      000105 E2               [24]  997 	movx	a,@r0
      000106 F5 82            [12]  998 	mov	dpl,a
      000108 22               [24]  999 	ret
                                   1000 ;------------------------------------------------------------
                                   1001 ;Allocation info for local variables in function 'radio_clear_transmit_fifo'
                                   1002 ;------------------------------------------------------------
                                   1003 ;control                   Allocated to registers r7 
                                   1004 ;------------------------------------------------------------
                                   1005 ;	radio/radio.c:285: radio_clear_transmit_fifo(void) __nonbanked
                                   1006 ;	-----------------------------------------
                                   1007 ;	 function radio_clear_transmit_fifo
                                   1008 ;	-----------------------------------------
      000109                       1009 _radio_clear_transmit_fifo:
                                   1010 ;	radio/radio.c:288: control = register_read(EZRADIOPRO_OPERATING_AND_FUNCTION_CONTROL_2);
      000109 75 82 08         [24] 1011 	mov	dpl,#0x08
      00010C 12r08r88         [24] 1012 	lcall	_register_read
      00010F AF 82            [24] 1013 	mov	r7,dpl
                                   1014 ;	radio/radio.c:289: register_write(EZRADIOPRO_OPERATING_AND_FUNCTION_CONTROL_2, control | EZRADIOPRO_FFCLRTX);
      000111 74 01            [12] 1015 	mov	a,#0x01
      000113 4F               [12] 1016 	orl	a,r7
      000114 FE               [12] 1017 	mov	r6,a
      000115 C0 07            [24] 1018 	push	ar7
      000117 C0 06            [24] 1019 	push	ar6
      000119 75 82 08         [24] 1020 	mov	dpl,#0x08
      00011C 12r08r52         [24] 1021 	lcall	_register_write
      00011F 15 81            [12] 1022 	dec	sp
      000121 D0 07            [24] 1023 	pop	ar7
                                   1024 ;	radio/radio.c:290: register_write(EZRADIOPRO_OPERATING_AND_FUNCTION_CONTROL_2, control & ~EZRADIOPRO_FFCLRTX);
      000123 53 07 FE         [24] 1025 	anl	ar7,#0xFE
      000126 C0 07            [24] 1026 	push	ar7
      000128 75 82 08         [24] 1027 	mov	dpl,#0x08
      00012B 12r08r52         [24] 1028 	lcall	_register_write
      00012E 15 81            [12] 1029 	dec	sp
      000130 22               [24] 1030 	ret
                                   1031 ;------------------------------------------------------------
                                   1032 ;Allocation info for local variables in function 'radio_clear_receive_fifo'
                                   1033 ;------------------------------------------------------------
                                   1034 ;control                   Allocated to registers r7 
                                   1035 ;------------------------------------------------------------
                                   1036 ;	radio/radio.c:297: radio_clear_receive_fifo(void) __reentrant __nonbanked
                                   1037 ;	-----------------------------------------
                                   1038 ;	 function radio_clear_receive_fifo
                                   1039 ;	-----------------------------------------
      000131                       1040 _radio_clear_receive_fifo:
                                   1041 ;	radio/radio.c:300: control = register_read(EZRADIOPRO_OPERATING_AND_FUNCTION_CONTROL_2);
      000131 75 82 08         [24] 1042 	mov	dpl,#0x08
      000134 12r08r88         [24] 1043 	lcall	_register_read
      000137 AF 82            [24] 1044 	mov	r7,dpl
                                   1045 ;	radio/radio.c:301: register_write(EZRADIOPRO_OPERATING_AND_FUNCTION_CONTROL_2, control | EZRADIOPRO_FFCLRRX);
      000139 74 02            [12] 1046 	mov	a,#0x02
      00013B 4F               [12] 1047 	orl	a,r7
      00013C FE               [12] 1048 	mov	r6,a
      00013D C0 07            [24] 1049 	push	ar7
      00013F C0 06            [24] 1050 	push	ar6
      000141 75 82 08         [24] 1051 	mov	dpl,#0x08
      000144 12r08r52         [24] 1052 	lcall	_register_write
      000147 15 81            [12] 1053 	dec	sp
      000149 D0 07            [24] 1054 	pop	ar7
                                   1055 ;	radio/radio.c:302: register_write(EZRADIOPRO_OPERATING_AND_FUNCTION_CONTROL_2, control & ~EZRADIOPRO_FFCLRRX);
      00014B 53 07 FD         [24] 1056 	anl	ar7,#0xFD
      00014E C0 07            [24] 1057 	push	ar7
      000150 75 82 08         [24] 1058 	mov	dpl,#0x08
      000153 12r08r52         [24] 1059 	lcall	_register_write
      000156 15 81            [12] 1060 	dec	sp
      000158 22               [24] 1061 	ret
                                   1062 ;------------------------------------------------------------
                                   1063 ;Allocation info for local variables in function 'radio_transmit_simple'
                                   1064 ;------------------------------------------------------------
                                   1065 ;length                    Allocated to registers r7 
                                   1066 ;n                         Allocated to registers r6 
                                   1067 ;status                    Allocated to registers r3 
                                   1068 ;------------------------------------------------------------
                                   1069 ;	radio/radio.c:314: radio_transmit_simple(__data uint8_t length, __xdata uint8_t * __pdata buf, __pdata uint16_t timeout_ticks) __nonbanked
                                   1070 ;	-----------------------------------------
                                   1071 ;	 function radio_transmit_simple
                                   1072 ;	-----------------------------------------
      000159                       1073 _radio_transmit_simple:
                                   1074 ;	radio/radio.c:320: if (length > sizeof(radio_buffer)) {
      000159 E5 82            [12] 1075 	mov	a,dpl
      00015B FF               [12] 1076 	mov	r7,a
      00015C 24 03            [12] 1077 	add	a,#0xff - 0xFC
      00015E 50 19            [24] 1078 	jnc	00102$
                                   1079 ;	radio/radio.c:321: panic("oversized packet");
      000160 C0 07            [24] 1080 	push	ar7
      000162 74r00            [12] 1081 	mov	a,#___str_0
      000164 C0 E0            [24] 1082 	push	acc
      000166 74s00            [12] 1083 	mov	a,#(___str_0 >> 8)
      000168 C0 E0            [24] 1084 	push	acc
      00016A 74 80            [12] 1085 	mov	a,#0x80
      00016C C0 E0            [24] 1086 	push	acc
      00016E 12r00r00         [24] 1087 	lcall	_panic
      000171 15 81            [12] 1088 	dec	sp
      000173 15 81            [12] 1089 	dec	sp
      000175 15 81            [12] 1090 	dec	sp
      000177 D0 07            [24] 1091 	pop	ar7
      000179                       1092 00102$:
                                   1093 ;	radio/radio.c:324: radio_clear_transmit_fifo();
      000179 C0 07            [24] 1094 	push	ar7
      00017B 12r01r09         [24] 1095 	lcall	_radio_clear_transmit_fifo
      00017E D0 07            [24] 1096 	pop	ar7
                                   1097 ;	radio/radio.c:326: register_write(EZRADIOPRO_TRANSMIT_PACKET_LENGTH, length);
      000180 C0 07            [24] 1098 	push	ar7
      000182 C0 07            [24] 1099 	push	ar7
      000184 75 82 3E         [24] 1100 	mov	dpl,#0x3E
      000187 12r08r52         [24] 1101 	lcall	_register_write
      00018A 15 81            [12] 1102 	dec	sp
      00018C D0 07            [24] 1103 	pop	ar7
                                   1104 ;	radio/radio.c:329: n = length;
                                   1105 ;	radio/radio.c:330: if (n > TX_FIFO_THRESHOLD_LOW) {
      00018E EF               [12] 1106 	mov	a,r7
      00018F FE               [12] 1107 	mov	r6,a
      000190 24 DF            [12] 1108 	add	a,#0xff - 0x20
      000192 50 02            [24] 1109 	jnc	00104$
                                   1110 ;	radio/radio.c:331: n = TX_FIFO_THRESHOLD_LOW;
      000194 7E 20            [12] 1111 	mov	r6,#0x20
      000196                       1112 00104$:
                                   1113 ;	radio/radio.c:333: radio_write_transmit_fifo(n, buf);
      000196 78r17            [12] 1114 	mov	r0,#_radio_transmit_simple_PARM_2
      000198 79r15            [12] 1115 	mov	r1,#_radio_write_transmit_fifo_PARM_2
      00019A E2               [24] 1116 	movx	a,@r0
      00019B F3               [24] 1117 	movx	@r1,a
      00019C 08               [12] 1118 	inc	r0
      00019D E2               [24] 1119 	movx	a,@r0
      00019E 09               [12] 1120 	inc	r1
      00019F F3               [24] 1121 	movx	@r1,a
      0001A0 8E 82            [24] 1122 	mov	dpl,r6
      0001A2 C0 07            [24] 1123 	push	ar7
      0001A4 C0 06            [24] 1124 	push	ar6
      0001A6 12r00r88         [24] 1125 	lcall	_radio_write_transmit_fifo
      0001A9 D0 06            [24] 1126 	pop	ar6
      0001AB D0 07            [24] 1127 	pop	ar7
                                   1128 ;	radio/radio.c:334: length -= n;
      0001AD EF               [12] 1129 	mov	a,r7
      0001AE C3               [12] 1130 	clr	c
      0001AF 9E               [12] 1131 	subb	a,r6
      0001B0 FF               [12] 1132 	mov	r7,a
                                   1133 ;	radio/radio.c:335: buf += n;
      0001B1 78r17            [12] 1134 	mov	r0,#_radio_transmit_simple_PARM_2
      0001B3 E2               [24] 1135 	movx	a,@r0
      0001B4 2E               [12] 1136 	add	a,r6
      0001B5 F2               [24] 1137 	movx	@r0,a
      0001B6 08               [12] 1138 	inc	r0
      0001B7 E2               [24] 1139 	movx	a,@r0
      0001B8 34 00            [12] 1140 	addc	a,#0x00
      0001BA F2               [24] 1141 	movx	@r0,a
                                   1142 ;	radio/radio.c:338: register_write(EZRADIOPRO_INTERRUPT_ENABLE_1, 0);
      0001BB C0 07            [24] 1143 	push	ar7
      0001BD E4               [12] 1144 	clr	a
      0001BE C0 E0            [24] 1145 	push	acc
      0001C0 75 82 05         [24] 1146 	mov	dpl,#0x05
      0001C3 12r08r52         [24] 1147 	lcall	_register_write
      0001C6 15 81            [12] 1148 	dec	sp
                                   1149 ;	radio/radio.c:339: register_write(EZRADIOPRO_INTERRUPT_ENABLE_2, 0);
      0001C8 E4               [12] 1150 	clr	a
      0001C9 C0 E0            [24] 1151 	push	acc
      0001CB 75 82 06         [24] 1152 	mov	dpl,#0x06
      0001CE 12r08r52         [24] 1153 	lcall	_register_write
      0001D1 15 81            [12] 1154 	dec	sp
                                   1155 ;	radio/radio.c:341: preamble_detected = 0;
      0001D3 C2*01            [12] 1156 	clr	_preamble_detected
                                   1157 ;	radio/radio.c:342: transmit_started = false;
      0001D5 C2*03            [12] 1158 	clr	_radio_transmit_simple_transmit_started_1_168
                                   1159 ;	radio/radio.c:345: register_write(EZRADIOPRO_OPERATING_AND_FUNCTION_CONTROL_1, EZRADIOPRO_TXON | EZRADIOPRO_XTON);
      0001D7 74 09            [12] 1160 	mov	a,#0x09
      0001D9 C0 E0            [24] 1161 	push	acc
      0001DB 75 82 07         [24] 1162 	mov	dpl,#0x07
      0001DE 12r08r52         [24] 1163 	lcall	_register_write
      0001E1 15 81            [12] 1164 	dec	sp
                                   1165 ;	radio/radio.c:350: tstart = timer2_tick();
      0001E3 12r00r00         [24] 1166 	lcall	_timer2_tick
      0001E6 AC 82            [24] 1167 	mov	r4,dpl
      0001E8 AD 83            [24] 1168 	mov	r5,dph
      0001EA D0 07            [24] 1169 	pop	ar7
                                   1170 ;	radio/radio.c:351: while ((uint16_t)(timer2_tick() - tstart) < timeout_ticks) {
      0001EC                       1171 00130$:
      0001EC C0 07            [24] 1172 	push	ar7
      0001EE C0 05            [24] 1173 	push	ar5
      0001F0 C0 04            [24] 1174 	push	ar4
      0001F2 12r00r00         [24] 1175 	lcall	_timer2_tick
      0001F5 AA 82            [24] 1176 	mov	r2,dpl
      0001F7 AB 83            [24] 1177 	mov	r3,dph
      0001F9 D0 04            [24] 1178 	pop	ar4
      0001FB D0 05            [24] 1179 	pop	ar5
      0001FD D0 07            [24] 1180 	pop	ar7
      0001FF EA               [12] 1181 	mov	a,r2
      000200 C3               [12] 1182 	clr	c
      000201 9C               [12] 1183 	subb	a,r4
      000202 FA               [12] 1184 	mov	r2,a
      000203 EB               [12] 1185 	mov	a,r3
      000204 9D               [12] 1186 	subb	a,r5
      000205 FB               [12] 1187 	mov	r3,a
      000206 78r19            [12] 1188 	mov	r0,#_radio_transmit_simple_PARM_3
      000208 C3               [12] 1189 	clr	c
      000209 E2               [24] 1190 	movx	a,@r0
      00020A F5 F0            [12] 1191 	mov	b,a
      00020C EA               [12] 1192 	mov	a,r2
      00020D 95 F0            [12] 1193 	subb	a,b
      00020F 08               [12] 1194 	inc	r0
      000210 E2               [24] 1195 	movx	a,@r0
      000211 F5 F0            [12] 1196 	mov	b,a
      000213 EB               [12] 1197 	mov	a,r3
      000214 95 F0            [12] 1198 	subb	a,b
      000216 40 03            [24] 1199 	jc	00199$
      000218 02r03r25         [24] 1200 	ljmp	00132$
      00021B                       1201 00199$:
                                   1202 ;	radio/radio.c:360: status = register_read(EZRADIOPRO_INTERRUPT_STATUS_1);
      00021B 75 82 03         [24] 1203 	mov	dpl,#0x03
      00021E C0 07            [24] 1204 	push	ar7
      000220 C0 05            [24] 1205 	push	ar5
      000222 C0 04            [24] 1206 	push	ar4
      000224 12r08r88         [24] 1207 	lcall	_register_read
      000227 AB 82            [24] 1208 	mov	r3,dpl
      000229 D0 04            [24] 1209 	pop	ar4
      00022B D0 05            [24] 1210 	pop	ar5
      00022D D0 07            [24] 1211 	pop	ar7
                                   1212 ;	radio/radio.c:361: if (transmit_started && length != 0 && (status & EZRADIOPRO_ITXFFAEM)) {
      00022F 30*03 40         [24] 1213 	jnb	_radio_transmit_simple_transmit_started_1_168,00108$
      000232 EF               [12] 1214 	mov	a,r7
      000233 60 3D            [24] 1215 	jz	00108$
      000235 EB               [12] 1216 	mov	a,r3
      000236 30 E5 39         [24] 1217 	jnb	acc.5,00108$
                                   1218 ;	radio/radio.c:368: n = 4;
      000239 7E 04            [12] 1219 	mov	r6,#0x04
                                   1220 ;	radio/radio.c:369: if (n > length) {
      00023B BF 04 00         [24] 1221 	cjne	r7,#0x04,00203$
      00023E                       1222 00203$:
      00023E 50 02            [24] 1223 	jnc	00106$
                                   1224 ;	radio/radio.c:370: n = length;
      000240 8F 06            [24] 1225 	mov	ar6,r7
      000242                       1226 00106$:
                                   1227 ;	radio/radio.c:372: radio_write_transmit_fifo(n, buf);
      000242 78r17            [12] 1228 	mov	r0,#_radio_transmit_simple_PARM_2
      000244 79r15            [12] 1229 	mov	r1,#_radio_write_transmit_fifo_PARM_2
      000246 E2               [24] 1230 	movx	a,@r0
      000247 F3               [24] 1231 	movx	@r1,a
      000248 08               [12] 1232 	inc	r0
      000249 E2               [24] 1233 	movx	a,@r0
      00024A 09               [12] 1234 	inc	r1
      00024B F3               [24] 1235 	movx	@r1,a
      00024C 8E 82            [24] 1236 	mov	dpl,r6
      00024E C0 07            [24] 1237 	push	ar7
      000250 C0 06            [24] 1238 	push	ar6
      000252 C0 05            [24] 1239 	push	ar5
      000254 C0 04            [24] 1240 	push	ar4
      000256 12r00r88         [24] 1241 	lcall	_radio_write_transmit_fifo
      000259 D0 04            [24] 1242 	pop	ar4
      00025B D0 05            [24] 1243 	pop	ar5
      00025D D0 06            [24] 1244 	pop	ar6
      00025F D0 07            [24] 1245 	pop	ar7
                                   1246 ;	radio/radio.c:373: length -= n;
      000261 EF               [12] 1247 	mov	a,r7
      000262 C3               [12] 1248 	clr	c
      000263 9E               [12] 1249 	subb	a,r6
      000264 FF               [12] 1250 	mov	r7,a
                                   1251 ;	radio/radio.c:374: buf += n;
      000265 78r17            [12] 1252 	mov	r0,#_radio_transmit_simple_PARM_2
      000267 E2               [24] 1253 	movx	a,@r0
      000268 2E               [12] 1254 	add	a,r6
      000269 F2               [24] 1255 	movx	@r0,a
      00026A 08               [12] 1256 	inc	r0
      00026B E2               [24] 1257 	movx	a,@r0
      00026C 34 00            [12] 1258 	addc	a,#0x00
      00026E F2               [24] 1259 	movx	@r0,a
                                   1260 ;	radio/radio.c:375: continue;
      00026F 02r01rEC         [24] 1261 	ljmp	00130$
      000272                       1262 00108$:
                                   1263 ;	radio/radio.c:377: if (transmit_started && length != 0 && (status & EZRADIOPRO_ITXFFAFULL) == 0) {
      000272 30*03 40         [24] 1264 	jnb	_radio_transmit_simple_transmit_started_1_168,00114$
      000275 EF               [12] 1265 	mov	a,r7
      000276 60 3D            [24] 1266 	jz	00114$
      000278 EB               [12] 1267 	mov	a,r3
      000279 20 E6 39         [24] 1268 	jb	acc.6,00114$
                                   1269 ;	radio/radio.c:381: n = 4;
      00027C 7E 04            [12] 1270 	mov	r6,#0x04
                                   1271 ;	radio/radio.c:382: if (n > length) {
      00027E BF 04 00         [24] 1272 	cjne	r7,#0x04,00208$
      000281                       1273 00208$:
      000281 50 02            [24] 1274 	jnc	00112$
                                   1275 ;	radio/radio.c:383: n = length;
      000283 8F 06            [24] 1276 	mov	ar6,r7
      000285                       1277 00112$:
                                   1278 ;	radio/radio.c:385: radio_write_transmit_fifo(n, buf);
      000285 78r17            [12] 1279 	mov	r0,#_radio_transmit_simple_PARM_2
      000287 79r15            [12] 1280 	mov	r1,#_radio_write_transmit_fifo_PARM_2
      000289 E2               [24] 1281 	movx	a,@r0
      00028A F3               [24] 1282 	movx	@r1,a
      00028B 08               [12] 1283 	inc	r0
      00028C E2               [24] 1284 	movx	a,@r0
      00028D 09               [12] 1285 	inc	r1
      00028E F3               [24] 1286 	movx	@r1,a
      00028F 8E 82            [24] 1287 	mov	dpl,r6
      000291 C0 07            [24] 1288 	push	ar7
      000293 C0 06            [24] 1289 	push	ar6
      000295 C0 05            [24] 1290 	push	ar5
      000297 C0 04            [24] 1291 	push	ar4
      000299 12r00r88         [24] 1292 	lcall	_radio_write_transmit_fifo
      00029C D0 04            [24] 1293 	pop	ar4
      00029E D0 05            [24] 1294 	pop	ar5
      0002A0 D0 06            [24] 1295 	pop	ar6
      0002A2 D0 07            [24] 1296 	pop	ar7
                                   1297 ;	radio/radio.c:386: length -= n;
      0002A4 EF               [12] 1298 	mov	a,r7
      0002A5 C3               [12] 1299 	clr	c
      0002A6 9E               [12] 1300 	subb	a,r6
      0002A7 FF               [12] 1301 	mov	r7,a
                                   1302 ;	radio/radio.c:387: buf += n;
      0002A8 78r17            [12] 1303 	mov	r0,#_radio_transmit_simple_PARM_2
      0002AA E2               [24] 1304 	movx	a,@r0
      0002AB 2E               [12] 1305 	add	a,r6
      0002AC F2               [24] 1306 	movx	@r0,a
      0002AD 08               [12] 1307 	inc	r0
      0002AE E2               [24] 1308 	movx	a,@r0
      0002AF 34 00            [12] 1309 	addc	a,#0x00
      0002B1 F2               [24] 1310 	movx	@r0,a
                                   1311 ;	radio/radio.c:388: continue;
      0002B2 02r01rEC         [24] 1312 	ljmp	00130$
      0002B5                       1313 00114$:
                                   1314 ;	radio/radio.c:391: if (status & EZRADIOPRO_IFFERR) {
      0002B5 EB               [12] 1315 	mov	a,r3
      0002B6 30 E7 20         [24] 1316 	jnb	acc.7,00120$
                                   1317 ;	radio/radio.c:393: radio_clear_transmit_fifo();
      0002B9 12r01r09         [24] 1318 	lcall	_radio_clear_transmit_fifo
                                   1319 ;	radio/radio.c:395: if (errors.tx_errors != 0xFFFF) {
      0002BC 78r02            [12] 1320 	mov	r0,#(_errors + 0x0002)
      0002BE E2               [24] 1321 	movx	a,@r0
      0002BF FA               [12] 1322 	mov	r2,a
      0002C0 08               [12] 1323 	inc	r0
      0002C1 E2               [24] 1324 	movx	a,@r0
      0002C2 FE               [12] 1325 	mov	r6,a
      0002C3 BA FF 05         [24] 1326 	cjne	r2,#0xFF,00211$
      0002C6 BE FF 02         [24] 1327 	cjne	r6,#0xFF,00211$
      0002C9 80 0C            [24] 1328 	sjmp	00118$
      0002CB                       1329 00211$:
                                   1330 ;	radio/radio.c:396: errors.tx_errors++;
      0002CB 0A               [12] 1331 	inc	r2
      0002CC BA 00 01         [24] 1332 	cjne	r2,#0x00,00212$
      0002CF 0E               [12] 1333 	inc	r6
      0002D0                       1334 00212$:
      0002D0 78r02            [12] 1335 	mov	r0,#(_errors + 0x0002)
      0002D2 EA               [12] 1336 	mov	a,r2
      0002D3 F2               [24] 1337 	movx	@r0,a
      0002D4 08               [12] 1338 	inc	r0
      0002D5 EE               [12] 1339 	mov	a,r6
      0002D6 F2               [24] 1340 	movx	@r0,a
      0002D7                       1341 00118$:
                                   1342 ;	radio/radio.c:401: return false;
      0002D7 C3               [12] 1343 	clr	c
      0002D8 22               [24] 1344 	ret
      0002D9                       1345 00120$:
                                   1346 ;	radio/radio.c:406: status = register_read(EZRADIOPRO_DEVICE_STATUS);
      0002D9 75 82 02         [24] 1347 	mov	dpl,#0x02
      0002DC C0 07            [24] 1348 	push	ar7
      0002DE C0 05            [24] 1349 	push	ar5
      0002E0 C0 04            [24] 1350 	push	ar4
      0002E2 12r08r88         [24] 1351 	lcall	_register_read
      0002E5 AB 82            [24] 1352 	mov	r3,dpl
      0002E7 D0 04            [24] 1353 	pop	ar4
      0002E9 D0 05            [24] 1354 	pop	ar5
      0002EB D0 07            [24] 1355 	pop	ar7
                                   1356 ;	radio/radio.c:407: if (status & 0x02) {
      0002ED EB               [12] 1357 	mov	a,r3
      0002EE 30 E1 05         [24] 1358 	jnb	acc.1,00122$
                                   1359 ;	radio/radio.c:409: transmit_started = true;
      0002F1 D2*03            [12] 1360 	setb	_radio_transmit_simple_transmit_started_1_168
                                   1361 ;	radio/radio.c:410: continue;
      0002F3 02r01rEC         [24] 1362 	ljmp	00130$
      0002F6                       1363 00122$:
                                   1364 ;	radio/radio.c:412: if (transmit_started && (status & 0x02) == 0) {
      0002F6 20*03 03         [24] 1365 	jb	_radio_transmit_simple_transmit_started_1_168,00214$
      0002F9 02r01rEC         [24] 1366 	ljmp	00130$
      0002FC                       1367 00214$:
      0002FC EB               [12] 1368 	mov	a,r3
      0002FD 30 E1 03         [24] 1369 	jnb	acc.1,00215$
      000300 02r01rEC         [24] 1370 	ljmp	00130$
      000303                       1371 00215$:
                                   1372 ;	radio/radio.c:415: if (length != 0) {
      000303 EF               [12] 1373 	mov	a,r7
      000304 60 1D            [24] 1374 	jz	00126$
                                   1375 ;	radio/radio.c:417: if (errors.tx_errors != 0xFFFF) {
      000306 78r02            [12] 1376 	mov	r0,#(_errors + 0x0002)
      000308 E2               [24] 1377 	movx	a,@r0
      000309 FE               [12] 1378 	mov	r6,a
      00030A 08               [12] 1379 	inc	r0
      00030B E2               [24] 1380 	movx	a,@r0
      00030C FF               [12] 1381 	mov	r7,a
      00030D BE FF 05         [24] 1382 	cjne	r6,#0xFF,00217$
      000310 BF FF 02         [24] 1383 	cjne	r7,#0xFF,00217$
      000313 80 0C            [24] 1384 	sjmp	00124$
      000315                       1385 00217$:
                                   1386 ;	radio/radio.c:418: errors.tx_errors++;
      000315 0E               [12] 1387 	inc	r6
      000316 BE 00 01         [24] 1388 	cjne	r6,#0x00,00218$
      000319 0F               [12] 1389 	inc	r7
      00031A                       1390 00218$:
      00031A 78r02            [12] 1391 	mov	r0,#(_errors + 0x0002)
      00031C EE               [12] 1392 	mov	a,r6
      00031D F2               [24] 1393 	movx	@r0,a
      00031E 08               [12] 1394 	inc	r0
      00031F EF               [12] 1395 	mov	a,r7
      000320 F2               [24] 1396 	movx	@r0,a
      000321                       1397 00124$:
                                   1398 ;	radio/radio.c:423: return false;
      000321 C3               [12] 1399 	clr	c
      000322 22               [24] 1400 	ret
      000323                       1401 00126$:
                                   1402 ;	radio/radio.c:428: return true;			
      000323 D3               [12] 1403 	setb	c
      000324 22               [24] 1404 	ret
      000325                       1405 00132$:
                                   1406 ;	radio/radio.c:442: if (errors.tx_errors != 0xFFFF) {
      000325 78r02            [12] 1407 	mov	r0,#(_errors + 0x0002)
      000327 E2               [24] 1408 	movx	a,@r0
      000328 FE               [12] 1409 	mov	r6,a
      000329 08               [12] 1410 	inc	r0
      00032A E2               [24] 1411 	movx	a,@r0
      00032B FF               [12] 1412 	mov	r7,a
      00032C BE FF 05         [24] 1413 	cjne	r6,#0xFF,00219$
      00032F BF FF 02         [24] 1414 	cjne	r7,#0xFF,00219$
      000332 80 0C            [24] 1415 	sjmp	00134$
      000334                       1416 00219$:
                                   1417 ;	radio/radio.c:443: errors.tx_errors++;
      000334 0E               [12] 1418 	inc	r6
      000335 BE 00 01         [24] 1419 	cjne	r6,#0x00,00220$
      000338 0F               [12] 1420 	inc	r7
      000339                       1421 00220$:
      000339 78r02            [12] 1422 	mov	r0,#(_errors + 0x0002)
      00033B EE               [12] 1423 	mov	a,r6
      00033C F2               [24] 1424 	movx	@r0,a
      00033D 08               [12] 1425 	inc	r0
      00033E EF               [12] 1426 	mov	a,r7
      00033F F2               [24] 1427 	movx	@r0,a
      000340                       1428 00134$:
                                   1429 ;	radio/radio.c:446: return false;
      000340 C3               [12] 1430 	clr	c
      000341 22               [24] 1431 	ret
                                   1432 ;------------------------------------------------------------
                                   1433 ;Allocation info for local variables in function 'radio_transmit'
                                   1434 ;------------------------------------------------------------
                                   1435 ;destination               Allocated with name '_radio_transmit_PARM_3'
                                   1436 ;length                    Allocated with name '_radio_transmit_length_1_183'
                                   1437 ;------------------------------------------------------------
                                   1438 ;	radio/radio.c:510: radio_transmit(uint8_t length, __xdata uint8_t * __pdata buf, uint16_t destination, __pdata uint16_t timeout_ticks) __nonbanked
                                   1439 ;	-----------------------------------------
                                   1440 ;	 function radio_transmit
                                   1441 ;	-----------------------------------------
      000342                       1442 _radio_transmit:
      000342 E5 82            [12] 1443 	mov	a,dpl
      000344 90r01r01         [24] 1444 	mov	dptr,#_radio_transmit_length_1_183
      000347 F0               [24] 1445 	movx	@dptr,a
                                   1446 ;	radio/radio.c:513: EX0_SAVE_DISABLE;
      000348 A2 A8            [12] 1447 	mov	c,_EX0
      00034A 92*05            [24] 1448 	mov	_radio_transmit_EX0_saved_1_184,c
      00034C C2 A8            [12] 1449 	clr	_EX0
                                   1450 ;	radio/radio.c:519: register_write(EZRADIOPRO_TRANSMIT_HEADER_3, destination >> 8);
      00034E 90r00rFF         [24] 1451 	mov	dptr,#_radio_transmit_PARM_3
      000351 E0               [24] 1452 	movx	a,@dptr
      000352 FE               [12] 1453 	mov	r6,a
      000353 A3               [24] 1454 	inc	dptr
      000354 E0               [24] 1455 	movx	a,@dptr
      000355 FF               [12] 1456 	mov	r7,a
      000356 FD               [12] 1457 	mov	r5,a
      000357 C0 07            [24] 1458 	push	ar7
      000359 C0 06            [24] 1459 	push	ar6
      00035B C0 05            [24] 1460 	push	ar5
      00035D 75 82 3A         [24] 1461 	mov	dpl,#0x3A
      000360 12r08r52         [24] 1462 	lcall	_register_write
      000363 15 81            [12] 1463 	dec	sp
      000365 D0 06            [24] 1464 	pop	ar6
      000367 D0 07            [24] 1465 	pop	ar7
                                   1466 ;	radio/radio.c:520: register_write(EZRADIOPRO_TRANSMIT_HEADER_2, destination & 0xFF);
      000369 C0 06            [24] 1467 	push	ar6
      00036B 75 82 3B         [24] 1468 	mov	dpl,#0x3B
      00036E 12r08r52         [24] 1469 	lcall	_register_write
      000371 15 81            [12] 1470 	dec	sp
                                   1471 ;	radio/radio.c:529: ret = radio_transmit_simple(length, buf, timeout_ticks);
      000373 90r01r01         [24] 1472 	mov	dptr,#_radio_transmit_length_1_183
      000376 E0               [24] 1473 	movx	a,@dptr
      000377 FF               [12] 1474 	mov	r7,a
      000378 78r1B            [12] 1475 	mov	r0,#_radio_transmit_PARM_2
      00037A 79r17            [12] 1476 	mov	r1,#_radio_transmit_simple_PARM_2
      00037C E2               [24] 1477 	movx	a,@r0
      00037D F3               [24] 1478 	movx	@r1,a
      00037E 08               [12] 1479 	inc	r0
      00037F E2               [24] 1480 	movx	a,@r0
      000380 09               [12] 1481 	inc	r1
      000381 F3               [24] 1482 	movx	@r1,a
      000382 78r1D            [12] 1483 	mov	r0,#_radio_transmit_PARM_4
      000384 79r19            [12] 1484 	mov	r1,#_radio_transmit_simple_PARM_3
      000386 E2               [24] 1485 	movx	a,@r0
      000387 F3               [24] 1486 	movx	@r1,a
      000388 08               [12] 1487 	inc	r0
      000389 E2               [24] 1488 	movx	a,@r0
      00038A 09               [12] 1489 	inc	r1
      00038B F3               [24] 1490 	movx	@r1,a
      00038C 8F 82            [24] 1491 	mov	dpl,r7
      00038E 12r01r59         [24] 1492 	lcall	_radio_transmit_simple
      000391 92*04            [24] 1493 	mov	_radio_transmit_ret_1_184,c
                                   1494 ;	radio/radio.c:535: EX0_RESTORE;
      000393 A2*05            [12] 1495 	mov	c,_radio_transmit_EX0_saved_1_184
      000395 92 A8            [24] 1496 	mov	_EX0,c
                                   1497 ;	radio/radio.c:536: return ret;
      000397 A2*04            [12] 1498 	mov	c,_radio_transmit_ret_1_184
      000399 22               [24] 1499 	ret
                                   1500 ;------------------------------------------------------------
                                   1501 ;Allocation info for local variables in function 'radio_receiver_on'
                                   1502 ;------------------------------------------------------------
                                   1503 ;	radio/radio.c:543: radio_receiver_on(void) __nonbanked
                                   1504 ;	-----------------------------------------
                                   1505 ;	 function radio_receiver_on
                                   1506 ;	-----------------------------------------
      00039A                       1507 _radio_receiver_on:
                                   1508 ;	radio/radio.c:545: EX0 = 0;
      00039A C2 A8            [12] 1509 	clr	_EX0
                                   1510 ;	radio/radio.c:547: packet_received = 0;
      00039C C2*00            [12] 1511 	clr	_packet_received
                                   1512 ;	radio/radio.c:548: receive_packet_length = 0;
      00039E 78r00            [12] 1513 	mov	r0,#_receive_packet_length
      0003A0 E4               [12] 1514 	clr	a
      0003A1 F2               [24] 1515 	movx	@r0,a
                                   1516 ;	radio/radio.c:549: preamble_detected = 0;
      0003A2 C2*01            [12] 1517 	clr	_preamble_detected
                                   1518 ;	radio/radio.c:550: partial_packet_length = 0;
      0003A4 78r01            [12] 1519 	mov	r0,#_partial_packet_length
      0003A6 E4               [12] 1520 	clr	a
      0003A7 F2               [24] 1521 	movx	@r0,a
                                   1522 ;	radio/radio.c:553: register_write(EZRADIOPRO_INTERRUPT_ENABLE_1, RADIO_RX_INTERRUPTS);
      0003A8 74 13            [12] 1523 	mov	a,#0x13
      0003AA C0 E0            [24] 1524 	push	acc
      0003AC 75 82 05         [24] 1525 	mov	dpl,#0x05
      0003AF 12r08r52         [24] 1526 	lcall	_register_write
      0003B2 15 81            [12] 1527 	dec	sp
                                   1528 ;	radio/radio.c:554: register_write(EZRADIOPRO_INTERRUPT_ENABLE_2, EZRADIOPRO_ENPREAVAL);
      0003B4 74 40            [12] 1529 	mov	a,#0x40
      0003B6 C0 E0            [24] 1530 	push	acc
      0003B8 75 82 06         [24] 1531 	mov	dpl,#0x06
      0003BB 12r08r52         [24] 1532 	lcall	_register_write
      0003BE 15 81            [12] 1533 	dec	sp
                                   1534 ;	radio/radio.c:556: clear_status_registers();
      0003C0 12r08rFC         [24] 1535 	lcall	_clear_status_registers
                                   1536 ;	radio/radio.c:557: radio_clear_transmit_fifo();
      0003C3 12r01r09         [24] 1537 	lcall	_radio_clear_transmit_fifo
                                   1538 ;	radio/radio.c:558: radio_clear_receive_fifo();
      0003C6 12r01r31         [24] 1539 	lcall	_radio_clear_receive_fifo
                                   1540 ;	radio/radio.c:561: register_write(EZRADIOPRO_OPERATING_AND_FUNCTION_CONTROL_1, EZRADIOPRO_RXON | EZRADIOPRO_XTON);
      0003C9 74 05            [12] 1541 	mov	a,#0x05
      0003CB C0 E0            [24] 1542 	push	acc
      0003CD 75 82 07         [24] 1543 	mov	dpl,#0x07
      0003D0 12r08r52         [24] 1544 	lcall	_register_write
      0003D3 15 81            [12] 1545 	dec	sp
                                   1546 ;	radio/radio.c:564: EX0 = 1;
      0003D5 D2 A8            [12] 1547 	setb	_EX0
                                   1548 ;	radio/radio.c:566: return true;
      0003D7 D3               [12] 1549 	setb	c
      0003D8 22               [24] 1550 	ret
                                   1551 ;------------------------------------------------------------
                                   1552 ;Allocation info for local variables in function 'radio_initialise'
                                   1553 ;------------------------------------------------------------
                                   1554 ;status                    Allocated with name '_radio_initialise_status_1_188'
                                   1555 ;------------------------------------------------------------
                                   1556 ;	radio/radio.c:573: radio_initialise(void) __nonbanked
                                   1557 ;	-----------------------------------------
                                   1558 ;	 function radio_initialise
                                   1559 ;	-----------------------------------------
      0003D9                       1560 _radio_initialise:
                                   1561 ;	radio/radio.c:577: delay_msec(50);
      0003D9 90 00 32         [24] 1562 	mov	dptr,#0x0032
      0003DC 12r00r00         [24] 1563 	lcall	_delay_msec
                                   1564 ;	radio/radio.c:580: status = register_read(EZRADIOPRO_DEVICE_VERSION);
      0003DF 75 82 01         [24] 1565 	mov	dpl,#0x01
      0003E2 12r08r88         [24] 1566 	lcall	_register_read
      0003E5 AF 82            [24] 1567 	mov	r7,dpl
                                   1568 ;	radio/radio.c:581: if (status == 0xFF || status < 5) {
      0003E7 BF FF 02         [24] 1569 	cjne	r7,#0xFF,00119$
      0003EA 80 05            [24] 1570 	sjmp	00101$
      0003EC                       1571 00119$:
      0003EC BF 05 00         [24] 1572 	cjne	r7,#0x05,00120$
      0003EF                       1573 00120$:
      0003EF 50 02            [24] 1574 	jnc	00102$
      0003F1                       1575 00101$:
                                   1576 ;	radio/radio.c:583: return false;
      0003F1 C3               [12] 1577 	clr	c
      0003F2 22               [24] 1578 	ret
      0003F3                       1579 00102$:
                                   1580 ;	radio/radio.c:587: software_reset();
      0003F3 12r09r5C         [24] 1581 	lcall	_software_reset
                                   1582 ;	radio/radio.c:589: status = register_read(EZRADIOPRO_DEVICE_VERSION);
      0003F6 75 82 01         [24] 1583 	mov	dpl,#0x01
      0003F9 12r08r88         [24] 1584 	lcall	_register_read
                                   1585 ;	radio/radio.c:591: if ((status & EZRADIOPRO_IPOR) == 0) {
      0003FC E5 82            [12] 1586 	mov	a,dpl
      0003FE FF               [12] 1587 	mov	r7,a
      0003FF 20 E0 06         [24] 1588 	jb	acc.0,00105$
                                   1589 ;	radio/radio.c:593: return software_reset();
      000402 12r09r5C         [24] 1590 	lcall	_software_reset
      000405 92*06            [24] 1591 	mov  _radio_initialise_sloc0_1_0,c
      000407 22               [24] 1592 	ret
      000408                       1593 00105$:
                                   1594 ;	radio/radio.c:596: if (status & EZRADIOPRO_ICHIPRDY) {
      000408 EF               [12] 1595 	mov	a,r7
      000409 30 E1 02         [24] 1596 	jnb	acc.1,00107$
                                   1597 ;	radio/radio.c:598: return true;
      00040C D3               [12] 1598 	setb	c
      00040D 22               [24] 1599 	ret
      00040E                       1600 00107$:
                                   1601 ;	radio/radio.c:601: return false;
      00040E C3               [12] 1602 	clr	c
      00040F 22               [24] 1603 	ret
                                   1604 ;------------------------------------------------------------
                                   1605 ;Allocation info for local variables in function 'radio_set_frequency'
                                   1606 ;------------------------------------------------------------
                                   1607 ;	radio/radio.c:608: radio_set_frequency(__pdata uint32_t value) __nonbanked
                                   1608 ;	-----------------------------------------
                                   1609 ;	 function radio_set_frequency
                                   1610 ;	-----------------------------------------
      000410                       1611 _radio_set_frequency:
      000410 AC 82            [24] 1612 	mov	r4,dpl
      000412 AD 83            [24] 1613 	mov	r5,dph
      000414 AE F0            [24] 1614 	mov	r6,b
      000416 FF               [12] 1615 	mov	r7,a
                                   1616 ;	radio/radio.c:610: if (value < 240000000UL || value > 935000000UL) {
      000417 C3               [12] 1617 	clr	c
      000418 ED               [12] 1618 	mov	a,r5
      000419 94 1C            [12] 1619 	subb	a,#0x1C
      00041B EE               [12] 1620 	mov	a,r6
      00041C 94 4E            [12] 1621 	subb	a,#0x4E
      00041E EF               [12] 1622 	mov	a,r7
      00041F 94 0E            [12] 1623 	subb	a,#0x0E
      000421 40 0E            [24] 1624 	jc	00101$
      000423 74 C0            [12] 1625 	mov	a,#0xC0
      000425 9C               [12] 1626 	subb	a,r4
      000426 74 F7            [12] 1627 	mov	a,#0xF7
      000428 9D               [12] 1628 	subb	a,r5
      000429 74 BA            [12] 1629 	mov	a,#0xBA
      00042B 9E               [12] 1630 	subb	a,r6
      00042C 74 37            [12] 1631 	mov	a,#0x37
      00042E 9F               [12] 1632 	subb	a,r7
      00042F 50 02            [24] 1633 	jnc	00102$
      000431                       1634 00101$:
                                   1635 ;	radio/radio.c:611: return false;
      000431 C3               [12] 1636 	clr	c
      000432 22               [24] 1637 	ret
      000433                       1638 00102$:
                                   1639 ;	radio/radio.c:613: settings.frequency = value;
      000433 78r07            [12] 1640 	mov	r0,#_settings
      000435 EC               [12] 1641 	mov	a,r4
      000436 F2               [24] 1642 	movx	@r0,a
      000437 08               [12] 1643 	inc	r0
      000438 ED               [12] 1644 	mov	a,r5
      000439 F2               [24] 1645 	movx	@r0,a
      00043A 08               [12] 1646 	inc	r0
      00043B EE               [12] 1647 	mov	a,r6
      00043C F2               [24] 1648 	movx	@r0,a
      00043D 08               [12] 1649 	inc	r0
      00043E EF               [12] 1650 	mov	a,r7
      00043F F2               [24] 1651 	movx	@r0,a
                                   1652 ;	radio/radio.c:614: set_frequency_registers(value);
      000440 8C 82            [24] 1653 	mov	dpl,r4
      000442 8D 83            [24] 1654 	mov	dph,r5
      000444 8E F0            [24] 1655 	mov	b,r6
      000446 EF               [12] 1656 	mov	a,r7
      000447 12r09rC8         [24] 1657 	lcall	_set_frequency_registers
                                   1658 ;	radio/radio.c:615: return true;
      00044A D3               [12] 1659 	setb	c
      00044B 22               [24] 1660 	ret
                                   1661 ;------------------------------------------------------------
                                   1662 ;Allocation info for local variables in function 'radio_set_channel_spacing'
                                   1663 ;------------------------------------------------------------
                                   1664 ;	radio/radio.c:622: radio_set_channel_spacing(__pdata uint32_t value) __nonbanked
                                   1665 ;	-----------------------------------------
                                   1666 ;	 function radio_set_channel_spacing
                                   1667 ;	-----------------------------------------
      00044C                       1668 _radio_set_channel_spacing:
      00044C AC 82            [24] 1669 	mov	r4,dpl
      00044E AD 83            [24] 1670 	mov	r5,dph
      000450 AE F0            [24] 1671 	mov	r6,b
      000452 FF               [12] 1672 	mov	r7,a
                                   1673 ;	radio/radio.c:624: if (value > 2550000L)
      000453 C3               [12] 1674 	clr	c
      000454 74 F0            [12] 1675 	mov	a,#0xF0
      000456 9C               [12] 1676 	subb	a,r4
      000457 74 E8            [12] 1677 	mov	a,#0xE8
      000459 9D               [12] 1678 	subb	a,r5
      00045A 74 26            [12] 1679 	mov	a,#0x26
      00045C 9E               [12] 1680 	subb	a,r6
      00045D E4               [12] 1681 	clr	a
      00045E 9F               [12] 1682 	subb	a,r7
      00045F 50 02            [24] 1683 	jnc	00102$
                                   1684 ;	radio/radio.c:625: return false;
      000461 C3               [12] 1685 	clr	c
      000462 22               [24] 1686 	ret
      000463                       1687 00102$:
                                   1688 ;	radio/radio.c:626: value = scale_uint32(value, 10000);
      000463 78r1F            [12] 1689 	mov	r0,#_scale_uint32_PARM_2
      000465 74 10            [12] 1690 	mov	a,#0x10
      000467 F2               [24] 1691 	movx	@r0,a
      000468 08               [12] 1692 	inc	r0
      000469 74 27            [12] 1693 	mov	a,#0x27
      00046B F2               [24] 1694 	movx	@r0,a
      00046C 08               [12] 1695 	inc	r0
      00046D E4               [12] 1696 	clr	a
      00046E F2               [24] 1697 	movx	@r0,a
      00046F 08               [12] 1698 	inc	r0
      000470 F2               [24] 1699 	movx	@r0,a
      000471 8C 82            [24] 1700 	mov	dpl,r4
      000473 8D 83            [24] 1701 	mov	dph,r5
      000475 8E F0            [24] 1702 	mov	b,r6
      000477 EF               [12] 1703 	mov	a,r7
      000478 12r09r08         [24] 1704 	lcall	_scale_uint32
      00047B AC 82            [24] 1705 	mov	r4,dpl
      00047D AD 83            [24] 1706 	mov	r5,dph
      00047F AE F0            [24] 1707 	mov	r6,b
      000481 FF               [12] 1708 	mov	r7,a
                                   1709 ;	radio/radio.c:627: settings.channel_spacing = value;
      000482 78r0B            [12] 1710 	mov	r0,#(_settings + 0x0004)
      000484 EC               [12] 1711 	mov	a,r4
      000485 F2               [24] 1712 	movx	@r0,a
      000486 08               [12] 1713 	inc	r0
      000487 ED               [12] 1714 	mov	a,r5
      000488 F2               [24] 1715 	movx	@r0,a
      000489 08               [12] 1716 	inc	r0
      00048A EE               [12] 1717 	mov	a,r6
      00048B F2               [24] 1718 	movx	@r0,a
      00048C 08               [12] 1719 	inc	r0
      00048D EF               [12] 1720 	mov	a,r7
      00048E F2               [24] 1721 	movx	@r0,a
                                   1722 ;	radio/radio.c:628: register_write(EZRADIOPRO_FREQUENCY_HOPPING_STEP_SIZE, value);
      00048F C0 04            [24] 1723 	push	ar4
      000491 75 82 7A         [24] 1724 	mov	dpl,#0x7A
      000494 12r08r52         [24] 1725 	lcall	_register_write
      000497 15 81            [12] 1726 	dec	sp
                                   1727 ;	radio/radio.c:629: return true;
      000499 D3               [12] 1728 	setb	c
      00049A 22               [24] 1729 	ret
                                   1730 ;------------------------------------------------------------
                                   1731 ;Allocation info for local variables in function 'radio_set_channel'
                                   1732 ;------------------------------------------------------------
                                   1733 ;channel                   Allocated with name '_radio_set_channel_channel_1_197'
                                   1734 ;------------------------------------------------------------
                                   1735 ;	radio/radio.c:635: radio_set_channel(uint8_t channel) __nonbanked
                                   1736 ;	-----------------------------------------
                                   1737 ;	 function radio_set_channel
                                   1738 ;	-----------------------------------------
      00049B                       1739 _radio_set_channel:
      00049B E5 82            [12] 1740 	mov	a,dpl
      00049D 90r01r02         [24] 1741 	mov	dptr,#_radio_set_channel_channel_1_197
      0004A0 F0               [24] 1742 	movx	@dptr,a
                                   1743 ;	radio/radio.c:637: if (channel != settings.current_channel) {
      0004A1 78r10            [12] 1744 	mov	r0,#(_settings + 0x0009)
      0004A3 E2               [24] 1745 	movx	a,@r0
      0004A4 FF               [12] 1746 	mov	r7,a
      0004A5 E0               [24] 1747 	movx	a,@dptr
      0004A6 FE               [12] 1748 	mov	r6,a
      0004A7 B5 07 01         [24] 1749 	cjne	a,ar7,00108$
      0004AA 22               [24] 1750 	ret
      0004AB                       1751 00108$:
                                   1752 ;	radio/radio.c:638: settings.current_channel = channel;
      0004AB 78r10            [12] 1753 	mov	r0,#(_settings + 0x0009)
      0004AD EE               [12] 1754 	mov	a,r6
      0004AE F2               [24] 1755 	movx	@r0,a
                                   1756 ;	radio/radio.c:639: register_write(EZRADIOPRO_FREQUENCY_HOPPING_CHANNEL_SELECT, channel);
      0004AF C0 06            [24] 1757 	push	ar6
      0004B1 75 82 79         [24] 1758 	mov	dpl,#0x79
      0004B4 12r08r52         [24] 1759 	lcall	_register_write
      0004B7 15 81            [12] 1760 	dec	sp
                                   1761 ;	radio/radio.c:640: preamble_detected = 0;
      0004B9 C2*01            [12] 1762 	clr	_preamble_detected
      0004BB 22               [24] 1763 	ret
                                   1764 ;------------------------------------------------------------
                                   1765 ;Allocation info for local variables in function 'radio_get_channel'
                                   1766 ;------------------------------------------------------------
                                   1767 ;	radio/radio.c:647: radio_get_channel(void) __nonbanked
                                   1768 ;	-----------------------------------------
                                   1769 ;	 function radio_get_channel
                                   1770 ;	-----------------------------------------
      0004BC                       1771 _radio_get_channel:
                                   1772 ;	radio/radio.c:649: return settings.current_channel;
      0004BC 78r10            [12] 1773 	mov	r0,#(_settings + 0x0009)
      0004BE E2               [24] 1774 	movx	a,@r0
      0004BF F5 82            [12] 1775 	mov	dpl,a
      0004C1 22               [24] 1776 	ret
                                   1777 ;------------------------------------------------------------
                                   1778 ;Allocation info for local variables in function 'radio_configure'
                                   1779 ;------------------------------------------------------------
                                   1780 ;	radio/radio.c:746: radio_configure(__pdata uint8_t air_rate) __nonbanked
                                   1781 ;	-----------------------------------------
                                   1782 ;	 function radio_configure
                                   1783 ;	-----------------------------------------
      0004C2                       1784 _radio_configure:
      0004C2 AF 82            [24] 1785 	mov	r7,dpl
                                   1786 ;	radio/radio.c:751: register_write(EZRADIOPRO_INTERRUPT_ENABLE_1, 0x00);
      0004C4 C0 07            [24] 1787 	push	ar7
      0004C6 E4               [12] 1788 	clr	a
      0004C7 C0 E0            [24] 1789 	push	acc
      0004C9 75 82 05         [24] 1790 	mov	dpl,#0x05
      0004CC 12r08r52         [24] 1791 	lcall	_register_write
      0004CF 15 81            [12] 1792 	dec	sp
                                   1793 ;	radio/radio.c:752: register_write(EZRADIOPRO_INTERRUPT_ENABLE_2, 0x00);
      0004D1 E4               [12] 1794 	clr	a
      0004D2 C0 E0            [24] 1795 	push	acc
      0004D4 75 82 06         [24] 1796 	mov	dpl,#0x06
      0004D7 12r08r52         [24] 1797 	lcall	_register_write
      0004DA 15 81            [12] 1798 	dec	sp
                                   1799 ;	radio/radio.c:754: clear_status_registers();
      0004DC 12r08rFC         [24] 1800 	lcall	_clear_status_registers
                                   1801 ;	radio/radio.c:764: register_write(EZRADIOPRO_GPIO0_CONFIGURATION, 0x15);	// RX state (output)
      0004DF 74 15            [12] 1802 	mov	a,#0x15
      0004E1 C0 E0            [24] 1803 	push	acc
      0004E3 75 82 0B         [24] 1804 	mov	dpl,#0x0B
      0004E6 12r08r52         [24] 1805 	lcall	_register_write
      0004E9 15 81            [12] 1806 	dec	sp
                                   1807 ;	radio/radio.c:765: register_write(EZRADIOPRO_GPIO1_CONFIGURATION, 0x12);	// TX state (output)
      0004EB 74 12            [12] 1808 	mov	a,#0x12
      0004ED C0 E0            [24] 1809 	push	acc
      0004EF 75 82 0C         [24] 1810 	mov	dpl,#0x0C
      0004F2 12r08r52         [24] 1811 	lcall	_register_write
      0004F5 15 81            [12] 1812 	dec	sp
                                   1813 ;	radio/radio.c:783: register_write(EZRADIOPRO_CRYSTAL_OSCILLATOR_LOAD_CAPACITANCE, EZRADIOPRO_OSC_CAP_VALUE);
      0004F7 74 CC            [12] 1814 	mov	a,#0xCC
      0004F9 C0 E0            [24] 1815 	push	acc
      0004FB 75 82 09         [24] 1816 	mov	dpl,#0x09
      0004FE 12r08r52         [24] 1817 	lcall	_register_write
      000501 15 81            [12] 1818 	dec	sp
      000503 D0 07            [24] 1819 	pop	ar7
                                   1820 ;	radio/radio.c:786: if (air_rate > 100) {
      000505 EF               [12] 1821 	mov	a,r7
      000506 24 9B            [12] 1822 	add	a,#0xff - 0x64
      000508 50 10            [24] 1823 	jnc	00102$
                                   1824 ;	radio/radio.c:787: register_write(EZRADIOPRO_CHARGEPUMP_CURRENT_TRIMMING_OVERRIDE, 0xC0);
      00050A C0 07            [24] 1825 	push	ar7
      00050C 74 C0            [12] 1826 	mov	a,#0xC0
      00050E C0 E0            [24] 1827 	push	acc
      000510 75 82 58         [24] 1828 	mov	dpl,#0x58
      000513 12r08r52         [24] 1829 	lcall	_register_write
      000516 15 81            [12] 1830 	dec	sp
      000518 D0 07            [24] 1831 	pop	ar7
      00051A                       1832 00102$:
                                   1833 ;	radio/radio.c:791: set_frequency_registers(settings.frequency);
      00051A 78r07            [12] 1834 	mov	r0,#_settings
      00051C E2               [24] 1835 	movx	a,@r0
      00051D FB               [12] 1836 	mov	r3,a
      00051E 08               [12] 1837 	inc	r0
      00051F E2               [24] 1838 	movx	a,@r0
      000520 FC               [12] 1839 	mov	r4,a
      000521 08               [12] 1840 	inc	r0
      000522 E2               [24] 1841 	movx	a,@r0
      000523 FD               [12] 1842 	mov	r5,a
      000524 08               [12] 1843 	inc	r0
      000525 E2               [24] 1844 	movx	a,@r0
      000526 8B 82            [24] 1845 	mov	dpl,r3
      000528 8C 83            [24] 1846 	mov	dph,r4
      00052A 8D F0            [24] 1847 	mov	b,r5
      00052C C0 07            [24] 1848 	push	ar7
      00052E 12r09rC8         [24] 1849 	lcall	_set_frequency_registers
                                   1850 ;	radio/radio.c:792: register_write(EZRADIOPRO_FREQUENCY_HOPPING_STEP_SIZE, settings.channel_spacing);
      000531 78r0B            [12] 1851 	mov	r0,#(_settings + 0x0004)
      000533 E2               [24] 1852 	movx	a,@r0
      000534 FB               [12] 1853 	mov	r3,a
      000535 08               [12] 1854 	inc	r0
      000536 E2               [24] 1855 	movx	a,@r0
      000537 08               [12] 1856 	inc	r0
      000538 E2               [24] 1857 	movx	a,@r0
      000539 08               [12] 1858 	inc	r0
      00053A E2               [24] 1859 	movx	a,@r0
      00053B C0 03            [24] 1860 	push	ar3
      00053D 75 82 7A         [24] 1861 	mov	dpl,#0x7A
      000540 12r08r52         [24] 1862 	lcall	_register_write
      000543 15 81            [12] 1863 	dec	sp
                                   1864 ;	radio/radio.c:810: EZRADIOPRO_DATA_ACCESS_CONTROL,
      000545 74 8D            [12] 1865 	mov	a,#0x8D
      000547 C0 E0            [24] 1866 	push	acc
      000549 75 82 30         [24] 1867 	mov	dpl,#0x30
      00054C 12r08r52         [24] 1868 	lcall	_register_write
      00054F 15 81            [12] 1869 	dec	sp
                                   1870 ;	radio/radio.c:816: register_write(EZRADIOPRO_HEADER_CONTROL_2, EZRADIOPRO_HDLEN_4BYTE | EZRADIOPRO_SYNCLEN_2BYTE);
      000551 74 42            [12] 1871 	mov	a,#0x42
      000553 C0 E0            [24] 1872 	push	acc
      000555 75 82 33         [24] 1873 	mov	dpl,#0x33
      000558 12r08r52         [24] 1874 	lcall	_register_write
      00055B 15 81            [12] 1875 	dec	sp
                                   1876 ;	radio/radio.c:818: register_write(EZRADIOPRO_HEADER_CONTROL_1, 0xCF);
      00055D 74 CF            [12] 1877 	mov	a,#0xCF
      00055F C0 E0            [24] 1878 	push	acc
      000561 75 82 32         [24] 1879 	mov	dpl,#0x32
      000564 12r08r52         [24] 1880 	lcall	_register_write
      000567 15 81            [12] 1881 	dec	sp
                                   1882 ;	radio/radio.c:819: register_write(EZRADIOPRO_HEADER_ENABLE_1, 0xFF);
      000569 74 FF            [12] 1883 	mov	a,#0xFF
      00056B C0 E0            [24] 1884 	push	acc
      00056D 75 82 45         [24] 1885 	mov	dpl,#0x45
      000570 12r08r52         [24] 1886 	lcall	_register_write
      000573 15 81            [12] 1887 	dec	sp
                                   1888 ;	radio/radio.c:820: register_write(EZRADIOPRO_HEADER_ENABLE_0, 0xFF);
      000575 74 FF            [12] 1889 	mov	a,#0xFF
      000577 C0 E0            [24] 1890 	push	acc
      000579 75 82 46         [24] 1891 	mov	dpl,#0x46
      00057C 12r08r52         [24] 1892 	lcall	_register_write
      00057F 15 81            [12] 1893 	dec	sp
                                   1894 ;	radio/radio.c:825: register_write(EZRADIOPRO_HEADER_ENABLE_3, 0xFF);
      000581 74 FF            [12] 1895 	mov	a,#0xFF
      000583 C0 E0            [24] 1896 	push	acc
      000585 75 82 43         [24] 1897 	mov	dpl,#0x43
      000588 12r08r52         [24] 1898 	lcall	_register_write
      00058B 15 81            [12] 1899 	dec	sp
                                   1900 ;	radio/radio.c:826: register_write(EZRADIOPRO_HEADER_ENABLE_2, 0xFF);
      00058D 74 FF            [12] 1901 	mov	a,#0xFF
      00058F C0 E0            [24] 1902 	push	acc
      000591 75 82 44         [24] 1903 	mov	dpl,#0x44
      000594 12r08r52         [24] 1904 	lcall	_register_write
      000597 15 81            [12] 1905 	dec	sp
                                   1906 ;	radio/radio.c:829: register_write(EZRADIOPRO_TX_FIFO_CONTROL_1, TX_FIFO_THRESHOLD_HIGH);
      000599 74 3C            [12] 1907 	mov	a,#0x3C
      00059B C0 E0            [24] 1908 	push	acc
      00059D 75 82 7C         [24] 1909 	mov	dpl,#0x7C
      0005A0 12r08r52         [24] 1910 	lcall	_register_write
      0005A3 15 81            [12] 1911 	dec	sp
                                   1912 ;	radio/radio.c:830: register_write(EZRADIOPRO_TX_FIFO_CONTROL_2, TX_FIFO_THRESHOLD_LOW);
      0005A5 74 20            [12] 1913 	mov	a,#0x20
      0005A7 C0 E0            [24] 1914 	push	acc
      0005A9 75 82 7D         [24] 1915 	mov	dpl,#0x7D
      0005AC 12r08r52         [24] 1916 	lcall	_register_write
      0005AF 15 81            [12] 1917 	dec	sp
                                   1918 ;	radio/radio.c:831: register_write(EZRADIOPRO_RX_FIFO_CONTROL, RX_FIFO_THRESHOLD_HIGH);
      0005B1 74 32            [12] 1919 	mov	a,#0x32
      0005B3 C0 E0            [24] 1920 	push	acc
      0005B5 75 82 7E         [24] 1921 	mov	dpl,#0x7E
      0005B8 12r08r52         [24] 1922 	lcall	_register_write
      0005BB 15 81            [12] 1923 	dec	sp
                                   1924 ;	radio/radio.c:833: settings.preamble_length = 16;
      0005BD 78r12            [12] 1925 	mov	r0,#(_settings + 0x000b)
      0005BF 74 10            [12] 1926 	mov	a,#0x10
      0005C1 F2               [24] 1927 	movx	@r0,a
                                   1928 ;	radio/radio.c:835: register_write(EZRADIOPRO_PREAMBLE_LENGTH, settings.preamble_length); // nibbles 
      0005C2 78r12            [12] 1929 	mov	r0,#(_settings + 0x000b)
      0005C4 E2               [24] 1930 	movx	a,@r0
      0005C5 FE               [12] 1931 	mov	r6,a
      0005C6 C0 06            [24] 1932 	push	ar6
      0005C8 75 82 34         [24] 1933 	mov	dpl,#0x34
      0005CB 12r08r52         [24] 1934 	lcall	_register_write
      0005CE 15 81            [12] 1935 	dec	sp
                                   1936 ;	radio/radio.c:836: register_write(EZRADIOPRO_PREAMBLE_DETECTION_CONTROL, 5<<3); // 5 nibbles
      0005D0 74 28            [12] 1937 	mov	a,#0x28
      0005D2 C0 E0            [24] 1938 	push	acc
      0005D4 75 82 35         [24] 1939 	mov	dpl,#0x35
      0005D7 12r08r52         [24] 1940 	lcall	_register_write
      0005DA 15 81            [12] 1941 	dec	sp
                                   1942 ;	radio/radio.c:839: radio_set_transmit_power(0);
      0005DC 75 82 00         [24] 1943 	mov	dpl,#0x00
      0005DF 12r07r79         [24] 1944 	lcall	_radio_set_transmit_power
      0005E2 D0 07            [24] 1945 	pop	ar7
                                   1946 ;	radio/radio.c:842: for (i = 0; i < NUM_DATA_RATES - 1; i++) {
      0005E4 7E 00            [12] 1947 	mov	r6,#0x00
      0005E6                       1948 00128$:
                                   1949 ;	radio/radio.c:843: if (air_data_rates[i] >= air_rate) break;
      0005E6 EE               [12] 1950 	mov	a,r6
      0005E7 90r00r1D         [24] 1951 	mov	dptr,#_air_data_rates
      0005EA 93               [24] 1952 	movc	a,@a+dptr
      0005EB FD               [12] 1953 	mov	r5,a
      0005EC C3               [12] 1954 	clr	c
      0005ED 9F               [12] 1955 	subb	a,r7
      0005EE 50 06            [24] 1956 	jnc	00105$
                                   1957 ;	radio/radio.c:842: for (i = 0; i < NUM_DATA_RATES - 1; i++) {
      0005F0 0E               [12] 1958 	inc	r6
      0005F1 BE 0C 00         [24] 1959 	cjne	r6,#0x0C,00198$
      0005F4                       1960 00198$:
      0005F4 40 F0            [24] 1961 	jc	00128$
      0005F6                       1962 00105$:
                                   1963 ;	radio/radio.c:845: rate_selection = i;
                                   1964 ;	radio/radio.c:847: settings.air_data_rate = air_data_rates[rate_selection];
      0005F6 EE               [12] 1965 	mov	a,r6
      0005F7 FF               [12] 1966 	mov	r7,a
      0005F8 90r00r1D         [24] 1967 	mov	dptr,#_air_data_rates
      0005FB 93               [24] 1968 	movc	a,@a+dptr
      0005FC FE               [12] 1969 	mov	r6,a
      0005FD 78r0F            [12] 1970 	mov	r0,#(_settings + 0x0008)
      0005FF F2               [24] 1971 	movx	@r0,a
                                   1972 ;	radio/radio.c:849: if (settings.air_data_rate >= 32) {
      000600 BE 20 00         [24] 1973 	cjne	r6,#0x20,00200$
      000603                       1974 00200$:
      000603 40 04            [24] 1975 	jc	00107$
                                   1976 ;	radio/radio.c:850: control = 0x0D;
      000605 7E 0D            [12] 1977 	mov	r6,#0x0D
      000607 80 02            [24] 1978 	sjmp	00108$
      000609                       1979 00107$:
                                   1980 ;	radio/radio.c:852: control = 0x2D;
      000609 7E 2D            [12] 1981 	mov	r6,#0x2D
      00060B                       1982 00108$:
                                   1983 ;	radio/radio.c:854: if (param_get(PARAM_MANCHESTER) && settings.air_data_rate <= 128) {
      00060B 75 82 0D         [24] 1984 	mov	dpl,#0x0D
      00060E C0 07            [24] 1985 	push	ar7
      000610 C0 06            [24] 1986 	push	ar6
      000612 12r00r00         [24] 1987 	lcall	_param_get
      000615 AA 82            [24] 1988 	mov	r2,dpl
      000617 AB 83            [24] 1989 	mov	r3,dph
      000619 AC F0            [24] 1990 	mov	r4,b
      00061B FD               [12] 1991 	mov	r5,a
      00061C D0 06            [24] 1992 	pop	ar6
      00061E D0 07            [24] 1993 	pop	ar7
      000620 EA               [12] 1994 	mov	a,r2
      000621 4B               [12] 1995 	orl	a,r3
      000622 4C               [12] 1996 	orl	a,r4
      000623 4D               [12] 1997 	orl	a,r5
      000624 60 0B            [24] 1998 	jz	00110$
      000626 78r0F            [12] 1999 	mov	r0,#(_settings + 0x0008)
      000628 E2               [24] 2000 	movx	a,@r0
      000629 FD               [12] 2001 	mov  r5,a
      00062A 24 7F            [12] 2002 	add	a,#0xff - 0x80
      00062C 40 03            [24] 2003 	jc	00110$
                                   2004 ;	radio/radio.c:856: control |= EZRADIOPRO_ENMANCH;
      00062E 43 06 02         [24] 2005 	orl	ar6,#0x02
      000631                       2006 00110$:
                                   2007 ;	radio/radio.c:858: register_write(EZRADIOPRO_MODULATION_MODE_CONTROL_1, control);
      000631 C0 07            [24] 2008 	push	ar7
      000633 C0 06            [24] 2009 	push	ar6
      000635 75 82 70         [24] 2010 	mov	dpl,#0x70
      000638 12r08r52         [24] 2011 	lcall	_register_write
      00063B 15 81            [12] 2012 	dec	sp
                                   2013 ;	radio/radio.c:860: register_write(EZRADIOPRO_MODULATION_MODE_CONTROL_2, 0x23);
      00063D 74 23            [12] 2014 	mov	a,#0x23
      00063F C0 E0            [24] 2015 	push	acc
      000641 75 82 71         [24] 2016 	mov	dpl,#0x71
      000644 12r08r52         [24] 2017 	lcall	_register_write
      000647 15 81            [12] 2018 	dec	sp
                                   2019 ;	radio/radio.c:864: register_write(EZRADIOPRO_AFC_LOOP_GEARSHIFT_OVERRIDE, 0x44);
      000649 74 44            [12] 2020 	mov	a,#0x44
      00064B C0 E0            [24] 2021 	push	acc
      00064D 75 82 1D         [24] 2022 	mov	dpl,#0x1D
      000650 12r08r52         [24] 2023 	lcall	_register_write
      000653 15 81            [12] 2024 	dec	sp
      000655 D0 07            [24] 2025 	pop	ar7
                                   2026 ;	radio/radio.c:868: if (settings.air_data_rate < 200) {
      000657 78r0F            [12] 2027 	mov	r0,#(_settings + 0x0008)
      000659 E2               [24] 2028 	movx	a,@r0
      00065A FE               [12] 2029 	mov	r6,a
      00065B BE C8 00         [24] 2030 	cjne	r6,#0xC8,00204$
      00065E                       2031 00204$:
      00065E 50 12            [24] 2032 	jnc	00113$
                                   2033 ;	radio/radio.c:869: register_write(EZRADIOPRO_AFC_TIMING_CONTROL, 0x0A);
      000660 C0 07            [24] 2034 	push	ar7
      000662 74 0A            [12] 2035 	mov	a,#0x0A
      000664 C0 E0            [24] 2036 	push	acc
      000666 75 82 1E         [24] 2037 	mov	dpl,#0x1E
      000669 12r08r52         [24] 2038 	lcall	_register_write
      00066C 15 81            [12] 2039 	dec	sp
      00066E D0 07            [24] 2040 	pop	ar7
      000670 80 10            [24] 2041 	sjmp	00114$
      000672                       2042 00113$:
                                   2043 ;	radio/radio.c:871: register_write(EZRADIOPRO_AFC_TIMING_CONTROL, 0x02);
      000672 C0 07            [24] 2044 	push	ar7
      000674 74 02            [12] 2045 	mov	a,#0x02
      000676 C0 E0            [24] 2046 	push	acc
      000678 75 82 1E         [24] 2047 	mov	dpl,#0x1E
      00067B 12r08r52         [24] 2048 	lcall	_register_write
      00067E 15 81            [12] 2049 	dec	sp
      000680 D0 07            [24] 2050 	pop	ar7
      000682                       2051 00114$:
                                   2052 ;	radio/radio.c:875: if (g_board_frequency == FREQ_433) {
      000682 78r00            [12] 2053 	mov	r0,#_g_board_frequency
      000684 E2               [24] 2054 	movx	a,@r0
      000685 B4 43 3A         [24] 2055 	cjne	a,#0x43,00126$
                                   2056 ;	radio/radio.c:876: for (i = 0; i < NUM_RADIO_REGISTERS; i++) {
      000688 7E 00            [12] 2057 	mov	r6,#0x00
      00068A                       2058 00130$:
                                   2059 ;	radio/radio.c:878: reg_table_433[i][rate_selection]);
      00068A EE               [12] 2060 	mov	a,r6
      00068B 75 F0 0D         [24] 2061 	mov	b,#0x0D
      00068E A4               [48] 2062 	mul	ab
      00068F 24r2A            [12] 2063 	add	a,#_reg_table_433
      000691 FC               [12] 2064 	mov	r4,a
      000692 74s00            [12] 2065 	mov	a,#(_reg_table_433 >> 8)
      000694 35 F0            [12] 2066 	addc	a,b
      000696 FD               [12] 2067 	mov	r5,a
      000697 EF               [12] 2068 	mov	a,r7
      000698 2C               [12] 2069 	add	a,r4
      000699 F5 82            [12] 2070 	mov	dpl,a
      00069B E4               [12] 2071 	clr	a
      00069C 3D               [12] 2072 	addc	a,r5
      00069D F5 83            [12] 2073 	mov	dph,a
      00069F E4               [12] 2074 	clr	a
      0006A0 93               [24] 2075 	movc	a,@a+dptr
      0006A1 FD               [12] 2076 	mov	r5,a
                                   2077 ;	radio/radio.c:877: register_write(reg_index[i],
      0006A2 EE               [12] 2078 	mov	a,r6
      0006A3 90r00r11         [24] 2079 	mov	dptr,#_reg_index
      0006A6 93               [24] 2080 	movc	a,@a+dptr
      0006A7 FC               [12] 2081 	mov	r4,a
      0006A8 C0 07            [24] 2082 	push	ar7
      0006AA C0 06            [24] 2083 	push	ar6
      0006AC C0 05            [24] 2084 	push	ar5
      0006AE 8C 82            [24] 2085 	mov	dpl,r4
      0006B0 12r08r52         [24] 2086 	lcall	_register_write
      0006B3 15 81            [12] 2087 	dec	sp
      0006B5 D0 06            [24] 2088 	pop	ar6
      0006B7 D0 07            [24] 2089 	pop	ar7
                                   2090 ;	radio/radio.c:876: for (i = 0; i < NUM_RADIO_REGISTERS; i++) {
      0006B9 0E               [12] 2091 	inc	r6
      0006BA BE 0C 00         [24] 2092 	cjne	r6,#0x0C,00208$
      0006BD                       2093 00208$:
      0006BD 40 CB            [24] 2094 	jc	00130$
      0006BF 02r07r77         [24] 2095 	ljmp	00127$
      0006C2                       2096 00126$:
                                   2097 ;	radio/radio.c:880: } else if (g_board_frequency == FREQ_470) {
      0006C2 78r00            [12] 2098 	mov	r0,#_g_board_frequency
      0006C4 E2               [24] 2099 	movx	a,@r0
      0006C5 B4 47 39         [24] 2100 	cjne	a,#0x47,00123$
                                   2101 ;	radio/radio.c:881: for (i = 0; i < NUM_RADIO_REGISTERS; i++) {
      0006C8 7E 00            [12] 2102 	mov	r6,#0x00
      0006CA                       2103 00132$:
                                   2104 ;	radio/radio.c:883: reg_table_470[i][rate_selection]);
      0006CA EE               [12] 2105 	mov	a,r6
      0006CB 75 F0 0D         [24] 2106 	mov	b,#0x0D
      0006CE A4               [48] 2107 	mul	ab
      0006CF 24rC6            [12] 2108 	add	a,#_reg_table_470
      0006D1 FC               [12] 2109 	mov	r4,a
      0006D2 74s00            [12] 2110 	mov	a,#(_reg_table_470 >> 8)
      0006D4 35 F0            [12] 2111 	addc	a,b
      0006D6 FD               [12] 2112 	mov	r5,a
      0006D7 EF               [12] 2113 	mov	a,r7
      0006D8 2C               [12] 2114 	add	a,r4
      0006D9 F5 82            [12] 2115 	mov	dpl,a
      0006DB E4               [12] 2116 	clr	a
      0006DC 3D               [12] 2117 	addc	a,r5
      0006DD F5 83            [12] 2118 	mov	dph,a
      0006DF E4               [12] 2119 	clr	a
      0006E0 93               [24] 2120 	movc	a,@a+dptr
      0006E1 FD               [12] 2121 	mov	r5,a
                                   2122 ;	radio/radio.c:882: register_write(reg_index[i],
      0006E2 EE               [12] 2123 	mov	a,r6
      0006E3 90r00r11         [24] 2124 	mov	dptr,#_reg_index
      0006E6 93               [24] 2125 	movc	a,@a+dptr
      0006E7 FC               [12] 2126 	mov	r4,a
      0006E8 C0 07            [24] 2127 	push	ar7
      0006EA C0 06            [24] 2128 	push	ar6
      0006EC C0 05            [24] 2129 	push	ar5
      0006EE 8C 82            [24] 2130 	mov	dpl,r4
      0006F0 12r08r52         [24] 2131 	lcall	_register_write
      0006F3 15 81            [12] 2132 	dec	sp
      0006F5 D0 06            [24] 2133 	pop	ar6
      0006F7 D0 07            [24] 2134 	pop	ar7
                                   2135 ;	radio/radio.c:881: for (i = 0; i < NUM_RADIO_REGISTERS; i++) {
      0006F9 0E               [12] 2136 	inc	r6
      0006FA BE 0C 00         [24] 2137 	cjne	r6,#0x0C,00212$
      0006FD                       2138 00212$:
      0006FD 40 CB            [24] 2139 	jc	00132$
      0006FF 80 76            [24] 2140 	sjmp	00127$
      000701                       2141 00123$:
                                   2142 ;	radio/radio.c:885: } else if (g_board_frequency == FREQ_868) {
      000701 78r00            [12] 2143 	mov	r0,#_g_board_frequency
      000703 E2               [24] 2144 	movx	a,@r0
      000704 B4 86 39         [24] 2145 	cjne	a,#0x86,00156$
                                   2146 ;	radio/radio.c:886: for (i = 0; i < NUM_RADIO_REGISTERS; i++) {
      000707 7E 00            [12] 2147 	mov	r6,#0x00
      000709                       2148 00134$:
                                   2149 ;	radio/radio.c:888: reg_table_868[i][rate_selection]);
      000709 EE               [12] 2150 	mov	a,r6
      00070A 75 F0 0D         [24] 2151 	mov	b,#0x0D
      00070D A4               [48] 2152 	mul	ab
      00070E 24r62            [12] 2153 	add	a,#_reg_table_868
      000710 FC               [12] 2154 	mov	r4,a
      000711 74s01            [12] 2155 	mov	a,#(_reg_table_868 >> 8)
      000713 35 F0            [12] 2156 	addc	a,b
      000715 FD               [12] 2157 	mov	r5,a
      000716 EF               [12] 2158 	mov	a,r7
      000717 2C               [12] 2159 	add	a,r4
      000718 F5 82            [12] 2160 	mov	dpl,a
      00071A E4               [12] 2161 	clr	a
      00071B 3D               [12] 2162 	addc	a,r5
      00071C F5 83            [12] 2163 	mov	dph,a
      00071E E4               [12] 2164 	clr	a
      00071F 93               [24] 2165 	movc	a,@a+dptr
      000720 FD               [12] 2166 	mov	r5,a
                                   2167 ;	radio/radio.c:887: register_write(reg_index[i],
      000721 EE               [12] 2168 	mov	a,r6
      000722 90r00r11         [24] 2169 	mov	dptr,#_reg_index
      000725 93               [24] 2170 	movc	a,@a+dptr
      000726 FC               [12] 2171 	mov	r4,a
      000727 C0 07            [24] 2172 	push	ar7
      000729 C0 06            [24] 2173 	push	ar6
      00072B C0 05            [24] 2174 	push	ar5
      00072D 8C 82            [24] 2175 	mov	dpl,r4
      00072F 12r08r52         [24] 2176 	lcall	_register_write
      000732 15 81            [12] 2177 	dec	sp
      000734 D0 06            [24] 2178 	pop	ar6
      000736 D0 07            [24] 2179 	pop	ar7
                                   2180 ;	radio/radio.c:886: for (i = 0; i < NUM_RADIO_REGISTERS; i++) {
      000738 0E               [12] 2181 	inc	r6
      000739 BE 0C 00         [24] 2182 	cjne	r6,#0x0C,00216$
      00073C                       2183 00216$:
      00073C 40 CB            [24] 2184 	jc	00134$
                                   2185 ;	radio/radio.c:891: for (i = 0; i < NUM_RADIO_REGISTERS; i++) {
      00073E 80 37            [24] 2186 	sjmp	00127$
      000740                       2187 00156$:
      000740 7E 00            [12] 2188 	mov	r6,#0x00
      000742                       2189 00136$:
                                   2190 ;	radio/radio.c:893: reg_table_915[i][rate_selection]);
      000742 EE               [12] 2191 	mov	a,r6
      000743 75 F0 0D         [24] 2192 	mov	b,#0x0D
      000746 A4               [48] 2193 	mul	ab
      000747 24rFE            [12] 2194 	add	a,#_reg_table_915
      000749 FC               [12] 2195 	mov	r4,a
      00074A 74s01            [12] 2196 	mov	a,#(_reg_table_915 >> 8)
      00074C 35 F0            [12] 2197 	addc	a,b
      00074E FD               [12] 2198 	mov	r5,a
      00074F EF               [12] 2199 	mov	a,r7
      000750 2C               [12] 2200 	add	a,r4
      000751 F5 82            [12] 2201 	mov	dpl,a
      000753 E4               [12] 2202 	clr	a
      000754 3D               [12] 2203 	addc	a,r5
      000755 F5 83            [12] 2204 	mov	dph,a
      000757 E4               [12] 2205 	clr	a
      000758 93               [24] 2206 	movc	a,@a+dptr
      000759 FD               [12] 2207 	mov	r5,a
                                   2208 ;	radio/radio.c:892: register_write(reg_index[i],
      00075A EE               [12] 2209 	mov	a,r6
      00075B 90r00r11         [24] 2210 	mov	dptr,#_reg_index
      00075E 93               [24] 2211 	movc	a,@a+dptr
      00075F FC               [12] 2212 	mov	r4,a
      000760 C0 07            [24] 2213 	push	ar7
      000762 C0 06            [24] 2214 	push	ar6
      000764 C0 05            [24] 2215 	push	ar5
      000766 8C 82            [24] 2216 	mov	dpl,r4
      000768 12r08r52         [24] 2217 	lcall	_register_write
      00076B 15 81            [12] 2218 	dec	sp
      00076D D0 06            [24] 2219 	pop	ar6
      00076F D0 07            [24] 2220 	pop	ar7
                                   2221 ;	radio/radio.c:891: for (i = 0; i < NUM_RADIO_REGISTERS; i++) {
      000771 0E               [12] 2222 	inc	r6
      000772 BE 0C 00         [24] 2223 	cjne	r6,#0x0C,00218$
      000775                       2224 00218$:
      000775 40 CB            [24] 2225 	jc	00136$
      000777                       2226 00127$:
                                   2227 ;	radio/radio.c:897: return true;
      000777 D3               [12] 2228 	setb	c
      000778 22               [24] 2229 	ret
                                   2230 ;------------------------------------------------------------
                                   2231 ;Allocation info for local variables in function 'radio_set_transmit_power'
                                   2232 ;------------------------------------------------------------
                                   2233 ;power                     Allocated with name '_radio_set_transmit_power_power_1_219'
                                   2234 ;i                         Allocated with name '_radio_set_transmit_power_i_1_220'
                                   2235 ;------------------------------------------------------------
                                   2236 ;	radio/radio.c:918: radio_set_transmit_power(uint8_t power) __nonbanked
                                   2237 ;	-----------------------------------------
                                   2238 ;	 function radio_set_transmit_power
                                   2239 ;	-----------------------------------------
      000779                       2240 _radio_set_transmit_power:
      000779 E5 82            [12] 2241 	mov	a,dpl
      00077B 90r01r03         [24] 2242 	mov	dptr,#_radio_set_transmit_power_power_1_219
      00077E F0               [24] 2243 	movx	@dptr,a
                                   2244 ;	radio/radio.c:937: for (i=0; i<NUM_POWER_LEVELS; i++) {
      00077F E0               [24] 2245 	movx	a,@dptr
      000780 FF               [12] 2246 	mov	r7,a
      000781 7E 00            [12] 2247 	mov	r6,#0x00
      000783                       2248 00106$:
                                   2249 ;	radio/radio.c:938: if (power <= power_levels[i]) break;
      000783 EE               [12] 2250 	mov	a,r6
      000784 90r02r9A         [24] 2251 	mov	dptr,#_power_levels
      000787 93               [24] 2252 	movc	a,@a+dptr
      000788 FD               [12] 2253 	mov	r5,a
      000789 C3               [12] 2254 	clr	c
      00078A 9F               [12] 2255 	subb	a,r7
      00078B 50 06            [24] 2256 	jnc	00113$
                                   2257 ;	radio/radio.c:937: for (i=0; i<NUM_POWER_LEVELS; i++) {
      00078D 0E               [12] 2258 	inc	r6
      00078E BE 08 00         [24] 2259 	cjne	r6,#0x08,00121$
      000791                       2260 00121$:
      000791 40 F0            [24] 2261 	jc	00106$
      000793                       2262 00113$:
      000793 90r01r04         [24] 2263 	mov	dptr,#_radio_set_transmit_power_i_1_220
      000796 EE               [12] 2264 	mov	a,r6
      000797 F0               [24] 2265 	movx	@dptr,a
                                   2266 ;	radio/radio.c:940: if (i == NUM_POWER_LEVELS) {
      000798 BE 08 06         [24] 2267 	cjne	r6,#0x08,00105$
                                   2268 ;	radio/radio.c:941: i = NUM_POWER_LEVELS-1;
      00079B 90r01r04         [24] 2269 	mov	dptr,#_radio_set_transmit_power_i_1_220
      00079E 74 07            [12] 2270 	mov	a,#0x07
      0007A0 F0               [24] 2271 	movx	@dptr,a
      0007A1                       2272 00105$:
                                   2273 ;	radio/radio.c:943: settings.transmit_power = power_levels[i];
      0007A1 90r01r04         [24] 2274 	mov	dptr,#_radio_set_transmit_power_i_1_220
      0007A4 E0               [24] 2275 	movx	a,@dptr
      0007A5 FF               [12] 2276 	mov	r7,a
      0007A6 90r02r9A         [24] 2277 	mov	dptr,#_power_levels
      0007A9 93               [24] 2278 	movc	a,@a+dptr
      0007AA FE               [12] 2279 	mov	r6,a
      0007AB 78r11            [12] 2280 	mov	r0,#(_settings + 0x000a)
      0007AD EE               [12] 2281 	mov	a,r6
      0007AE F2               [24] 2282 	movx	@r0,a
                                   2283 ;	radio/radio.c:944: register_write(EZRADIOPRO_TX_POWER, i);
      0007AF C0 07            [24] 2284 	push	ar7
      0007B1 75 82 6D         [24] 2285 	mov	dpl,#0x6D
      0007B4 12r08r52         [24] 2286 	lcall	_register_write
      0007B7 15 81            [12] 2287 	dec	sp
      0007B9 22               [24] 2288 	ret
                                   2289 ;------------------------------------------------------------
                                   2290 ;Allocation info for local variables in function 'radio_get_transmit_power'
                                   2291 ;------------------------------------------------------------
                                   2292 ;	radio/radio.c:951: radio_get_transmit_power(void) __nonbanked
                                   2293 ;	-----------------------------------------
                                   2294 ;	 function radio_get_transmit_power
                                   2295 ;	-----------------------------------------
      0007BA                       2296 _radio_get_transmit_power:
                                   2297 ;	radio/radio.c:953: return settings.transmit_power;
      0007BA 78r11            [12] 2298 	mov	r0,#(_settings + 0x000a)
      0007BC E2               [24] 2299 	movx	a,@r0
      0007BD F5 82            [12] 2300 	mov	dpl,a
      0007BF 22               [24] 2301 	ret
                                   2302 ;------------------------------------------------------------
                                   2303 ;Allocation info for local variables in function 'radio_set_network_id'
                                   2304 ;------------------------------------------------------------
                                   2305 ;id                        Allocated with name '_radio_set_network_id_id_1_225'
                                   2306 ;------------------------------------------------------------
                                   2307 ;	radio/radio.c:959: radio_set_network_id(uint16_t id) __nonbanked
                                   2308 ;	-----------------------------------------
                                   2309 ;	 function radio_set_network_id
                                   2310 ;	-----------------------------------------
      0007C0                       2311 _radio_set_network_id:
      0007C0 AF 83            [24] 2312 	mov	r7,dph
      0007C2 E5 82            [12] 2313 	mov	a,dpl
      0007C4 90r01r05         [24] 2314 	mov	dptr,#_radio_set_network_id_id_1_225
      0007C7 F0               [24] 2315 	movx	@dptr,a
      0007C8 EF               [12] 2316 	mov	a,r7
      0007C9 A3               [24] 2317 	inc	dptr
      0007CA F0               [24] 2318 	movx	@dptr,a
                                   2319 ;	radio/radio.c:961: netid[0] = id&0xFF;
      0007CB 90r01r05         [24] 2320 	mov	dptr,#_radio_set_network_id_id_1_225
      0007CE E0               [24] 2321 	movx	a,@dptr
      0007CF FE               [12] 2322 	mov	r6,a
      0007D0 A3               [24] 2323 	inc	dptr
      0007D1 E0               [24] 2324 	movx	a,@dptr
      0007D2 FF               [12] 2325 	mov	r7,a
      0007D3 8E 04            [24] 2326 	mov	ar4,r6
      0007D5 78r03            [12] 2327 	mov	r0,#_netid
      0007D7 EC               [12] 2328 	mov	a,r4
      0007D8 F2               [24] 2329 	movx	@r0,a
                                   2330 ;	radio/radio.c:962: netid[1] = id>>8;
      0007D9 8F 05            [24] 2331 	mov	ar5,r7
      0007DB 78r04            [12] 2332 	mov	r0,#(_netid + 0x0001)
      0007DD ED               [12] 2333 	mov	a,r5
      0007DE F2               [24] 2334 	movx	@r0,a
                                   2335 ;	radio/radio.c:963: if (!feature_golay) {
      0007DF 20*00 34         [24] 2336 	jb	_feature_golay,00103$
                                   2337 ;	radio/radio.c:966: register_write(EZRADIOPRO_TRANSMIT_HEADER_1, id >> 8);
      0007E2 C0 07            [24] 2338 	push	ar7
      0007E4 C0 06            [24] 2339 	push	ar6
      0007E6 C0 05            [24] 2340 	push	ar5
      0007E8 C0 05            [24] 2341 	push	ar5
      0007EA 75 82 3C         [24] 2342 	mov	dpl,#0x3C
      0007ED 12r08r52         [24] 2343 	lcall	_register_write
      0007F0 15 81            [12] 2344 	dec	sp
      0007F2 D0 05            [24] 2345 	pop	ar5
      0007F4 D0 06            [24] 2346 	pop	ar6
      0007F6 D0 07            [24] 2347 	pop	ar7
                                   2348 ;	radio/radio.c:967: register_write(EZRADIOPRO_TRANSMIT_HEADER_0, id & 0xFF);
      0007F8 C0 06            [24] 2349 	push	ar6
      0007FA C0 05            [24] 2350 	push	ar5
      0007FC C0 06            [24] 2351 	push	ar6
      0007FE 75 82 3D         [24] 2352 	mov	dpl,#0x3D
      000801 12r08r52         [24] 2353 	lcall	_register_write
      000804 15 81            [12] 2354 	dec	sp
                                   2355 ;	radio/radio.c:968: register_write(EZRADIOPRO_CHECK_HEADER_1, id >> 8);
      000806 75 82 41         [24] 2356 	mov	dpl,#0x41
      000809 12r08r52         [24] 2357 	lcall	_register_write
      00080C 15 81            [12] 2358 	dec	sp
                                   2359 ;	radio/radio.c:969: register_write(EZRADIOPRO_CHECK_HEADER_0, id & 0xFF);
      00080E 75 82 42         [24] 2360 	mov	dpl,#0x42
      000811 12r08r52         [24] 2361 	lcall	_register_write
      000814 15 81            [12] 2362 	dec	sp
      000816                       2363 00103$:
      000816 22               [24] 2364 	ret
                                   2365 ;------------------------------------------------------------
                                   2366 ;Allocation info for local variables in function 'radio_set_node_id'
                                   2367 ;------------------------------------------------------------
                                   2368 ;id                        Allocated with name '_radio_set_node_id_id_1_228'
                                   2369 ;------------------------------------------------------------
                                   2370 ;	radio/radio.c:976: radio_set_node_id(uint16_t id) __nonbanked
                                   2371 ;	-----------------------------------------
                                   2372 ;	 function radio_set_node_id
                                   2373 ;	-----------------------------------------
      000817                       2374 _radio_set_node_id:
      000817 AF 83            [24] 2375 	mov	r7,dph
      000819 E5 82            [12] 2376 	mov	a,dpl
      00081B 90r01r07         [24] 2377 	mov	dptr,#_radio_set_node_id_id_1_228
      00081E F0               [24] 2378 	movx	@dptr,a
      00081F EF               [12] 2379 	mov	a,r7
      000820 A3               [24] 2380 	inc	dptr
      000821 F0               [24] 2381 	movx	@dptr,a
                                   2382 ;	radio/radio.c:978: nodeId = id;
      000822 90r01r07         [24] 2383 	mov	dptr,#_radio_set_node_id_id_1_228
      000825 E0               [24] 2384 	movx	a,@dptr
      000826 FE               [12] 2385 	mov	r6,a
      000827 A3               [24] 2386 	inc	dptr
      000828 E0               [24] 2387 	movx	a,@dptr
      000829 FF               [12] 2388 	mov	r7,a
      00082A 78r05            [12] 2389 	mov	r0,#_nodeId
      00082C EE               [12] 2390 	mov	a,r6
      00082D F2               [24] 2391 	movx	@r0,a
      00082E 08               [12] 2392 	inc	r0
      00082F EF               [12] 2393 	mov	a,r7
      000830 F2               [24] 2394 	movx	@r0,a
                                   2395 ;	radio/radio.c:979: register_write(EZRADIOPRO_CHECK_HEADER_3, nodeId>>8);
      000831 8F 06            [24] 2396 	mov	ar6,r7
      000833 C0 06            [24] 2397 	push	ar6
      000835 75 82 3F         [24] 2398 	mov	dpl,#0x3F
      000838 12r08r52         [24] 2399 	lcall	_register_write
      00083B 15 81            [12] 2400 	dec	sp
                                   2401 ;	radio/radio.c:980: register_write(EZRADIOPRO_CHECK_HEADER_2, nodeId&0xFF);
      00083D 78r05            [12] 2402 	mov	r0,#_nodeId
      00083F E2               [24] 2403 	movx	a,@r0
      000840 54 FF            [12] 2404 	anl	a,#0xFF
      000842 FE               [12] 2405 	mov	r6,a
      000843 08               [12] 2406 	inc	r0
      000844 E2               [24] 2407 	movx	a,@r0
      000845 54 00            [12] 2408 	anl	a,#0x00
      000847 C0 06            [24] 2409 	push	ar6
      000849 75 82 40         [24] 2410 	mov	dpl,#0x40
      00084C 12r08r52         [24] 2411 	lcall	_register_write
      00084F 15 81            [12] 2412 	dec	sp
      000851 22               [24] 2413 	ret
                                   2414 ;------------------------------------------------------------
                                   2415 ;Allocation info for local variables in function 'register_write'
                                   2416 ;------------------------------------------------------------
                                   2417 ;value                     Allocated to stack - sp -2
                                   2418 ;reg                       Allocated to registers r7 
                                   2419 ;EX0_saved                 Allocated to registers b0 
                                   2420 ;------------------------------------------------------------
                                   2421 ;	radio/radio.c:989: register_write(uint8_t reg, uint8_t value) __reentrant __nonbanked
                                   2422 ;	-----------------------------------------
                                   2423 ;	 function register_write
                                   2424 ;	-----------------------------------------
      000852                       2425 _register_write:
      000852 AF 82            [24] 2426 	mov	r7,dpl
                                   2427 ;	radio/radio.c:991: EX0_SAVE_DISABLE;
      000854 A2 A8            [12] 2428 	mov	c,_EX0
      000856 92*00            [24] 2429 	mov	b0,c
      000858 C2 A8            [12] 2430 	clr	_EX0
                                   2431 ;	radio/radio.c:993: RADIO_PAGE();
      00085A 75 A7 00         [24] 2432 	mov	_SFRPAGE,#0x00
                                   2433 ;	radio/radio.c:994: NSS1 = 0;							// drive NSS low
      00085D C2 94            [12] 2434 	clr	_NSS1
                                   2435 ;	radio/radio.c:995: SPIF1 = 0;							// clear SPIF
      00085F C2 B7            [12] 2436 	clr	_SPIF1
                                   2437 ;	radio/radio.c:996: SPI1DAT = (reg | 0x80);				// write reg address
      000861 74 80            [12] 2438 	mov	a,#0x80
      000863 4F               [12] 2439 	orl	a,r7
      000864 F5 86            [12] 2440 	mov	_SPI1DAT,a
                                   2441 ;	radio/radio.c:997: while (!TXBMT1);					// wait on TXBMT
      000866                       2442 00101$:
      000866 30 B1 FD         [24] 2443 	jnb	_TXBMT1,00101$
                                   2444 ;	radio/radio.c:998: SPI1DAT = value;					// write value
      000869 A8 81            [24] 2445 	mov	r0,sp
      00086B 18               [12] 2446 	dec	r0
      00086C 18               [12] 2447 	dec	r0
      00086D 86 86            [24] 2448 	mov	_SPI1DAT,@r0
                                   2449 ;	radio/radio.c:999: while (!TXBMT1);					// wait on TXBMT
      00086F                       2450 00104$:
      00086F 30 B1 FD         [24] 2451 	jnb	_TXBMT1,00104$
                                   2452 ;	radio/radio.c:1000: while ((SPI1CFG & 0x80) == 0x80);	// wait on SPIBSY
      000872                       2453 00107$:
      000872 74 80            [12] 2454 	mov	a,#0x80
      000874 55 84            [12] 2455 	anl	a,_SPI1CFG
      000876 FF               [12] 2456 	mov	r7,a
      000877 BF 80 02         [24] 2457 	cjne	r7,#0x80,00129$
      00087A 80 F6            [24] 2458 	sjmp	00107$
      00087C                       2459 00129$:
                                   2460 ;	radio/radio.c:1001: SPIF1 = 0;							// leave SPIF cleared
      00087C C2 B7            [12] 2461 	clr	_SPIF1
                                   2462 ;	radio/radio.c:1002: NSS1 = 1;							// drive NSS high
      00087E D2 94            [12] 2463 	setb	_NSS1
                                   2464 ;	radio/radio.c:1003: SFRPAGE = LEGACY_PAGE;
      000880 75 A7 00         [24] 2465 	mov	_SFRPAGE,#0x00
                                   2466 ;	radio/radio.c:1005: EX0_RESTORE;
      000883 A2*00            [12] 2467 	mov	c,b0
      000885 92 A8            [24] 2468 	mov	_EX0,c
      000887 22               [24] 2469 	ret
                                   2470 ;------------------------------------------------------------
                                   2471 ;Allocation info for local variables in function 'register_read'
                                   2472 ;------------------------------------------------------------
                                   2473 ;reg                       Allocated to registers r7 
                                   2474 ;value                     Allocated to registers r7 
                                   2475 ;EX0_saved                 Allocated to registers b0 
                                   2476 ;------------------------------------------------------------
                                   2477 ;	radio/radio.c:1015: register_read(uint8_t reg) __reentrant __nonbanked
                                   2478 ;	-----------------------------------------
                                   2479 ;	 function register_read
                                   2480 ;	-----------------------------------------
      000888                       2481 _register_read:
      000888 AF 82            [24] 2482 	mov	r7,dpl
                                   2483 ;	radio/radio.c:1018: EX0_SAVE_DISABLE;
      00088A A2 A8            [12] 2484 	mov	c,_EX0
      00088C 92*00            [24] 2485 	mov	b0,c
      00088E C2 A8            [12] 2486 	clr	_EX0
                                   2487 ;	radio/radio.c:1020: RADIO_PAGE();
      000890 75 A7 00         [24] 2488 	mov	_SFRPAGE,#0x00
                                   2489 ;	radio/radio.c:1021: NSS1 = 0;							// dsrive NSS low
      000893 C2 94            [12] 2490 	clr	_NSS1
                                   2491 ;	radio/radio.c:1022: SPIF1 = 0;							// clear SPIF
      000895 C2 B7            [12] 2492 	clr	_SPIF1
                                   2493 ;	radio/radio.c:1023: SPI1DAT = (reg);					// write reg address
      000897 8F 86            [24] 2494 	mov	_SPI1DAT,r7
                                   2495 ;	radio/radio.c:1024: while (!TXBMT1);					// wait on TXBMT
      000899                       2496 00101$:
      000899 30 B1 FD         [24] 2497 	jnb	_TXBMT1,00101$
                                   2498 ;	radio/radio.c:1025: SPI1DAT = 0x00;						// write anything
      00089C 75 86 00         [24] 2499 	mov	_SPI1DAT,#0x00
                                   2500 ;	radio/radio.c:1026: while (!TXBMT1);					// wait on TXBMT
      00089F                       2501 00104$:
      00089F 30 B1 FD         [24] 2502 	jnb	_TXBMT1,00104$
                                   2503 ;	radio/radio.c:1027: while ((SPI1CFG & 0x80) == 0x80);	// wait on SPIBSY
      0008A2                       2504 00107$:
      0008A2 74 80            [12] 2505 	mov	a,#0x80
      0008A4 55 84            [12] 2506 	anl	a,_SPI1CFG
      0008A6 FF               [12] 2507 	mov	r7,a
      0008A7 BF 80 02         [24] 2508 	cjne	r7,#0x80,00129$
      0008AA 80 F6            [24] 2509 	sjmp	00107$
      0008AC                       2510 00129$:
                                   2511 ;	radio/radio.c:1028: value = SPI1DAT;					// read value
      0008AC AF 86            [24] 2512 	mov	r7,_SPI1DAT
                                   2513 ;	radio/radio.c:1029: SPIF1 = 0;							// leave SPIF cleared
      0008AE C2 B7            [12] 2514 	clr	_SPIF1
                                   2515 ;	radio/radio.c:1030: NSS1 = 1;							// drive NSS high
      0008B0 D2 94            [12] 2516 	setb	_NSS1
                                   2517 ;	radio/radio.c:1031: SFRPAGE = LEGACY_PAGE;
      0008B2 75 A7 00         [24] 2518 	mov	_SFRPAGE,#0x00
                                   2519 ;	radio/radio.c:1033: EX0_RESTORE;
      0008B5 A2*00            [12] 2520 	mov	c,b0
      0008B7 92 A8            [24] 2521 	mov	_EX0,c
                                   2522 ;	radio/radio.c:1035: return value;
      0008B9 8F 82            [24] 2523 	mov	dpl,r7
      0008BB 22               [24] 2524 	ret
                                   2525 ;------------------------------------------------------------
                                   2526 ;Allocation info for local variables in function 'read_receive_fifo'
                                   2527 ;------------------------------------------------------------
                                   2528 ;buf                       Allocated to stack - sp -3
                                   2529 ;n                         Allocated to registers r7 
                                   2530 ;------------------------------------------------------------
                                   2531 ;	radio/radio.c:1042: read_receive_fifo(register uint8_t n, __xdata uint8_t * buf) __reentrant __nonbanked
                                   2532 ;	-----------------------------------------
                                   2533 ;	 function read_receive_fifo
                                   2534 ;	-----------------------------------------
      0008BC                       2535 _read_receive_fifo:
      0008BC AF 82            [24] 2536 	mov	r7,dpl
                                   2537 ;	radio/radio.c:1044: RADIO_PAGE();
      0008BE 75 A7 00         [24] 2538 	mov	_SFRPAGE,#0x00
                                   2539 ;	radio/radio.c:1045: NSS1 = 0;				// drive NSS low
      0008C1 C2 94            [12] 2540 	clr	_NSS1
                                   2541 ;	radio/radio.c:1046: SPIF1 = 0;				// clear SPIF
      0008C3 C2 B7            [12] 2542 	clr	_SPIF1
                                   2543 ;	radio/radio.c:1047: SPI1DAT = EZRADIOPRO_FIFO_ACCESS;
      0008C5 75 86 7F         [24] 2544 	mov	_SPI1DAT,#0x7F
                                   2545 ;	radio/radio.c:1048: while (!SPIF1);				// wait on SPIF
      0008C8                       2546 00101$:
      0008C8 30 B7 FD         [24] 2547 	jnb	_SPIF1,00101$
                                   2548 ;	radio/radio.c:1049: ACC = SPI1DAT;				// discard first byte
      0008CB 85 86 E0         [24] 2549 	mov	_ACC,_SPI1DAT
                                   2550 ;	radio/radio.c:1051: while (n--) {
      0008CE E5 81            [12] 2551 	mov	a,sp
      0008D0 24 FD            [12] 2552 	add	a,#0xfd
      0008D2 F8               [12] 2553 	mov	r0,a
      0008D3 86 05            [24] 2554 	mov	ar5,@r0
      0008D5 08               [12] 2555 	inc	r0
      0008D6 86 06            [24] 2556 	mov	ar6,@r0
      0008D8                       2557 00107$:
      0008D8 8F 04            [24] 2558 	mov	ar4,r7
      0008DA 1F               [12] 2559 	dec	r7
      0008DB EC               [12] 2560 	mov	a,r4
      0008DC 60 16            [24] 2561 	jz	00109$
                                   2562 ;	radio/radio.c:1052: SPIF1 = 0;			// clear SPIF
      0008DE C2 B7            [12] 2563 	clr	_SPIF1
                                   2564 ;	radio/radio.c:1053: SPI1DAT = 0x00;			// write anything
      0008E0 75 86 00         [24] 2565 	mov	_SPI1DAT,#0x00
                                   2566 ;	radio/radio.c:1054: while (!SPIF1);			// wait on SPIF
      0008E3                       2567 00104$:
      0008E3 30 B7 FD         [24] 2568 	jnb	_SPIF1,00104$
                                   2569 ;	radio/radio.c:1055: *buf++ = SPI1DAT;		// copy to buffer
      0008E6 8D 82            [24] 2570 	mov	dpl,r5
      0008E8 8E 83            [24] 2571 	mov	dph,r6
      0008EA E5 86            [12] 2572 	mov	a,_SPI1DAT
      0008EC F0               [24] 2573 	movx	@dptr,a
      0008ED A3               [24] 2574 	inc	dptr
      0008EE AD 82            [24] 2575 	mov	r5,dpl
      0008F0 AE 83            [24] 2576 	mov	r6,dph
      0008F2 80 E4            [24] 2577 	sjmp	00107$
      0008F4                       2578 00109$:
                                   2579 ;	radio/radio.c:1058: SPIF1 = 0;				// leave SPIF cleared
      0008F4 C2 B7            [12] 2580 	clr	_SPIF1
                                   2581 ;	radio/radio.c:1059: NSS1 = 1;				// drive NSS high
      0008F6 D2 94            [12] 2582 	setb	_NSS1
                                   2583 ;	radio/radio.c:1060: SFRPAGE = LEGACY_PAGE;
      0008F8 75 A7 00         [24] 2584 	mov	_SFRPAGE,#0x00
      0008FB 22               [24] 2585 	ret
                                   2586 ;------------------------------------------------------------
                                   2587 ;Allocation info for local variables in function 'clear_status_registers'
                                   2588 ;------------------------------------------------------------
                                   2589 ;	radio/radio.c:1066: clear_status_registers(void) __nonbanked
                                   2590 ;	-----------------------------------------
                                   2591 ;	 function clear_status_registers
                                   2592 ;	-----------------------------------------
      0008FC                       2593 _clear_status_registers:
                                   2594 ;	radio/radio.c:1068: register_read(EZRADIOPRO_INTERRUPT_STATUS_1);
      0008FC 75 82 03         [24] 2595 	mov	dpl,#0x03
      0008FF 12r08r88         [24] 2596 	lcall	_register_read
                                   2597 ;	radio/radio.c:1069: register_read(EZRADIOPRO_INTERRUPT_STATUS_2);
      000902 75 82 04         [24] 2598 	mov	dpl,#0x04
      000905 02r08r88         [24] 2599 	ljmp	_register_read
                                   2600 ;------------------------------------------------------------
                                   2601 ;Allocation info for local variables in function 'scale_uint32'
                                   2602 ;------------------------------------------------------------
                                   2603 ;	radio/radio.c:1079: scale_uint32(__pdata uint32_t value, __pdata uint32_t scale) __nonbanked
                                   2604 ;	-----------------------------------------
                                   2605 ;	 function scale_uint32
                                   2606 ;	-----------------------------------------
      000908                       2607 _scale_uint32:
      000908 AF 82            [24] 2608 	mov	r7,dpl
      00090A AE 83            [24] 2609 	mov	r6,dph
      00090C AD F0            [24] 2610 	mov	r5,b
      00090E FC               [12] 2611 	mov	r4,a
      00090F 78r23            [12] 2612 	mov	r0,#_scale_uint32_value_1_239
      000911 EF               [12] 2613 	mov	a,r7
      000912 F2               [24] 2614 	movx	@r0,a
      000913 08               [12] 2615 	inc	r0
      000914 EE               [12] 2616 	mov	a,r6
      000915 F2               [24] 2617 	movx	@r0,a
      000916 08               [12] 2618 	inc	r0
      000917 ED               [12] 2619 	mov	a,r5
      000918 F2               [24] 2620 	movx	@r0,a
      000919 08               [12] 2621 	inc	r0
      00091A EC               [12] 2622 	mov	a,r4
      00091B F2               [24] 2623 	movx	@r0,a
                                   2624 ;	radio/radio.c:1081: return (value + (scale >> 1)) / scale;
      00091C 78r22            [12] 2625 	mov	r0,#(_scale_uint32_PARM_2 + 3)
      00091E E2               [24] 2626 	movx	a,@r0
      00091F C3               [12] 2627 	clr	c
      000920 13               [12] 2628 	rrc	a
      000921 FF               [12] 2629 	mov	r7,a
      000922 18               [12] 2630 	dec	r0
      000923 E2               [24] 2631 	movx	a,@r0
      000924 13               [12] 2632 	rrc	a
      000925 FE               [12] 2633 	mov	r6,a
      000926 18               [12] 2634 	dec	r0
      000927 E2               [24] 2635 	movx	a,@r0
      000928 13               [12] 2636 	rrc	a
      000929 FB               [12] 2637 	mov	r3,a
      00092A 18               [12] 2638 	dec	r0
      00092B E2               [24] 2639 	movx	a,@r0
      00092C 13               [12] 2640 	rrc	a
      00092D FA               [12] 2641 	mov	r2,a
      00092E 78r23            [12] 2642 	mov	r0,#_scale_uint32_value_1_239
      000930 E2               [24] 2643 	movx	a,@r0
      000931 2A               [12] 2644 	add	a,r2
      000932 FA               [12] 2645 	mov	r2,a
      000933 08               [12] 2646 	inc	r0
      000934 E2               [24] 2647 	movx	a,@r0
      000935 3B               [12] 2648 	addc	a,r3
      000936 FB               [12] 2649 	mov	r3,a
      000937 08               [12] 2650 	inc	r0
      000938 E2               [24] 2651 	movx	a,@r0
      000939 3E               [12] 2652 	addc	a,r6
      00093A FE               [12] 2653 	mov	r6,a
      00093B 08               [12] 2654 	inc	r0
      00093C E2               [24] 2655 	movx	a,@r0
      00093D 3F               [12] 2656 	addc	a,r7
      00093E FF               [12] 2657 	mov	r7,a
      00093F 78r1F            [12] 2658 	mov	r0,#_scale_uint32_PARM_2
      000941 90r00r00         [24] 2659 	mov	dptr,#__divulong_PARM_2
      000944 E2               [24] 2660 	movx	a,@r0
      000945 F0               [24] 2661 	movx	@dptr,a
      000946 08               [12] 2662 	inc	r0
      000947 E2               [24] 2663 	movx	a,@r0
      000948 A3               [24] 2664 	inc	dptr
      000949 F0               [24] 2665 	movx	@dptr,a
      00094A 08               [12] 2666 	inc	r0
      00094B E2               [24] 2667 	movx	a,@r0
      00094C A3               [24] 2668 	inc	dptr
      00094D F0               [24] 2669 	movx	@dptr,a
      00094E 08               [12] 2670 	inc	r0
      00094F E2               [24] 2671 	movx	a,@r0
      000950 A3               [24] 2672 	inc	dptr
      000951 F0               [24] 2673 	movx	@dptr,a
      000952 8A 82            [24] 2674 	mov	dpl,r2
      000954 8B 83            [24] 2675 	mov	dph,r3
      000956 8E F0            [24] 2676 	mov	b,r6
      000958 EF               [12] 2677 	mov	a,r7
      000959 02r00r00         [24] 2678 	ljmp	__divulong
                                   2679 ;------------------------------------------------------------
                                   2680 ;Allocation info for local variables in function 'software_reset'
                                   2681 ;------------------------------------------------------------
                                   2682 ;status                    Allocated with name '_software_reset_status_1_242'
                                   2683 ;------------------------------------------------------------
                                   2684 ;	radio/radio.c:1089: software_reset(void) __nonbanked
                                   2685 ;	-----------------------------------------
                                   2686 ;	 function software_reset
                                   2687 ;	-----------------------------------------
      00095C                       2688 _software_reset:
                                   2689 ;	radio/radio.c:1094: register_write(EZRADIOPRO_INTERRUPT_ENABLE_1, 0);
      00095C E4               [12] 2690 	clr	a
      00095D C0 E0            [24] 2691 	push	acc
      00095F 75 82 05         [24] 2692 	mov	dpl,#0x05
      000962 12r08r52         [24] 2693 	lcall	_register_write
      000965 15 81            [12] 2694 	dec	sp
                                   2695 ;	radio/radio.c:1095: register_write(EZRADIOPRO_INTERRUPT_ENABLE_2, 0);
      000967 E4               [12] 2696 	clr	a
      000968 C0 E0            [24] 2697 	push	acc
      00096A 75 82 06         [24] 2698 	mov	dpl,#0x06
      00096D 12r08r52         [24] 2699 	lcall	_register_write
      000970 15 81            [12] 2700 	dec	sp
                                   2701 ;	radio/radio.c:1097: clear_status_registers();
      000972 12r08rFC         [24] 2702 	lcall	_clear_status_registers
                                   2703 ;	radio/radio.c:1100: register_write(EZRADIOPRO_OPERATING_AND_FUNCTION_CONTROL_1, (EZRADIOPRO_SWRES | EZRADIOPRO_XTON));
      000975 74 81            [12] 2704 	mov	a,#0x81
      000977 C0 E0            [24] 2705 	push	acc
      000979 75 82 07         [24] 2706 	mov	dpl,#0x07
      00097C 12r08r52         [24] 2707 	lcall	_register_write
      00097F 15 81            [12] 2708 	dec	sp
                                   2709 ;	radio/radio.c:1103: delay_set(2);
      000981 90 00 02         [24] 2710 	mov	dptr,#0x0002
      000984 12r00r00         [24] 2711 	lcall	_delay_set
                                   2712 ;	radio/radio.c:1104: while (IRQ) {
      000987                       2713 00103$:
      000987 30 87 07         [24] 2714 	jnb	_IRQ,00105$
                                   2715 ;	radio/radio.c:1105: if (delay_expired()) {
      00098A 12r00r00         [24] 2716 	lcall	_delay_expired
      00098D 50 F8            [24] 2717 	jnc	00103$
                                   2718 ;	radio/radio.c:1106: return false;
      00098F C3               [12] 2719 	clr	c
      000990 22               [24] 2720 	ret
      000991                       2721 00105$:
                                   2722 ;	radio/radio.c:1111: register_write(EZRADIOPRO_INTERRUPT_ENABLE_1, 0);
      000991 E4               [12] 2723 	clr	a
      000992 C0 E0            [24] 2724 	push	acc
      000994 75 82 05         [24] 2725 	mov	dpl,#0x05
      000997 12r08r52         [24] 2726 	lcall	_register_write
      00099A 15 81            [12] 2727 	dec	sp
                                   2728 ;	radio/radio.c:1112: register_write(EZRADIOPRO_INTERRUPT_ENABLE_2, EZRADIOPRO_ENCHIPRDY);
      00099C 74 02            [12] 2729 	mov	a,#0x02
      00099E C0 E0            [24] 2730 	push	acc
      0009A0 75 82 06         [24] 2731 	mov	dpl,#0x06
      0009A3 12r08r52         [24] 2732 	lcall	_register_write
      0009A6 15 81            [12] 2733 	dec	sp
                                   2734 ;	radio/radio.c:1114: delay_set(20);
      0009A8 90 00 14         [24] 2735 	mov	dptr,#0x0014
      0009AB 12r00r00         [24] 2736 	lcall	_delay_set
                                   2737 ;	radio/radio.c:1115: while (!delay_expired()) {
      0009AE                       2738 00108$:
      0009AE 12r00r00         [24] 2739 	lcall	_delay_expired
      0009B1 40 13            [24] 2740 	jc	00110$
                                   2741 ;	radio/radio.c:1116: status = register_read(EZRADIOPRO_INTERRUPT_STATUS_1);
      0009B3 75 82 03         [24] 2742 	mov	dpl,#0x03
      0009B6 12r08r88         [24] 2743 	lcall	_register_read
                                   2744 ;	radio/radio.c:1117: status = register_read(EZRADIOPRO_INTERRUPT_STATUS_2);
      0009B9 75 82 04         [24] 2745 	mov	dpl,#0x04
      0009BC 12r08r88         [24] 2746 	lcall	_register_read
      0009BF E5 82            [12] 2747 	mov	a,dpl
                                   2748 ;	radio/radio.c:1118: if (status & EZRADIOPRO_ICHIPRDY) {
      0009C1 30 E1 EA         [24] 2749 	jnb	acc.1,00108$
                                   2750 ;	radio/radio.c:1119: return true;
      0009C4 D3               [12] 2751 	setb	c
      0009C5 22               [24] 2752 	ret
      0009C6                       2753 00110$:
                                   2754 ;	radio/radio.c:1122: return false;
      0009C6 C3               [12] 2755 	clr	c
      0009C7 22               [24] 2756 	ret
                                   2757 ;------------------------------------------------------------
                                   2758 ;Allocation info for local variables in function 'set_frequency_registers'
                                   2759 ;------------------------------------------------------------
                                   2760 ;band                      Allocated with name '_set_frequency_registers_band_1_248'
                                   2761 ;------------------------------------------------------------
                                   2762 ;	radio/radio.c:1129: set_frequency_registers(__pdata uint32_t frequency) __nonbanked
                                   2763 ;	-----------------------------------------
                                   2764 ;	 function set_frequency_registers
                                   2765 ;	-----------------------------------------
      0009C8                       2766 _set_frequency_registers:
      0009C8 AF 82            [24] 2767 	mov	r7,dpl
      0009CA AE 83            [24] 2768 	mov	r6,dph
      0009CC AD F0            [24] 2769 	mov	r5,b
      0009CE FC               [12] 2770 	mov	r4,a
      0009CF 78r27            [12] 2771 	mov	r0,#_set_frequency_registers_frequency_1_247
      0009D1 EF               [12] 2772 	mov	a,r7
      0009D2 F2               [24] 2773 	movx	@r0,a
      0009D3 08               [12] 2774 	inc	r0
      0009D4 EE               [12] 2775 	mov	a,r6
      0009D5 F2               [24] 2776 	movx	@r0,a
      0009D6 08               [12] 2777 	inc	r0
      0009D7 ED               [12] 2778 	mov	a,r5
      0009D8 F2               [24] 2779 	movx	@r0,a
      0009D9 08               [12] 2780 	inc	r0
      0009DA EC               [12] 2781 	mov	a,r4
      0009DB F2               [24] 2782 	movx	@r0,a
                                   2783 ;	radio/radio.c:1134: if (frequency > 480000000UL) {
      0009DC 78r27            [12] 2784 	mov	r0,#_set_frequency_registers_frequency_1_247
      0009DE C3               [12] 2785 	clr	c
      0009DF E2               [24] 2786 	movx	a,@r0
      0009E0 F5 F0            [12] 2787 	mov	b,a
      0009E2 E4               [12] 2788 	clr	a
      0009E3 95 F0            [12] 2789 	subb	a,b
      0009E5 08               [12] 2790 	inc	r0
      0009E6 E2               [24] 2791 	movx	a,@r0
      0009E7 F5 F0            [12] 2792 	mov	b,a
      0009E9 74 38            [12] 2793 	mov	a,#0x38
      0009EB 95 F0            [12] 2794 	subb	a,b
      0009ED 08               [12] 2795 	inc	r0
      0009EE E2               [24] 2796 	movx	a,@r0
      0009EF F5 F0            [12] 2797 	mov	b,a
      0009F1 74 9C            [12] 2798 	mov	a,#0x9C
      0009F3 95 F0            [12] 2799 	subb	a,b
      0009F5 08               [12] 2800 	inc	r0
      0009F6 E2               [24] 2801 	movx	a,@r0
      0009F7 F5 F0            [12] 2802 	mov	b,a
      0009F9 74 1C            [12] 2803 	mov	a,#0x1C
      0009FB 95 F0            [12] 2804 	subb	a,b
      0009FD 40 03            [24] 2805 	jc	00109$
      0009FF 02r0ArBD         [24] 2806 	ljmp	00102$
      000A02                       2807 00109$:
                                   2808 ;	radio/radio.c:1135: frequency -= 480000000UL;
      000A02 78r28            [12] 2809 	mov	r0,#(_set_frequency_registers_frequency_1_247 + 1)
      000A04 E2               [24] 2810 	movx	a,@r0
      000A05 24 C8            [12] 2811 	add	a,#0xC8
      000A07 F2               [24] 2812 	movx	@r0,a
      000A08 08               [12] 2813 	inc	r0
      000A09 E2               [24] 2814 	movx	a,@r0
      000A0A 34 63            [12] 2815 	addc	a,#0x63
      000A0C F2               [24] 2816 	movx	@r0,a
      000A0D 08               [12] 2817 	inc	r0
      000A0E E2               [24] 2818 	movx	a,@r0
      000A0F 34 E3            [12] 2819 	addc	a,#0xE3
      000A11 F2               [24] 2820 	movx	@r0,a
                                   2821 ;	radio/radio.c:1136: band  = frequency / 20000000UL;
      000A12 90r00r00         [24] 2822 	mov	dptr,#__divulong_PARM_2
      000A15 E4               [12] 2823 	clr	a
      000A16 F0               [24] 2824 	movx	@dptr,a
      000A17 74 2D            [12] 2825 	mov	a,#0x2D
      000A19 A3               [24] 2826 	inc	dptr
      000A1A F0               [24] 2827 	movx	@dptr,a
      000A1B 74 31            [12] 2828 	mov	a,#0x31
      000A1D A3               [24] 2829 	inc	dptr
      000A1E F0               [24] 2830 	movx	@dptr,a
      000A1F 74 01            [12] 2831 	mov	a,#0x01
      000A21 A3               [24] 2832 	inc	dptr
      000A22 F0               [24] 2833 	movx	@dptr,a
      000A23 78r27            [12] 2834 	mov	r0,#_set_frequency_registers_frequency_1_247
      000A25 E2               [24] 2835 	movx	a,@r0
      000A26 F5 82            [12] 2836 	mov	dpl,a
      000A28 08               [12] 2837 	inc	r0
      000A29 E2               [24] 2838 	movx	a,@r0
      000A2A F5 83            [12] 2839 	mov	dph,a
      000A2C 08               [12] 2840 	inc	r0
      000A2D E2               [24] 2841 	movx	a,@r0
      000A2E F5 F0            [12] 2842 	mov	b,a
      000A30 08               [12] 2843 	inc	r0
      000A31 E2               [24] 2844 	movx	a,@r0
      000A32 12r00r00         [24] 2845 	lcall	__divulong
      000A35 AA 82            [24] 2846 	mov	r2,dpl
      000A37 90r01r09         [24] 2847 	mov	dptr,#_set_frequency_registers_band_1_248
      000A3A EA               [12] 2848 	mov	a,r2
      000A3B F0               [24] 2849 	movx	@dptr,a
                                   2850 ;	radio/radio.c:1137: frequency -= (uint32_t)band * 20000000UL;
      000A3C 90r00r00         [24] 2851 	mov	dptr,#__mullong_PARM_2
      000A3F EA               [12] 2852 	mov	a,r2
      000A40 F0               [24] 2853 	movx	@dptr,a
      000A41 E4               [12] 2854 	clr	a
      000A42 A3               [24] 2855 	inc	dptr
      000A43 F0               [24] 2856 	movx	@dptr,a
      000A44 A3               [24] 2857 	inc	dptr
      000A45 F0               [24] 2858 	movx	@dptr,a
      000A46 A3               [24] 2859 	inc	dptr
      000A47 F0               [24] 2860 	movx	@dptr,a
      000A48 90 2D 00         [24] 2861 	mov	dptr,#0x2D00
      000A4B 75 F0 31         [24] 2862 	mov	b,#0x31
      000A4E 74 01            [12] 2863 	mov	a,#0x01
      000A50 12r00r00         [24] 2864 	lcall	__mullong
      000A53 AC 82            [24] 2865 	mov	r4,dpl
      000A55 AD 83            [24] 2866 	mov	r5,dph
      000A57 AE F0            [24] 2867 	mov	r6,b
      000A59 FF               [12] 2868 	mov	r7,a
      000A5A 78r27            [12] 2869 	mov	r0,#_set_frequency_registers_frequency_1_247
      000A5C E2               [24] 2870 	movx	a,@r0
      000A5D C3               [12] 2871 	clr	c
      000A5E 9C               [12] 2872 	subb	a,r4
      000A5F F2               [24] 2873 	movx	@r0,a
      000A60 08               [12] 2874 	inc	r0
      000A61 E2               [24] 2875 	movx	a,@r0
      000A62 9D               [12] 2876 	subb	a,r5
      000A63 F2               [24] 2877 	movx	@r0,a
      000A64 08               [12] 2878 	inc	r0
      000A65 E2               [24] 2879 	movx	a,@r0
      000A66 9E               [12] 2880 	subb	a,r6
      000A67 F2               [24] 2881 	movx	@r0,a
      000A68 08               [12] 2882 	inc	r0
      000A69 E2               [24] 2883 	movx	a,@r0
      000A6A 9F               [12] 2884 	subb	a,r7
      000A6B F2               [24] 2885 	movx	@r0,a
                                   2886 ;	radio/radio.c:1138: frequency  = scale_uint32(frequency, 625);
      000A6C 78r1F            [12] 2887 	mov	r0,#_scale_uint32_PARM_2
      000A6E 74 71            [12] 2888 	mov	a,#0x71
      000A70 F2               [24] 2889 	movx	@r0,a
      000A71 08               [12] 2890 	inc	r0
      000A72 74 02            [12] 2891 	mov	a,#0x02
      000A74 F2               [24] 2892 	movx	@r0,a
      000A75 08               [12] 2893 	inc	r0
      000A76 E4               [12] 2894 	clr	a
      000A77 F2               [24] 2895 	movx	@r0,a
      000A78 08               [12] 2896 	inc	r0
      000A79 F2               [24] 2897 	movx	@r0,a
      000A7A 78r27            [12] 2898 	mov	r0,#_set_frequency_registers_frequency_1_247
      000A7C E2               [24] 2899 	movx	a,@r0
      000A7D F5 82            [12] 2900 	mov	dpl,a
      000A7F 08               [12] 2901 	inc	r0
      000A80 E2               [24] 2902 	movx	a,@r0
      000A81 F5 83            [12] 2903 	mov	dph,a
      000A83 08               [12] 2904 	inc	r0
      000A84 E2               [24] 2905 	movx	a,@r0
      000A85 F5 F0            [12] 2906 	mov	b,a
      000A87 08               [12] 2907 	inc	r0
      000A88 E2               [24] 2908 	movx	a,@r0
      000A89 12r09r08         [24] 2909 	lcall	_scale_uint32
      000A8C 78r27            [12] 2910 	mov	r0,#_set_frequency_registers_frequency_1_247
      000A8E C0 E0            [24] 2911 	push	acc
      000A90 E5 82            [12] 2912 	mov	a,dpl
      000A92 F2               [24] 2913 	movx	@r0,a
      000A93 08               [12] 2914 	inc	r0
      000A94 E5 83            [12] 2915 	mov	a,dph
      000A96 F2               [24] 2916 	movx	@r0,a
      000A97 08               [12] 2917 	inc	r0
      000A98 E5 F0            [12] 2918 	mov	a,b
      000A9A F2               [24] 2919 	movx	@r0,a
      000A9B D0 E0            [24] 2920 	pop	acc
      000A9D 08               [12] 2921 	inc	r0
      000A9E F2               [24] 2922 	movx	@r0,a
                                   2923 ;	radio/radio.c:1139: frequency <<= 1;
      000A9F 78r27            [12] 2924 	mov	r0,#_set_frequency_registers_frequency_1_247
      000AA1 E2               [24] 2925 	movx	a,@r0
      000AA2 25 E0            [12] 2926 	add	a,acc
      000AA4 F2               [24] 2927 	movx	@r0,a
      000AA5 08               [12] 2928 	inc	r0
      000AA6 E2               [24] 2929 	movx	a,@r0
      000AA7 33               [12] 2930 	rlc	a
      000AA8 F2               [24] 2931 	movx	@r0,a
      000AA9 08               [12] 2932 	inc	r0
      000AAA E2               [24] 2933 	movx	a,@r0
      000AAB 33               [12] 2934 	rlc	a
      000AAC F2               [24] 2935 	movx	@r0,a
      000AAD 08               [12] 2936 	inc	r0
      000AAE E2               [24] 2937 	movx	a,@r0
      000AAF 33               [12] 2938 	rlc	a
      000AB0 F2               [24] 2939 	movx	@r0,a
                                   2940 ;	radio/radio.c:1140: band |= EZRADIOPRO_HBSEL;
      000AB1 90r01r09         [24] 2941 	mov	dptr,#_set_frequency_registers_band_1_248
      000AB4 E0               [24] 2942 	movx	a,@dptr
      000AB5 FF               [12] 2943 	mov	r7,a
      000AB6 74 20            [12] 2944 	mov	a,#0x20
      000AB8 4F               [12] 2945 	orl	a,r7
      000AB9 F0               [24] 2946 	movx	@dptr,a
      000ABA 02r0Br7E         [24] 2947 	ljmp	00103$
      000ABD                       2948 00102$:
                                   2949 ;	radio/radio.c:1142: frequency -= 240000000UL;
      000ABD 78r28            [12] 2950 	mov	r0,#(_set_frequency_registers_frequency_1_247 + 1)
      000ABF E2               [24] 2951 	movx	a,@r0
      000AC0 24 E4            [12] 2952 	add	a,#0xE4
      000AC2 F2               [24] 2953 	movx	@r0,a
      000AC3 08               [12] 2954 	inc	r0
      000AC4 E2               [24] 2955 	movx	a,@r0
      000AC5 34 B1            [12] 2956 	addc	a,#0xB1
      000AC7 F2               [24] 2957 	movx	@r0,a
      000AC8 08               [12] 2958 	inc	r0
      000AC9 E2               [24] 2959 	movx	a,@r0
      000ACA 34 F1            [12] 2960 	addc	a,#0xF1
      000ACC F2               [24] 2961 	movx	@r0,a
                                   2962 ;	radio/radio.c:1143: band  = frequency / 10000000UL;
      000ACD 90r00r00         [24] 2963 	mov	dptr,#__divulong_PARM_2
      000AD0 74 80            [12] 2964 	mov	a,#0x80
      000AD2 F0               [24] 2965 	movx	@dptr,a
      000AD3 74 96            [12] 2966 	mov	a,#0x96
      000AD5 A3               [24] 2967 	inc	dptr
      000AD6 F0               [24] 2968 	movx	@dptr,a
      000AD7 74 98            [12] 2969 	mov	a,#0x98
      000AD9 A3               [24] 2970 	inc	dptr
      000ADA F0               [24] 2971 	movx	@dptr,a
      000ADB E4               [12] 2972 	clr	a
      000ADC A3               [24] 2973 	inc	dptr
      000ADD F0               [24] 2974 	movx	@dptr,a
      000ADE 78r27            [12] 2975 	mov	r0,#_set_frequency_registers_frequency_1_247
      000AE0 E2               [24] 2976 	movx	a,@r0
      000AE1 F5 82            [12] 2977 	mov	dpl,a
      000AE3 08               [12] 2978 	inc	r0
      000AE4 E2               [24] 2979 	movx	a,@r0
      000AE5 F5 83            [12] 2980 	mov	dph,a
      000AE7 08               [12] 2981 	inc	r0
      000AE8 E2               [24] 2982 	movx	a,@r0
      000AE9 F5 F0            [12] 2983 	mov	b,a
      000AEB 08               [12] 2984 	inc	r0
      000AEC E2               [24] 2985 	movx	a,@r0
      000AED 12r00r00         [24] 2986 	lcall	__divulong
      000AF0 AC 82            [24] 2987 	mov	r4,dpl
      000AF2 90r01r09         [24] 2988 	mov	dptr,#_set_frequency_registers_band_1_248
      000AF5 EC               [12] 2989 	mov	a,r4
      000AF6 F0               [24] 2990 	movx	@dptr,a
                                   2991 ;	radio/radio.c:1144: frequency -= (uint32_t)band * 10000000UL;
      000AF7 90r00r00         [24] 2992 	mov	dptr,#__mullong_PARM_2
      000AFA EC               [12] 2993 	mov	a,r4
      000AFB F0               [24] 2994 	movx	@dptr,a
      000AFC E4               [12] 2995 	clr	a
      000AFD A3               [24] 2996 	inc	dptr
      000AFE F0               [24] 2997 	movx	@dptr,a
      000AFF A3               [24] 2998 	inc	dptr
      000B00 F0               [24] 2999 	movx	@dptr,a
      000B01 A3               [24] 3000 	inc	dptr
      000B02 F0               [24] 3001 	movx	@dptr,a
      000B03 90 96 80         [24] 3002 	mov	dptr,#0x9680
      000B06 75 F0 98         [24] 3003 	mov	b,#0x98
      000B09 E4               [12] 3004 	clr	a
      000B0A 12r00r00         [24] 3005 	lcall	__mullong
      000B0D AC 82            [24] 3006 	mov	r4,dpl
      000B0F AD 83            [24] 3007 	mov	r5,dph
      000B11 AE F0            [24] 3008 	mov	r6,b
      000B13 FF               [12] 3009 	mov	r7,a
      000B14 78r27            [12] 3010 	mov	r0,#_set_frequency_registers_frequency_1_247
      000B16 E2               [24] 3011 	movx	a,@r0
      000B17 C3               [12] 3012 	clr	c
      000B18 9C               [12] 3013 	subb	a,r4
      000B19 F2               [24] 3014 	movx	@r0,a
      000B1A 08               [12] 3015 	inc	r0
      000B1B E2               [24] 3016 	movx	a,@r0
      000B1C 9D               [12] 3017 	subb	a,r5
      000B1D F2               [24] 3018 	movx	@r0,a
      000B1E 08               [12] 3019 	inc	r0
      000B1F E2               [24] 3020 	movx	a,@r0
      000B20 9E               [12] 3021 	subb	a,r6
      000B21 F2               [24] 3022 	movx	@r0,a
      000B22 08               [12] 3023 	inc	r0
      000B23 E2               [24] 3024 	movx	a,@r0
      000B24 9F               [12] 3025 	subb	a,r7
      000B25 F2               [24] 3026 	movx	@r0,a
                                   3027 ;	radio/radio.c:1145: frequency  = scale_uint32(frequency, 625);
      000B26 78r1F            [12] 3028 	mov	r0,#_scale_uint32_PARM_2
      000B28 74 71            [12] 3029 	mov	a,#0x71
      000B2A F2               [24] 3030 	movx	@r0,a
      000B2B 08               [12] 3031 	inc	r0
      000B2C 74 02            [12] 3032 	mov	a,#0x02
      000B2E F2               [24] 3033 	movx	@r0,a
      000B2F 08               [12] 3034 	inc	r0
      000B30 E4               [12] 3035 	clr	a
      000B31 F2               [24] 3036 	movx	@r0,a
      000B32 08               [12] 3037 	inc	r0
      000B33 F2               [24] 3038 	movx	@r0,a
      000B34 78r27            [12] 3039 	mov	r0,#_set_frequency_registers_frequency_1_247
      000B36 E2               [24] 3040 	movx	a,@r0
      000B37 F5 82            [12] 3041 	mov	dpl,a
      000B39 08               [12] 3042 	inc	r0
      000B3A E2               [24] 3043 	movx	a,@r0
      000B3B F5 83            [12] 3044 	mov	dph,a
      000B3D 08               [12] 3045 	inc	r0
      000B3E E2               [24] 3046 	movx	a,@r0
      000B3F F5 F0            [12] 3047 	mov	b,a
      000B41 08               [12] 3048 	inc	r0
      000B42 E2               [24] 3049 	movx	a,@r0
      000B43 12r09r08         [24] 3050 	lcall	_scale_uint32
      000B46 78r27            [12] 3051 	mov	r0,#_set_frequency_registers_frequency_1_247
      000B48 C0 E0            [24] 3052 	push	acc
      000B4A E5 82            [12] 3053 	mov	a,dpl
      000B4C F2               [24] 3054 	movx	@r0,a
      000B4D 08               [12] 3055 	inc	r0
      000B4E E5 83            [12] 3056 	mov	a,dph
      000B50 F2               [24] 3057 	movx	@r0,a
      000B51 08               [12] 3058 	inc	r0
      000B52 E5 F0            [12] 3059 	mov	a,b
      000B54 F2               [24] 3060 	movx	@r0,a
      000B55 D0 E0            [24] 3061 	pop	acc
      000B57 08               [12] 3062 	inc	r0
      000B58 F2               [24] 3063 	movx	@r0,a
                                   3064 ;	radio/radio.c:1146: frequency <<= 2;
      000B59 78r27            [12] 3065 	mov	r0,#_set_frequency_registers_frequency_1_247
      000B5B E2               [24] 3066 	movx	a,@r0
      000B5C 25 E0            [12] 3067 	add	a,acc
      000B5E F2               [24] 3068 	movx	@r0,a
      000B5F 08               [12] 3069 	inc	r0
      000B60 E2               [24] 3070 	movx	a,@r0
      000B61 33               [12] 3071 	rlc	a
      000B62 F2               [24] 3072 	movx	@r0,a
      000B63 08               [12] 3073 	inc	r0
      000B64 E2               [24] 3074 	movx	a,@r0
      000B65 33               [12] 3075 	rlc	a
      000B66 F2               [24] 3076 	movx	@r0,a
      000B67 08               [12] 3077 	inc	r0
      000B68 E2               [24] 3078 	movx	a,@r0
      000B69 33               [12] 3079 	rlc	a
      000B6A F2               [24] 3080 	movx	@r0,a
      000B6B 18               [12] 3081 	dec	r0
      000B6C 18               [12] 3082 	dec	r0
      000B6D 18               [12] 3083 	dec	r0
      000B6E E2               [24] 3084 	movx	a,@r0
      000B6F 25 E0            [12] 3085 	add	a,acc
      000B71 F2               [24] 3086 	movx	@r0,a
      000B72 08               [12] 3087 	inc	r0
      000B73 E2               [24] 3088 	movx	a,@r0
      000B74 33               [12] 3089 	rlc	a
      000B75 F2               [24] 3090 	movx	@r0,a
      000B76 08               [12] 3091 	inc	r0
      000B77 E2               [24] 3092 	movx	a,@r0
      000B78 33               [12] 3093 	rlc	a
      000B79 F2               [24] 3094 	movx	@r0,a
      000B7A 08               [12] 3095 	inc	r0
      000B7B E2               [24] 3096 	movx	a,@r0
      000B7C 33               [12] 3097 	rlc	a
      000B7D F2               [24] 3098 	movx	@r0,a
      000B7E                       3099 00103$:
                                   3100 ;	radio/radio.c:1149: band |= EZRADIOPRO_SBSEL;
      000B7E 90r01r09         [24] 3101 	mov	dptr,#_set_frequency_registers_band_1_248
      000B81 E0               [24] 3102 	movx	a,@dptr
      000B82 FF               [12] 3103 	mov	r7,a
      000B83 74 40            [12] 3104 	mov	a,#0x40
      000B85 4F               [12] 3105 	orl	a,r7
      000B86 F0               [24] 3106 	movx	@dptr,a
                                   3107 ;	radio/radio.c:1150: carrier = (uint16_t)frequency;
      000B87 78r27            [12] 3108 	mov	r0,#_set_frequency_registers_frequency_1_247
      000B89 E2               [24] 3109 	movx	a,@r0
      000B8A FC               [12] 3110 	mov	r4,a
      000B8B 08               [12] 3111 	inc	r0
      000B8C E2               [24] 3112 	movx	a,@r0
      000B8D FD               [12] 3113 	mov	r5,a
                                   3114 ;	radio/radio.c:1152: register_write(EZRADIOPRO_FREQUENCY_BAND_SELECT, band);
      000B8E C0 05            [24] 3115 	push	ar5
      000B90 C0 04            [24] 3116 	push	ar4
      000B92 E0               [24] 3117 	movx	a,@dptr
      000B93 C0 E0            [24] 3118 	push	acc
      000B95 75 82 75         [24] 3119 	mov	dpl,#0x75
      000B98 12r08r52         [24] 3120 	lcall	_register_write
      000B9B 15 81            [12] 3121 	dec	sp
      000B9D D0 04            [24] 3122 	pop	ar4
      000B9F D0 05            [24] 3123 	pop	ar5
                                   3124 ;	radio/radio.c:1153: register_write(EZRADIOPRO_NOMINAL_CARRIER_FREQUENCY_1, carrier >> 8);
      000BA1 8D 07            [24] 3125 	mov	ar7,r5
      000BA3 C0 05            [24] 3126 	push	ar5
      000BA5 C0 04            [24] 3127 	push	ar4
      000BA7 C0 07            [24] 3128 	push	ar7
      000BA9 75 82 76         [24] 3129 	mov	dpl,#0x76
      000BAC 12r08r52         [24] 3130 	lcall	_register_write
      000BAF 15 81            [12] 3131 	dec	sp
      000BB1 D0 04            [24] 3132 	pop	ar4
      000BB3 D0 05            [24] 3133 	pop	ar5
                                   3134 ;	radio/radio.c:1154: register_write(EZRADIOPRO_NOMINAL_CARRIER_FREQUENCY_0, carrier & 0xFF);
      000BB5 C0 04            [24] 3135 	push	ar4
      000BB7 75 82 77         [24] 3136 	mov	dpl,#0x77
      000BBA 12r08r52         [24] 3137 	lcall	_register_write
      000BBD 15 81            [12] 3138 	dec	sp
      000BBF 22               [24] 3139 	ret
                                   3140 ;------------------------------------------------------------
                                   3141 ;Allocation info for local variables in function 'radio_temperature'
                                   3142 ;------------------------------------------------------------
                                   3143 ;temp_local                Allocated to registers r6 r7 
                                   3144 ;------------------------------------------------------------
                                   3145 ;	radio/radio.c:1163: radio_temperature(void) __nonbanked
                                   3146 ;	-----------------------------------------
                                   3147 ;	 function radio_temperature
                                   3148 ;	-----------------------------------------
      000BC0                       3149 _radio_temperature:
                                   3150 ;	radio/radio.c:1180: AD0BUSY = 1;		// Start ADC conversion
      000BC0 D2 EC            [12] 3151 	setb	_AD0BUSY
                                   3152 ;	radio/radio.c:1181: while (AD0BUSY) ;  	// Wait for completion of conversion
      000BC2                       3153 00101$:
      000BC2 20 EC FD         [24] 3154 	jb	_AD0BUSY,00101$
                                   3155 ;	radio/radio.c:1183: temp_local = (ADC0H << 8) | ADC0L;
      000BC5 AF BE            [24] 3156 	mov	r7,_ADC0H
      000BC7 7E 00            [12] 3157 	mov	r6,#0x00
      000BC9 AC BD            [24] 3158 	mov	r4,_ADC0L
      000BCB 7D 00            [12] 3159 	mov	r5,#0x00
      000BCD EC               [12] 3160 	mov	a,r4
      000BCE 42 06            [12] 3161 	orl	ar6,a
      000BD0 ED               [12] 3162 	mov	a,r5
      000BD1 42 07            [12] 3163 	orl	ar7,a
                                   3164 ;	radio/radio.c:1184: temp_local *= 1.64060;  // convert reading into mV ( (val/1024) * 1680 )  vref=1680mV
      000BD3 8E 82            [24] 3165 	mov	dpl,r6
      000BD5 8F 83            [24] 3166 	mov	dph,r7
      000BD7 12r00r00         [24] 3167 	lcall	___sint2fs
      000BDA AA 82            [24] 3168 	mov	r2,dpl
      000BDC AB 83            [24] 3169 	mov	r3,dph
      000BDE AC F0            [24] 3170 	mov	r4,b
      000BE0 FD               [12] 3171 	mov	r5,a
      000BE1 C0 02            [24] 3172 	push	ar2
      000BE3 C0 03            [24] 3173 	push	ar3
      000BE5 C0 04            [24] 3174 	push	ar4
      000BE7 C0 05            [24] 3175 	push	ar5
      000BE9 90 FF 2E         [24] 3176 	mov	dptr,#0xFF2E
      000BEC 75 F0 D1         [24] 3177 	mov	b,#0xD1
      000BEF 74 3F            [12] 3178 	mov	a,#0x3F
      000BF1 12r00r00         [24] 3179 	lcall	___fsmul
      000BF4 AA 82            [24] 3180 	mov	r2,dpl
      000BF6 AB 83            [24] 3181 	mov	r3,dph
      000BF8 AC F0            [24] 3182 	mov	r4,b
      000BFA FD               [12] 3183 	mov	r5,a
      000BFB E5 81            [12] 3184 	mov	a,sp
      000BFD 24 FC            [12] 3185 	add	a,#0xfc
      000BFF F5 81            [12] 3186 	mov	sp,a
      000C01 8A 82            [24] 3187 	mov	dpl,r2
      000C03 8B 83            [24] 3188 	mov	dph,r3
      000C05 8C F0            [24] 3189 	mov	b,r4
      000C07 ED               [12] 3190 	mov	a,r5
      000C08 12r00r00         [24] 3191 	lcall	___fs2sint
      000C0B AE 82            [24] 3192 	mov	r6,dpl
      000C0D AF 83            [24] 3193 	mov	r7,dph
                                   3194 ;	radio/radio.c:1185: temp_local = 25.0 + (temp_local - 1025) / 3.4; // convert mV reading into degC.
      000C0F EE               [12] 3195 	mov	a,r6
      000C10 24 FF            [12] 3196 	add	a,#0xFF
      000C12 FC               [12] 3197 	mov	r4,a
      000C13 EF               [12] 3198 	mov	a,r7
      000C14 34 FB            [12] 3199 	addc	a,#0xFB
      000C16 FD               [12] 3200 	mov	r5,a
      000C17 8C 82            [24] 3201 	mov	dpl,r4
      000C19 8D 83            [24] 3202 	mov	dph,r5
      000C1B 12r00r00         [24] 3203 	lcall	___sint2fs
      000C1E AA 82            [24] 3204 	mov	r2,dpl
      000C20 AB 83            [24] 3205 	mov	r3,dph
      000C22 AC F0            [24] 3206 	mov	r4,b
      000C24 FD               [12] 3207 	mov	r5,a
      000C25 74 9A            [12] 3208 	mov	a,#0x9A
      000C27 C0 E0            [24] 3209 	push	acc
      000C29 14               [12] 3210 	dec	a
      000C2A C0 E0            [24] 3211 	push	acc
      000C2C 74 59            [12] 3212 	mov	a,#0x59
      000C2E C0 E0            [24] 3213 	push	acc
      000C30 74 40            [12] 3214 	mov	a,#0x40
      000C32 C0 E0            [24] 3215 	push	acc
      000C34 8A 82            [24] 3216 	mov	dpl,r2
      000C36 8B 83            [24] 3217 	mov	dph,r3
      000C38 8C F0            [24] 3218 	mov	b,r4
      000C3A ED               [12] 3219 	mov	a,r5
      000C3B 12r00r00         [24] 3220 	lcall	___fsdiv
      000C3E AA 82            [24] 3221 	mov	r2,dpl
      000C40 AB 83            [24] 3222 	mov	r3,dph
      000C42 AC F0            [24] 3223 	mov	r4,b
      000C44 FD               [12] 3224 	mov	r5,a
      000C45 E5 81            [12] 3225 	mov	a,sp
      000C47 24 FC            [12] 3226 	add	a,#0xfc
      000C49 F5 81            [12] 3227 	mov	sp,a
      000C4B E4               [12] 3228 	clr	a
      000C4C C0 E0            [24] 3229 	push	acc
      000C4E C0 E0            [24] 3230 	push	acc
      000C50 74 C8            [12] 3231 	mov	a,#0xC8
      000C52 C0 E0            [24] 3232 	push	acc
      000C54 74 41            [12] 3233 	mov	a,#0x41
      000C56 C0 E0            [24] 3234 	push	acc
      000C58 8A 82            [24] 3235 	mov	dpl,r2
      000C5A 8B 83            [24] 3236 	mov	dph,r3
      000C5C 8C F0            [24] 3237 	mov	b,r4
      000C5E ED               [12] 3238 	mov	a,r5
      000C5F 12r00r00         [24] 3239 	lcall	___fsadd
      000C62 AA 82            [24] 3240 	mov	r2,dpl
      000C64 AB 83            [24] 3241 	mov	r3,dph
      000C66 AC F0            [24] 3242 	mov	r4,b
      000C68 FD               [12] 3243 	mov	r5,a
      000C69 E5 81            [12] 3244 	mov	a,sp
      000C6B 24 FC            [12] 3245 	add	a,#0xfc
      000C6D F5 81            [12] 3246 	mov	sp,a
      000C6F 8A 82            [24] 3247 	mov	dpl,r2
      000C71 8B 83            [24] 3248 	mov	dph,r3
      000C73 8C F0            [24] 3249 	mov	b,r4
      000C75 ED               [12] 3250 	mov	a,r5
                                   3251 ;	radio/radio.c:1187: return temp_local;
      000C76 02r00r00         [24] 3252 	ljmp	___fs2sint
                                   3253 ;------------------------------------------------------------
                                   3254 ;Allocation info for local variables in function 'radio_set_diversity'
                                   3255 ;------------------------------------------------------------
                                   3256 ;state                     Allocated with name '_radio_set_diversity_state_1_253'
                                   3257 ;------------------------------------------------------------
                                   3258 ;	radio/radio.c:1193: radio_set_diversity(enum DIVERSITY_Enum state)
                                   3259 ;	-----------------------------------------
                                   3260 ;	 function radio_set_diversity
                                   3261 ;	-----------------------------------------
      000C79                       3262 _radio_set_diversity:
      000C79 E5 82            [12] 3263 	mov	a,dpl
      000C7B 90r01r0A         [24] 3264 	mov	dptr,#_radio_set_diversity_state_1_253
      000C7E F0               [24] 3265 	movx	@dptr,a
                                   3266 ;	radio/radio.c:1195: switch (state) {
      000C7F E0               [24] 3267 	movx	a,@dptr
      000C80 FF               [12] 3268 	mov  r7,a
      000C81 24 FC            [12] 3269 	add	a,#0xff - 0x03
      000C83 40 68            [24] 3270 	jc	00105$
      000C85 EF               [12] 3271 	mov	a,r7
      000C86 2F               [12] 3272 	add	a,r7
      000C87 2F               [12] 3273 	add	a,r7
      000C88 90r0Cr8C         [24] 3274 	mov	dptr,#00113$
      000C8B 73               [24] 3275 	jmp	@a+dptr
      000C8C                       3276 00113$:
      000C8C 02r0Cr98         [24] 3277 	ljmp	00101$
      000C8F 02r0CrED         [24] 3278 	ljmp	00103$
      000C92 02r0CrED         [24] 3279 	ljmp	00104$
      000C95 02r0CrBD         [24] 3280 	ljmp	00102$
                                   3281 ;	radio/radio.c:1196: case DIVERSITY_ENABLED:
      000C98                       3282 00101$:
                                   3283 ;	radio/radio.c:1197: register_write(EZRADIOPRO_GPIO2_CONFIGURATION, 0x18);
      000C98 74 18            [12] 3284 	mov	a,#0x18
      000C9A C0 E0            [24] 3285 	push	acc
      000C9C 75 82 0D         [24] 3286 	mov	dpl,#0x0D
      000C9F 12r08r52         [24] 3287 	lcall	_register_write
      000CA2 15 81            [12] 3288 	dec	sp
                                   3289 ;	radio/radio.c:1199: register_write(EZRADIOPRO_OPERATING_AND_FUNCTION_CONTROL_2, (register_read(EZRADIOPRO_OPERATING_AND_FUNCTION_CONTROL_2) & ~EZRADIOPRO_ANTDIV_MASK) | 0x80);
      000CA4 75 82 08         [24] 3290 	mov	dpl,#0x08
      000CA7 12r08r88         [24] 3291 	lcall	_register_read
      000CAA AF 82            [24] 3292 	mov	r7,dpl
      000CAC 74 1F            [12] 3293 	mov	a,#0x1F
      000CAE 5F               [12] 3294 	anl	a,r7
      000CAF 44 80            [12] 3295 	orl	a,#0x80
      000CB1 FF               [12] 3296 	mov	r7,a
      000CB2 C0 07            [24] 3297 	push	ar7
      000CB4 75 82 08         [24] 3298 	mov	dpl,#0x08
      000CB7 12r08r52         [24] 3299 	lcall	_register_write
      000CBA 15 81            [12] 3300 	dec	sp
                                   3301 ;	radio/radio.c:1200: break;
                                   3302 ;	radio/radio.c:1202: case DIVERSITY_ANT2:
      000CBC 22               [24] 3303 	ret
      000CBD                       3304 00102$:
                                   3305 ;	radio/radio.c:1204: register_write(EZRADIOPRO_OPERATING_AND_FUNCTION_CONTROL_2, (register_read(EZRADIOPRO_OPERATING_AND_FUNCTION_CONTROL_2) & ~EZRADIOPRO_ANTDIV_MASK) | 0x20);
      000CBD 75 82 08         [24] 3306 	mov	dpl,#0x08
      000CC0 12r08r88         [24] 3307 	lcall	_register_read
      000CC3 AF 82            [24] 3308 	mov	r7,dpl
      000CC5 74 1F            [12] 3309 	mov	a,#0x1F
      000CC7 5F               [12] 3310 	anl	a,r7
      000CC8 44 20            [12] 3311 	orl	a,#0x20
      000CCA FF               [12] 3312 	mov	r7,a
      000CCB C0 07            [24] 3313 	push	ar7
      000CCD 75 82 08         [24] 3314 	mov	dpl,#0x08
      000CD0 12r08r52         [24] 3315 	lcall	_register_write
      000CD3 15 81            [12] 3316 	dec	sp
                                   3317 ;	radio/radio.c:1206: register_write(EZRADIOPRO_GPIO2_CONFIGURATION, 0x0A);	// GPIO2 output set high fixed
      000CD5 74 0A            [12] 3318 	mov	a,#0x0A
      000CD7 C0 E0            [24] 3319 	push	acc
      000CD9 75 82 0D         [24] 3320 	mov	dpl,#0x0D
      000CDC 12r08r52         [24] 3321 	lcall	_register_write
      000CDF 15 81            [12] 3322 	dec	sp
                                   3323 ;	radio/radio.c:1207: register_write(EZRADIOPRO_IO_PORT_CONFIGURATION, 0x00);	// GPIO2 output set low (fixed on ant 2)
      000CE1 E4               [12] 3324 	clr	a
      000CE2 C0 E0            [24] 3325 	push	acc
      000CE4 75 82 0E         [24] 3326 	mov	dpl,#0x0E
      000CE7 12r08r52         [24] 3327 	lcall	_register_write
      000CEA 15 81            [12] 3328 	dec	sp
                                   3329 ;	radio/radio.c:1208: break;
                                   3330 ;	radio/radio.c:1210: case DIVERSITY_DISABLED:
      000CEC 22               [24] 3331 	ret
      000CED                       3332 00103$:
                                   3333 ;	radio/radio.c:1211: case DIVERSITY_ANT1:
      000CED                       3334 00104$:
                                   3335 ;	radio/radio.c:1212: default:
      000CED                       3336 00105$:
                                   3337 ;	radio/radio.c:1214: register_write(EZRADIOPRO_OPERATING_AND_FUNCTION_CONTROL_2, (register_read(EZRADIOPRO_OPERATING_AND_FUNCTION_CONTROL_2) & ~EZRADIOPRO_ANTDIV_MASK));
      000CED 75 82 08         [24] 3338 	mov	dpl,#0x08
      000CF0 12r08r88         [24] 3339 	lcall	_register_read
      000CF3 AF 82            [24] 3340 	mov	r7,dpl
      000CF5 53 07 1F         [24] 3341 	anl	ar7,#0x1F
      000CF8 C0 07            [24] 3342 	push	ar7
      000CFA 75 82 08         [24] 3343 	mov	dpl,#0x08
      000CFD 12r08r52         [24] 3344 	lcall	_register_write
      000D00 15 81            [12] 3345 	dec	sp
                                   3346 ;	radio/radio.c:1216: register_write(EZRADIOPRO_GPIO2_CONFIGURATION, 0x0A);	// GPIO2 output set high fixed
      000D02 74 0A            [12] 3347 	mov	a,#0x0A
      000D04 C0 E0            [24] 3348 	push	acc
      000D06 75 82 0D         [24] 3349 	mov	dpl,#0x0D
      000D09 12r08r52         [24] 3350 	lcall	_register_write
      000D0C 15 81            [12] 3351 	dec	sp
                                   3352 ;	radio/radio.c:1217: register_write(EZRADIOPRO_IO_PORT_CONFIGURATION, 0x04);	// GPIO2 output set high (fixed on ant 1)
      000D0E 74 04            [12] 3353 	mov	a,#0x04
      000D10 C0 E0            [24] 3354 	push	acc
      000D12 75 82 0E         [24] 3355 	mov	dpl,#0x0E
      000D15 12r08r52         [24] 3356 	lcall	_register_write
      000D18 15 81            [12] 3357 	dec	sp
                                   3358 ;	radio/radio.c:1219: }
      000D1A 22               [24] 3359 	ret
                                   3360 ;------------------------------------------------------------
                                   3361 ;Allocation info for local variables in function 'Receiver_ISR'
                                   3362 ;------------------------------------------------------------
                                   3363 ;status                    Allocated to registers r6 
                                   3364 ;status2                   Allocated to registers r7 
                                   3365 ;len                       Allocated to registers r7 
                                   3366 ;------------------------------------------------------------
                                   3367 ;	radio/radio.c:1230: INTERRUPT(Receiver_ISR, INTERRUPT_INT0)
                                   3368 ;	-----------------------------------------
                                   3369 ;	 function Receiver_ISR
                                   3370 ;	-----------------------------------------
      000D1B                       3371 _Receiver_ISR:
      000D1B C0*00            [24] 3372 	push	bits
      000D1D C0 E0            [24] 3373 	push	acc
      000D1F C0 F0            [24] 3374 	push	b
      000D21 C0 82            [24] 3375 	push	dpl
      000D23 C0 83            [24] 3376 	push	dph
      000D25 C0 07            [24] 3377 	push	(0+7)
      000D27 C0 06            [24] 3378 	push	(0+6)
      000D29 C0 05            [24] 3379 	push	(0+5)
      000D2B C0 04            [24] 3380 	push	(0+4)
      000D2D C0 03            [24] 3381 	push	(0+3)
      000D2F C0 02            [24] 3382 	push	(0+2)
      000D31 C0 01            [24] 3383 	push	(0+1)
      000D33 C0 00            [24] 3384 	push	(0+0)
      000D35 C0 D0            [24] 3385 	push	psw
      000D37 75 D0 00         [24] 3386 	mov	psw,#0x00
                                   3387 ;	radio/radio.c:1236: status2 = register_read(EZRADIOPRO_INTERRUPT_STATUS_2);
      000D3A 75 82 04         [24] 3388 	mov	dpl,#0x04
      000D3D 12r08r88         [24] 3389 	lcall	_register_read
      000D40 AF 82            [24] 3390 	mov	r7,dpl
                                   3391 ;	radio/radio.c:1237: status  = register_read(EZRADIOPRO_INTERRUPT_STATUS_1);
      000D42 75 82 03         [24] 3392 	mov	dpl,#0x03
      000D45 C0 07            [24] 3393 	push	ar7
      000D47 12r08r88         [24] 3394 	lcall	_register_read
      000D4A AE 82            [24] 3395 	mov	r6,dpl
      000D4C D0 07            [24] 3396 	pop	ar7
                                   3397 ;	radio/radio.c:1239: if (status & EZRADIOPRO_IRXFFAFULL) {
      000D4E EE               [12] 3398 	mov	a,r6
      000D4F 30 E4 49         [24] 3399 	jnb	acc.4,00104$
                                   3400 ;	radio/radio.c:1240: if (RX_FIFO_THRESHOLD_HIGH + (uint16_t)partial_packet_length > MAX_PACKET_LENGTH) {
      000D52 78r01            [12] 3401 	mov	r0,#_partial_packet_length
      000D54 E2               [24] 3402 	movx	a,@r0
      000D55 FC               [12] 3403 	mov	r4,a
      000D56 7D 00            [12] 3404 	mov	r5,#0x00
      000D58 74 32            [12] 3405 	mov	a,#0x32
      000D5A 2C               [12] 3406 	add	a,r4
      000D5B FC               [12] 3407 	mov	r4,a
      000D5C E4               [12] 3408 	clr	a
      000D5D 3D               [12] 3409 	addc	a,r5
      000D5E FD               [12] 3410 	mov	r5,a
      000D5F C3               [12] 3411 	clr	c
      000D60 74 FC            [12] 3412 	mov	a,#0xFC
      000D62 9C               [12] 3413 	subb	a,r4
      000D63 E4               [12] 3414 	clr	a
      000D64 9D               [12] 3415 	subb	a,r5
      000D65 50 03            [24] 3416 	jnc	00150$
      000D67 02r0Er26         [24] 3417 	ljmp	00117$
      000D6A                       3418 00150$:
                                   3419 ;	radio/radio.c:1244: read_receive_fifo(RX_FIFO_THRESHOLD_HIGH, &radio_buffer[partial_packet_length]);
      000D6A 78r01            [12] 3420 	mov	r0,#_partial_packet_length
      000D6C E2               [24] 3421 	movx	a,@r0
      000D6D 24r00            [12] 3422 	add	a,#_radio_buffer
      000D6F FC               [12] 3423 	mov	r4,a
      000D70 E4               [12] 3424 	clr	a
      000D71 34s00            [12] 3425 	addc	a,#(_radio_buffer >> 8)
      000D73 FD               [12] 3426 	mov	r5,a
      000D74 C0 07            [24] 3427 	push	ar7
      000D76 C0 06            [24] 3428 	push	ar6
      000D78 C0 04            [24] 3429 	push	ar4
      000D7A C0 05            [24] 3430 	push	ar5
      000D7C 75 82 32         [24] 3431 	mov	dpl,#0x32
      000D7F 12r08rBC         [24] 3432 	lcall	_read_receive_fifo
      000D82 15 81            [12] 3433 	dec	sp
      000D84 15 81            [12] 3434 	dec	sp
                                   3435 ;	radio/radio.c:1245: partial_packet_length += RX_FIFO_THRESHOLD_HIGH;
      000D86 78r01            [12] 3436 	mov	r0,#_partial_packet_length
      000D88 E2               [24] 3437 	movx	a,@r0
      000D89 24 32            [12] 3438 	add	a,#0x32
      000D8B F2               [24] 3439 	movx	@r0,a
                                   3440 ;	radio/radio.c:1246: last_rssi = register_read(EZRADIOPRO_RECEIVED_SIGNAL_STRENGTH_INDICATOR);
      000D8C 75 82 26         [24] 3441 	mov	dpl,#0x26
      000D8F 12r08r88         [24] 3442 	lcall	_register_read
      000D92 E5 82            [12] 3443 	mov	a,dpl
      000D94 D0 06            [24] 3444 	pop	ar6
      000D96 D0 07            [24] 3445 	pop	ar7
      000D98 78r02            [12] 3446 	mov	r0,#_last_rssi
      000D9A F2               [24] 3447 	movx	@r0,a
      000D9B                       3448 00104$:
                                   3449 ;	radio/radio.c:1249: if (status2 & EZRADIOPRO_IPREAVAL) {
      000D9B EF               [12] 3450 	mov	a,r7
      000D9C 30 E6 11         [24] 3451 	jnb	acc.6,00106$
                                   3452 ;	radio/radio.c:1251: preamble_detected = true;
      000D9F D2*01            [12] 3453 	setb	_preamble_detected
                                   3454 ;	radio/radio.c:1254: last_rssi = register_read(EZRADIOPRO_RECEIVED_SIGNAL_STRENGTH_INDICATOR);
      000DA1 75 82 26         [24] 3455 	mov	dpl,#0x26
      000DA4 C0 06            [24] 3456 	push	ar6
      000DA6 12r08r88         [24] 3457 	lcall	_register_read
      000DA9 E5 82            [12] 3458 	mov	a,dpl
      000DAB D0 06            [24] 3459 	pop	ar6
      000DAD 78r02            [12] 3460 	mov	r0,#_last_rssi
      000DAF F2               [24] 3461 	movx	@r0,a
      000DB0                       3462 00106$:
                                   3463 ;	radio/radio.c:1257: if (feature_golay == false && (status & EZRADIOPRO_ICRCERROR)) {
      000DB0 20*00 04         [24] 3464 	jb	_feature_golay,00108$
      000DB3 EE               [12] 3465 	mov	a,r6
      000DB4 20 E0 6F         [24] 3466 	jb	acc.0,00117$
                                   3467 ;	radio/radio.c:1258: goto rxfail;
      000DB7                       3468 00108$:
                                   3469 ;	radio/radio.c:1261: if (status & EZRADIOPRO_IPKVALID) {
      000DB7 EE               [12] 3470 	mov	a,r6
      000DB8 30 E1 69         [24] 3471 	jnb	acc.1,00116$
                                   3472 ;	radio/radio.c:1262: __data uint8_t len = register_read(EZRADIOPRO_RECEIVED_PACKET_LENGTH);
      000DBB 75 82 4B         [24] 3473 	mov	dpl,#0x4B
      000DBE 12r08r88         [24] 3474 	lcall	_register_read
                                   3475 ;	radio/radio.c:1263: if (len > MAX_PACKET_LENGTH || partial_packet_length > len) {
      000DC1 E5 82            [12] 3476 	mov	a,dpl
      000DC3 FF               [12] 3477 	mov	r7,a
      000DC4 24 03            [12] 3478 	add	a,#0xff - 0xFC
      000DC6 40 5E            [24] 3479 	jc	00117$
      000DC8 78r01            [12] 3480 	mov	r0,#_partial_packet_length
      000DCA C3               [12] 3481 	clr	c
      000DCB E2               [24] 3482 	movx	a,@r0
      000DCC F5 F0            [12] 3483 	mov	b,a
      000DCE EF               [12] 3484 	mov	a,r7
      000DCF 95 F0            [12] 3485 	subb	a,b
      000DD1 40 53            [24] 3486 	jc	00117$
                                   3487 ;	radio/radio.c:1267: if (partial_packet_length < len) {
      000DD3 78r01            [12] 3488 	mov	r0,#_partial_packet_length
      000DD5 C3               [12] 3489 	clr	c
      000DD6 E2               [24] 3490 	movx	a,@r0
      000DD7 9F               [12] 3491 	subb	a,r7
      000DD8 50 22            [24] 3492 	jnc	00114$
                                   3493 ;	radio/radio.c:1268: read_receive_fifo(len-partial_packet_length, &radio_buffer[partial_packet_length]);
      000DDA 78r01            [12] 3494 	mov	r0,#_partial_packet_length
      000DDC E2               [24] 3495 	movx	a,@r0
      000DDD 24r00            [12] 3496 	add	a,#_radio_buffer
      000DDF FD               [12] 3497 	mov	r5,a
      000DE0 E4               [12] 3498 	clr	a
      000DE1 34s00            [12] 3499 	addc	a,#(_radio_buffer >> 8)
      000DE3 FE               [12] 3500 	mov	r6,a
      000DE4 78r01            [12] 3501 	mov	r0,#_partial_packet_length
      000DE6 D3               [12] 3502 	setb	c
      000DE7 E2               [24] 3503 	movx	a,@r0
      000DE8 9F               [12] 3504 	subb	a,r7
      000DE9 F4               [12] 3505 	cpl	a
      000DEA FC               [12] 3506 	mov	r4,a
      000DEB C0 07            [24] 3507 	push	ar7
      000DED C0 05            [24] 3508 	push	ar5
      000DEF C0 06            [24] 3509 	push	ar6
      000DF1 8C 82            [24] 3510 	mov	dpl,r4
      000DF3 12r08rBC         [24] 3511 	lcall	_read_receive_fifo
      000DF6 15 81            [12] 3512 	dec	sp
      000DF8 15 81            [12] 3513 	dec	sp
      000DFA D0 07            [24] 3514 	pop	ar7
      000DFC                       3515 00114$:
                                   3516 ;	radio/radio.c:1270: receive_packet_length = len;
      000DFC 78r00            [12] 3517 	mov	r0,#_receive_packet_length
      000DFE EF               [12] 3518 	mov	a,r7
      000DFF F2               [24] 3519 	movx	@r0,a
                                   3520 ;	radio/radio.c:1273: packet_received = true;
      000E00 D2*00            [12] 3521 	setb	_packet_received
                                   3522 ;	radio/radio.c:1276: register_write(EZRADIOPRO_INTERRUPT_ENABLE_1, 0);
      000E02 E4               [12] 3523 	clr	a
      000E03 C0 E0            [24] 3524 	push	acc
      000E05 75 82 05         [24] 3525 	mov	dpl,#0x05
      000E08 12r08r52         [24] 3526 	lcall	_register_write
      000E0B 15 81            [12] 3527 	dec	sp
                                   3528 ;	radio/radio.c:1277: register_write(EZRADIOPRO_INTERRUPT_ENABLE_2, 0);
      000E0D E4               [12] 3529 	clr	a
      000E0E C0 E0            [24] 3530 	push	acc
      000E10 75 82 06         [24] 3531 	mov	dpl,#0x06
      000E13 12r08r52         [24] 3532 	lcall	_register_write
      000E16 15 81            [12] 3533 	dec	sp
                                   3534 ;	radio/radio.c:1280: register_write(EZRADIOPRO_OPERATING_AND_FUNCTION_CONTROL_1, EZRADIOPRO_PLLON);
      000E18 74 02            [12] 3535 	mov	a,#0x02
      000E1A C0 E0            [24] 3536 	push	acc
      000E1C 75 82 07         [24] 3537 	mov	dpl,#0x07
      000E1F 12r08r52         [24] 3538 	lcall	_register_write
      000E22 15 81            [12] 3539 	dec	sp
      000E24                       3540 00116$:
                                   3541 ;	radio/radio.c:1285: return;
                                   3542 ;	radio/radio.c:1287: rxfail:
      000E24 80 1E            [24] 3543 	sjmp	00120$
      000E26                       3544 00117$:
                                   3545 ;	radio/radio.c:1288: if (errors.rx_errors != 0xFFFF) {
      000E26 78r00            [12] 3546 	mov	r0,#_errors
      000E28 E2               [24] 3547 	movx	a,@r0
      000E29 FE               [12] 3548 	mov	r6,a
      000E2A 08               [12] 3549 	inc	r0
      000E2B E2               [24] 3550 	movx	a,@r0
      000E2C FF               [12] 3551 	mov	r7,a
      000E2D BE FF 05         [24] 3552 	cjne	r6,#0xFF,00158$
      000E30 BF FF 02         [24] 3553 	cjne	r7,#0xFF,00158$
      000E33 80 0C            [24] 3554 	sjmp	00119$
      000E35                       3555 00158$:
                                   3556 ;	radio/radio.c:1289: errors.rx_errors++;
      000E35 0E               [12] 3557 	inc	r6
      000E36 BE 00 01         [24] 3558 	cjne	r6,#0x00,00159$
      000E39 0F               [12] 3559 	inc	r7
      000E3A                       3560 00159$:
      000E3A 78r00            [12] 3561 	mov	r0,#_errors
      000E3C EE               [12] 3562 	mov	a,r6
      000E3D F2               [24] 3563 	movx	@r0,a
      000E3E 08               [12] 3564 	inc	r0
      000E3F EF               [12] 3565 	mov	a,r7
      000E40 F2               [24] 3566 	movx	@r0,a
      000E41                       3567 00119$:
                                   3568 ;	radio/radio.c:1291: radio_receiver_on();
      000E41 12r03r9A         [24] 3569 	lcall	_radio_receiver_on
      000E44                       3570 00120$:
      000E44 D0 D0            [24] 3571 	pop	psw
      000E46 D0 00            [24] 3572 	pop	(0+0)
      000E48 D0 01            [24] 3573 	pop	(0+1)
      000E4A D0 02            [24] 3574 	pop	(0+2)
      000E4C D0 03            [24] 3575 	pop	(0+3)
      000E4E D0 04            [24] 3576 	pop	(0+4)
      000E50 D0 05            [24] 3577 	pop	(0+5)
      000E52 D0 06            [24] 3578 	pop	(0+6)
      000E54 D0 07            [24] 3579 	pop	(0+7)
      000E56 D0 83            [24] 3580 	pop	dph
      000E58 D0 82            [24] 3581 	pop	dpl
      000E5A D0 F0            [24] 3582 	pop	b
      000E5C D0 E0            [24] 3583 	pop	acc
      000E5E D0*00            [24] 3584 	pop	bits
      000E60 32               [24] 3585 	reti
                                   3586 	.area CSEG    (CODE)
                                   3587 	.area CONST   (CODE)
      000000                       3588 ___str_0:
      000000 6F 76 65 72 73 69 7A  3589 	.ascii "oversized packet"
             65 64 20 70 61 63 6B
             65 74
      000010 00                    3590 	.db 0x00
      000011                       3591 _reg_index:
      000011 1C                    3592 	.db #0x1C	; 28
      000012 1F                    3593 	.db #0x1F	; 31
      000013 20                    3594 	.db #0x20	; 32
      000014 21                    3595 	.db #0x21	; 33
      000015 22                    3596 	.db #0x22	; 34
      000016 23                    3597 	.db #0x23	; 35
      000017 24                    3598 	.db #0x24	; 36
      000018 25                    3599 	.db #0x25	; 37
      000019 2A                    3600 	.db #0x2A	; 42
      00001A 6E                    3601 	.db #0x6E	; 110	'n'
      00001B 6F                    3602 	.db #0x6F	; 111	'o'
      00001C 72                    3603 	.db #0x72	; 114	'r'
      00001D                       3604 _air_data_rates:
      00001D 02                    3605 	.db #0x02	; 2
      00001E 04                    3606 	.db #0x04	; 4
      00001F 08                    3607 	.db #0x08	; 8
      000020 10                    3608 	.db #0x10	; 16
      000021 13                    3609 	.db #0x13	; 19
      000022 18                    3610 	.db #0x18	; 24
      000023 20                    3611 	.db #0x20	; 32
      000024 30                    3612 	.db #0x30	; 48	'0'
      000025 40                    3613 	.db #0x40	; 64
      000026 60                    3614 	.db #0x60	; 96
      000027 80                    3615 	.db #0x80	; 128
      000028 C0                    3616 	.db #0xC0	; 192
      000029 FA                    3617 	.db #0xFA	; 250
      00002A                       3618 _reg_table_433:
      00002A 27                    3619 	.db #0x27	; 39
      00002B 27                    3620 	.db #0x27	; 39
      00002C 27                    3621 	.db #0x27	; 39
      00002D 2E                    3622 	.db #0x2E	; 46
      00002E 16                    3623 	.db #0x16	; 22
      00002F 01                    3624 	.db #0x01	; 1
      000030 05                    3625 	.db #0x05	; 5
      000031 0B                    3626 	.db #0x0B	; 11
      000032 9A                    3627 	.db #0x9A	; 154
      000033 88                    3628 	.db #0x88	; 136
      000034 8A                    3629 	.db #0x8A	; 138
      000035 8C                    3630 	.db #0x8C	; 140
      000036 8D                    3631 	.db #0x8D	; 141
      000037 03                    3632 	.db #0x03	; 3
      000038 03                    3633 	.db #0x03	; 3
      000039 03                    3634 	.db #0x03	; 3
      00003A 03                    3635 	.db #0x03	; 3
      00003B 03                    3636 	.db #0x03	; 3
      00003C 03                    3637 	.db #0x03	; 3
      00003D 03                    3638 	.db #0x03	; 3
      00003E 03                    3639 	.db #0x03	; 3
      00003F 03                    3640 	.db #0x03	; 3
      000040 03                    3641 	.db #0x03	; 3
      000041 03                    3642 	.db #0x03	; 3
      000042 03                    3643 	.db #0x03	; 3
      000043 03                    3644 	.db #0x03	; 3
      000044 F4                    3645 	.db #0xF4	; 244
      000045 FA                    3646 	.db #0xFA	; 250
      000046 7D                    3647 	.db #0x7D	; 125
      000047 3F                    3648 	.db #0x3F	; 63
      000048 69                    3649 	.db #0x69	; 105	'i'
      000049 A7                    3650 	.db #0xA7	; 167
      00004A 7D                    3651 	.db #0x7D	; 125
      00004B 53                    3652 	.db #0x53	; 83	'S'
      00004C 5E                    3653 	.db #0x5E	; 94
      00004D 7D                    3654 	.db #0x7D	; 125
      00004E 5E                    3655 	.db #0x5E	; 94
      00004F 3F                    3656 	.db #0x3F	; 63
      000050 30                    3657 	.db #0x30	; 48	'0'
      000051 20                    3658 	.db #0x20	; 32
      000052 00                    3659 	.db #0x00	; 0
      000053 01                    3660 	.db #0x01	; 1
      000054 02                    3661 	.db #0x02	; 2
      000055 01                    3662 	.db #0x01	; 1
      000056 00                    3663 	.db #0x00	; 0
      000057 01                    3664 	.db #0x01	; 1
      000058 01                    3665 	.db #0x01	; 1
      000059 01                    3666 	.db #0x01	; 1
      00005A 01                    3667 	.db #0x01	; 1
      00005B 01                    3668 	.db #0x01	; 1
      00005C 02                    3669 	.db #0x02	; 2
      00005D 02                    3670 	.db #0x02	; 2
      00005E 41                    3671 	.db #0x41	; 65	'A'
      00005F 83                    3672 	.db #0x83	; 131
      000060 06                    3673 	.db #0x06	; 6
      000061 0C                    3674 	.db #0x0C	; 12
      000062 37                    3675 	.db #0x37	; 55	'7'
      000063 C4                    3676 	.db #0xC4	; 196
      000064 06                    3677 	.db #0x06	; 6
      000065 89                    3678 	.db #0x89	; 137
      000066 5D                    3679 	.db #0x5D	; 93
      000067 06                    3680 	.db #0x06	; 6
      000068 5D                    3681 	.db #0x5D	; 93
      000069 0C                    3682 	.db #0x0C	; 12
      00006A AA                    3683 	.db #0xAA	; 170
      00006B 89                    3684 	.db #0x89	; 137
      00006C 12                    3685 	.db #0x12	; 18
      00006D 25                    3686 	.db #0x25	; 37
      00006E 4A                    3687 	.db #0x4A	; 74	'J'
      00006F 4C                    3688 	.db #0x4C	; 76	'L'
      000070 9C                    3689 	.db #0x9C	; 156
      000071 25                    3690 	.db #0x25	; 37
      000072 37                    3691 	.db #0x37	; 55	'7'
      000073 86                    3692 	.db #0x86	; 134
      000074 25                    3693 	.db #0x25	; 37
      000075 86                    3694 	.db #0x86	; 134
      000076 4A                    3695 	.db #0x4A	; 74	'J'
      000077 AB                    3696 	.db #0xAB	; 171
      000078 00                    3697 	.db #0x00	; 0
      000079 01                    3698 	.db #0x01	; 1
      00007A 02                    3699 	.db #0x02	; 2
      00007B 04                    3700 	.db #0x04	; 4
      00007C 02                    3701 	.db #0x02	; 2
      00007D 01                    3702 	.db #0x01	; 1
      00007E 02                    3703 	.db #0x02	; 2
      00007F 03                    3704 	.db #0x03	; 3
      000080 02                    3705 	.db #0x02	; 2
      000081 02                    3706 	.db #0x02	; 2
      000082 02                    3707 	.db #0x02	; 2
      000083 04                    3708 	.db #0x04	; 4
      000084 07                    3709 	.db #0x07	; 7
      000085 85                    3710 	.db #0x85	; 133
      000086 08                    3711 	.db #0x08	; 8
      000087 0E                    3712 	.db #0x0E	; 14
      000088 12                    3713 	.db #0x12	; 18
      000089 72                    3714 	.db #0x72	; 114	'r'
      00008A 8A                    3715 	.db #0x8A	; 138
      00008B 0E                    3716 	.db #0x0E	; 14
      00008C 18                    3717 	.db #0x18	; 24
      00008D BB                    3718 	.db #0xBB	; 187
      00008E 0E                    3719 	.db #0x0E	; 14
      00008F BB                    3720 	.db #0xBB	; 187
      000090 EA                    3721 	.db #0xEA	; 234
      000091 FF                    3722 	.db #0xFF	; 255
      000092 1D                    3723 	.db #0x1D	; 29
      000093 1D                    3724 	.db #0x1D	; 29
      000094 1D                    3725 	.db #0x1D	; 29
      000095 1E                    3726 	.db #0x1E	; 30
      000096 1E                    3727 	.db #0x1E	; 30
      000097 1E                    3728 	.db #0x1E	; 30
      000098 20                    3729 	.db #0x20	; 32
      000099 30                    3730 	.db #0x30	; 48	'0'
      00009A 41                    3731 	.db #0x41	; 65	'A'
      00009B 50                    3732 	.db #0x50	; 80	'P'
      00009C 50                    3733 	.db #0x50	; 80	'P'
      00009D 50                    3734 	.db #0x50	; 80	'P'
      00009E 50                    3735 	.db #0x50	; 80	'P'
      00009F 10                    3736 	.db #0x10	; 16
      0000A0 20                    3737 	.db #0x20	; 32
      0000A1 41                    3738 	.db #0x41	; 65	'A'
      0000A2 83                    3739 	.db #0x83	; 131
      0000A3 9B                    3740 	.db #0x9B	; 155
      0000A4 C4                    3741 	.db #0xC4	; 196
      0000A5 08                    3742 	.db #0x08	; 8
      0000A6 0C                    3743 	.db #0x0C	; 12
      0000A7 10                    3744 	.db #0x10	; 16
      0000A8 18                    3745 	.db #0x18	; 24
      0000A9 20                    3746 	.db #0x20	; 32
      0000AA 31                    3747 	.db #0x31	; 49	'1'
      0000AB 40                    3748 	.db #0x40	; 64
      0000AC 62                    3749 	.db #0x62	; 98	'b'
      0000AD C5                    3750 	.db #0xC5	; 197
      0000AE 89                    3751 	.db #0x89	; 137
      0000AF 12                    3752 	.db #0x12	; 18
      0000B0 A6                    3753 	.db #0xA6	; 166
      0000B1 9C                    3754 	.db #0x9C	; 156
      0000B2 31                    3755 	.db #0x31	; 49	'1'
      0000B3 4A                    3756 	.db #0x4A	; 74	'J'
      0000B4 62                    3757 	.db #0x62	; 98	'b'
      0000B5 93                    3758 	.db #0x93	; 147
      0000B6 C5                    3759 	.db #0xC5	; 197
      0000B7 27                    3760 	.db #0x27	; 39
      0000B8 00                    3761 	.db #0x00	; 0
      0000B9 03                    3762 	.db #0x03	; 3
      0000BA 06                    3763 	.db #0x06	; 6
      0000BB 0D                    3764 	.db #0x0D	; 13
      0000BC 1A                    3765 	.db #0x1A	; 26
      0000BD 1E                    3766 	.db #0x1E	; 30
      0000BE 26                    3767 	.db #0x26	; 38
      0000BF 33                    3768 	.db #0x33	; 51	'3'
      0000C0 4D                    3769 	.db #0x4D	; 77	'M'
      0000C1 66                    3770 	.db #0x66	; 102	'f'
      0000C2 9A                    3771 	.db #0x9A	; 154
      0000C3 CD                    3772 	.db #0xCD	; 205
      0000C4 FE                    3773 	.db #0xFE	; 254
      0000C5 FE                    3774 	.db #0xFE	; 254
      0000C6                       3775 _reg_table_470:
      0000C6 2B                    3776 	.db #0x2B	; 43
      0000C7 2B                    3777 	.db #0x2B	; 43
      0000C8 2B                    3778 	.db #0x2B	; 43
      0000C9 2E                    3779 	.db #0x2E	; 46
      0000CA 16                    3780 	.db #0x16	; 22
      0000CB 01                    3781 	.db #0x01	; 1
      0000CC 05                    3782 	.db #0x05	; 5
      0000CD 0B                    3783 	.db #0x0B	; 11
      0000CE 9A                    3784 	.db #0x9A	; 154
      0000CF 88                    3785 	.db #0x88	; 136
      0000D0 8A                    3786 	.db #0x8A	; 138
      0000D1 8C                    3787 	.db #0x8C	; 140
      0000D2 8D                    3788 	.db #0x8D	; 141
      0000D3 03                    3789 	.db #0x03	; 3
      0000D4 03                    3790 	.db #0x03	; 3
      0000D5 03                    3791 	.db #0x03	; 3
      0000D6 03                    3792 	.db #0x03	; 3
      0000D7 03                    3793 	.db #0x03	; 3
      0000D8 03                    3794 	.db #0x03	; 3
      0000D9 03                    3795 	.db #0x03	; 3
      0000DA 03                    3796 	.db #0x03	; 3
      0000DB 03                    3797 	.db #0x03	; 3
      0000DC 03                    3798 	.db #0x03	; 3
      0000DD 03                    3799 	.db #0x03	; 3
      0000DE 03                    3800 	.db #0x03	; 3
      0000DF 03                    3801 	.db #0x03	; 3
      0000E0 F4                    3802 	.db #0xF4	; 244
      0000E1 FA                    3803 	.db #0xFA	; 250
      0000E2 7D                    3804 	.db #0x7D	; 125
      0000E3 3F                    3805 	.db #0x3F	; 63
      0000E4 69                    3806 	.db #0x69	; 105	'i'
      0000E5 A7                    3807 	.db #0xA7	; 167
      0000E6 7D                    3808 	.db #0x7D	; 125
      0000E7 53                    3809 	.db #0x53	; 83	'S'
      0000E8 5E                    3810 	.db #0x5E	; 94
      0000E9 7D                    3811 	.db #0x7D	; 125
      0000EA 5E                    3812 	.db #0x5E	; 94
      0000EB 3F                    3813 	.db #0x3F	; 63
      0000EC 30                    3814 	.db #0x30	; 48	'0'
      0000ED 20                    3815 	.db #0x20	; 32
      0000EE 00                    3816 	.db #0x00	; 0
      0000EF 01                    3817 	.db #0x01	; 1
      0000F0 02                    3818 	.db #0x02	; 2
      0000F1 01                    3819 	.db #0x01	; 1
      0000F2 00                    3820 	.db #0x00	; 0
      0000F3 01                    3821 	.db #0x01	; 1
      0000F4 01                    3822 	.db #0x01	; 1
      0000F5 01                    3823 	.db #0x01	; 1
      0000F6 01                    3824 	.db #0x01	; 1
      0000F7 01                    3825 	.db #0x01	; 1
      0000F8 02                    3826 	.db #0x02	; 2
      0000F9 02                    3827 	.db #0x02	; 2
      0000FA 41                    3828 	.db #0x41	; 65	'A'
      0000FB 83                    3829 	.db #0x83	; 131
      0000FC 06                    3830 	.db #0x06	; 6
      0000FD 0C                    3831 	.db #0x0C	; 12
      0000FE 37                    3832 	.db #0x37	; 55	'7'
      0000FF C4                    3833 	.db #0xC4	; 196
      000100 06                    3834 	.db #0x06	; 6
      000101 89                    3835 	.db #0x89	; 137
      000102 5D                    3836 	.db #0x5D	; 93
      000103 06                    3837 	.db #0x06	; 6
      000104 5D                    3838 	.db #0x5D	; 93
      000105 0C                    3839 	.db #0x0C	; 12
      000106 AA                    3840 	.db #0xAA	; 170
      000107 89                    3841 	.db #0x89	; 137
      000108 12                    3842 	.db #0x12	; 18
      000109 25                    3843 	.db #0x25	; 37
      00010A 4A                    3844 	.db #0x4A	; 74	'J'
      00010B 4C                    3845 	.db #0x4C	; 76	'L'
      00010C 9C                    3846 	.db #0x9C	; 156
      00010D 25                    3847 	.db #0x25	; 37
      00010E 37                    3848 	.db #0x37	; 55	'7'
      00010F 86                    3849 	.db #0x86	; 134
      000110 25                    3850 	.db #0x25	; 37
      000111 86                    3851 	.db #0x86	; 134
      000112 4A                    3852 	.db #0x4A	; 74	'J'
      000113 AB                    3853 	.db #0xAB	; 171
      000114 00                    3854 	.db #0x00	; 0
      000115 01                    3855 	.db #0x01	; 1
      000116 02                    3856 	.db #0x02	; 2
      000117 04                    3857 	.db #0x04	; 4
      000118 02                    3858 	.db #0x02	; 2
      000119 01                    3859 	.db #0x01	; 1
      00011A 02                    3860 	.db #0x02	; 2
      00011B 03                    3861 	.db #0x03	; 3
      00011C 02                    3862 	.db #0x02	; 2
      00011D 02                    3863 	.db #0x02	; 2
      00011E 02                    3864 	.db #0x02	; 2
      00011F 04                    3865 	.db #0x04	; 4
      000120 07                    3866 	.db #0x07	; 7
      000121 85                    3867 	.db #0x85	; 133
      000122 08                    3868 	.db #0x08	; 8
      000123 0E                    3869 	.db #0x0E	; 14
      000124 12                    3870 	.db #0x12	; 18
      000125 72                    3871 	.db #0x72	; 114	'r'
      000126 8A                    3872 	.db #0x8A	; 138
      000127 0E                    3873 	.db #0x0E	; 14
      000128 18                    3874 	.db #0x18	; 24
      000129 BB                    3875 	.db #0xBB	; 187
      00012A 0E                    3876 	.db #0x0E	; 14
      00012B BB                    3877 	.db #0xBB	; 187
      00012C EA                    3878 	.db #0xEA	; 234
      00012D FF                    3879 	.db #0xFF	; 255
      00012E 1E                    3880 	.db #0x1E	; 30
      00012F 1E                    3881 	.db #0x1E	; 30
      000130 1E                    3882 	.db #0x1E	; 30
      000131 21                    3883 	.db #0x21	; 33
      000132 21                    3884 	.db #0x21	; 33
      000133 21                    3885 	.db #0x21	; 33
      000134 21                    3886 	.db #0x21	; 33
      000135 30                    3887 	.db #0x30	; 48	'0'
      000136 41                    3888 	.db #0x41	; 65	'A'
      000137 50                    3889 	.db #0x50	; 80	'P'
      000138 50                    3890 	.db #0x50	; 80	'P'
      000139 50                    3891 	.db #0x50	; 80	'P'
      00013A 50                    3892 	.db #0x50	; 80	'P'
      00013B 10                    3893 	.db #0x10	; 16
      00013C 20                    3894 	.db #0x20	; 32
      00013D 41                    3895 	.db #0x41	; 65	'A'
      00013E 83                    3896 	.db #0x83	; 131
      00013F 9B                    3897 	.db #0x9B	; 155
      000140 C4                    3898 	.db #0xC4	; 196
      000141 08                    3899 	.db #0x08	; 8
      000142 0C                    3900 	.db #0x0C	; 12
      000143 10                    3901 	.db #0x10	; 16
      000144 18                    3902 	.db #0x18	; 24
      000145 20                    3903 	.db #0x20	; 32
      000146 31                    3904 	.db #0x31	; 49	'1'
      000147 40                    3905 	.db #0x40	; 64
      000148 62                    3906 	.db #0x62	; 98	'b'
      000149 C5                    3907 	.db #0xC5	; 197
      00014A 89                    3908 	.db #0x89	; 137
      00014B 12                    3909 	.db #0x12	; 18
      00014C A6                    3910 	.db #0xA6	; 166
      00014D 9C                    3911 	.db #0x9C	; 156
      00014E 31                    3912 	.db #0x31	; 49	'1'
      00014F 4A                    3913 	.db #0x4A	; 74	'J'
      000150 62                    3914 	.db #0x62	; 98	'b'
      000151 93                    3915 	.db #0x93	; 147
      000152 C5                    3916 	.db #0xC5	; 197
      000153 27                    3917 	.db #0x27	; 39
      000154 00                    3918 	.db #0x00	; 0
      000155 03                    3919 	.db #0x03	; 3
      000156 06                    3920 	.db #0x06	; 6
      000157 0D                    3921 	.db #0x0D	; 13
      000158 1A                    3922 	.db #0x1A	; 26
      000159 1E                    3923 	.db #0x1E	; 30
      00015A 26                    3924 	.db #0x26	; 38
      00015B 33                    3925 	.db #0x33	; 51	'3'
      00015C 4D                    3926 	.db #0x4D	; 77	'M'
      00015D 66                    3927 	.db #0x66	; 102	'f'
      00015E 9A                    3928 	.db #0x9A	; 154
      00015F CD                    3929 	.db #0xCD	; 205
      000160 FE                    3930 	.db #0xFE	; 254
      000161 FE                    3931 	.db #0xFE	; 254
      000162                       3932 _reg_table_868:
      000162 01                    3933 	.db #0x01	; 1
      000163 01                    3934 	.db #0x01	; 1
      000164 01                    3935 	.db #0x01	; 1
      000165 01                    3936 	.db #0x01	; 1
      000166 01                    3937 	.db #0x01	; 1
      000167 01                    3938 	.db #0x01	; 1
      000168 05                    3939 	.db #0x05	; 5
      000169 0B                    3940 	.db #0x0B	; 11
      00016A 9A                    3941 	.db #0x9A	; 154
      00016B 88                    3942 	.db #0x88	; 136
      00016C 8A                    3943 	.db #0x8A	; 138
      00016D 8C                    3944 	.db #0x8C	; 140
      00016E 8D                    3945 	.db #0x8D	; 141
      00016F 03                    3946 	.db #0x03	; 3
      000170 03                    3947 	.db #0x03	; 3
      000171 03                    3948 	.db #0x03	; 3
      000172 03                    3949 	.db #0x03	; 3
      000173 03                    3950 	.db #0x03	; 3
      000174 03                    3951 	.db #0x03	; 3
      000175 03                    3952 	.db #0x03	; 3
      000176 03                    3953 	.db #0x03	; 3
      000177 03                    3954 	.db #0x03	; 3
      000178 03                    3955 	.db #0x03	; 3
      000179 03                    3956 	.db #0x03	; 3
      00017A 03                    3957 	.db #0x03	; 3
      00017B 03                    3958 	.db #0x03	; 3
      00017C D0                    3959 	.db #0xD0	; 208
      00017D E8                    3960 	.db #0xE8	; 232
      00017E F4                    3961 	.db #0xF4	; 244
      00017F FA                    3962 	.db #0xFA	; 250
      000180 D3                    3963 	.db #0xD3	; 211
      000181 A7                    3964 	.db #0xA7	; 167
      000182 7D                    3965 	.db #0x7D	; 125
      000183 53                    3966 	.db #0x53	; 83	'S'
      000184 5E                    3967 	.db #0x5E	; 94
      000185 7D                    3968 	.db #0x7D	; 125
      000186 5E                    3969 	.db #0x5E	; 94
      000187 3F                    3970 	.db #0x3F	; 63
      000188 30                    3971 	.db #0x30	; 48	'0'
      000189 E0                    3972 	.db #0xE0	; 224
      00018A 60                    3973 	.db #0x60	; 96
      00018B 20                    3974 	.db #0x20	; 32
      00018C 00                    3975 	.db #0x00	; 0
      00018D 00                    3976 	.db #0x00	; 0
      00018E 00                    3977 	.db #0x00	; 0
      00018F 01                    3978 	.db #0x01	; 1
      000190 01                    3979 	.db #0x01	; 1
      000191 01                    3980 	.db #0x01	; 1
      000192 01                    3981 	.db #0x01	; 1
      000193 01                    3982 	.db #0x01	; 1
      000194 02                    3983 	.db #0x02	; 2
      000195 02                    3984 	.db #0x02	; 2
      000196 10                    3985 	.db #0x10	; 16
      000197 20                    3986 	.db #0x20	; 32
      000198 41                    3987 	.db #0x41	; 65	'A'
      000199 83                    3988 	.db #0x83	; 131
      00019A 9B                    3989 	.db #0x9B	; 155
      00019B C4                    3990 	.db #0xC4	; 196
      00019C 06                    3991 	.db #0x06	; 6
      00019D 89                    3992 	.db #0x89	; 137
      00019E 5D                    3993 	.db #0x5D	; 93
      00019F 06                    3994 	.db #0x06	; 6
      0001A0 5D                    3995 	.db #0x5D	; 93
      0001A1 0C                    3996 	.db #0x0C	; 12
      0001A2 AA                    3997 	.db #0xAA	; 170
      0001A3 62                    3998 	.db #0x62	; 98	'b'
      0001A4 C5                    3999 	.db #0xC5	; 197
      0001A5 89                    4000 	.db #0x89	; 137
      0001A6 12                    4001 	.db #0x12	; 18
      0001A7 A6                    4002 	.db #0xA6	; 166
      0001A8 9C                    4003 	.db #0x9C	; 156
      0001A9 25                    4004 	.db #0x25	; 37
      0001AA 37                    4005 	.db #0x37	; 55	'7'
      0001AB 86                    4006 	.db #0x86	; 134
      0001AC 25                    4007 	.db #0x25	; 37
      0001AD 86                    4008 	.db #0x86	; 134
      0001AE 4A                    4009 	.db #0x4A	; 74	'J'
      0001AF AB                    4010 	.db #0xAB	; 171
      0001B0 00                    4011 	.db #0x00	; 0
      0001B1 00                    4012 	.db #0x00	; 0
      0001B2 00                    4013 	.db #0x00	; 0
      0001B3 01                    4014 	.db #0x01	; 1
      0001B4 01                    4015 	.db #0x01	; 1
      0001B5 01                    4016 	.db #0x01	; 1
      0001B6 02                    4017 	.db #0x02	; 2
      0001B7 03                    4018 	.db #0x03	; 3
      0001B8 02                    4019 	.db #0x02	; 2
      0001B9 02                    4020 	.db #0x02	; 2
      0001BA 02                    4021 	.db #0x02	; 2
      0001BB 04                    4022 	.db #0x04	; 4
      0001BC 07                    4023 	.db #0x07	; 7
      0001BD 23                    4024 	.db #0x23	; 35
      0001BE 44                    4025 	.db #0x44	; 68	'D'
      0001BF 85                    4026 	.db #0x85	; 133
      0001C0 08                    4027 	.db #0x08	; 8
      0001C1 39                    4028 	.db #0x39	; 57	'9'
      0001C2 8A                    4029 	.db #0x8A	; 138
      0001C3 0E                    4030 	.db #0x0E	; 14
      0001C4 18                    4031 	.db #0x18	; 24
      0001C5 BB                    4032 	.db #0xBB	; 187
      0001C6 0E                    4033 	.db #0x0E	; 14
      0001C7 BB                    4034 	.db #0xBB	; 187
      0001C8 EA                    4035 	.db #0xEA	; 234
      0001C9 FF                    4036 	.db #0xFF	; 255
      0001CA 1C                    4037 	.db #0x1C	; 28
      0001CB 1C                    4038 	.db #0x1C	; 28
      0001CC 1C                    4039 	.db #0x1C	; 28
      0001CD 1C                    4040 	.db #0x1C	; 28
      0001CE 1C                    4041 	.db #0x1C	; 28
      0001CF 1E                    4042 	.db #0x1E	; 30
      0001D0 20                    4043 	.db #0x20	; 32
      0001D1 30                    4044 	.db #0x30	; 48	'0'
      0001D2 41                    4045 	.db #0x41	; 65	'A'
      0001D3 50                    4046 	.db #0x50	; 80	'P'
      0001D4 50                    4047 	.db #0x50	; 80	'P'
      0001D5 50                    4048 	.db #0x50	; 80	'P'
      0001D6 50                    4049 	.db #0x50	; 80	'P'
      0001D7 10                    4050 	.db #0x10	; 16
      0001D8 20                    4051 	.db #0x20	; 32
      0001D9 41                    4052 	.db #0x41	; 65	'A'
      0001DA 83                    4053 	.db #0x83	; 131
      0001DB 9B                    4054 	.db #0x9B	; 155
      0001DC C4                    4055 	.db #0xC4	; 196
      0001DD 08                    4056 	.db #0x08	; 8
      0001DE 0C                    4057 	.db #0x0C	; 12
      0001DF 10                    4058 	.db #0x10	; 16
      0001E0 18                    4059 	.db #0x18	; 24
      0001E1 20                    4060 	.db #0x20	; 32
      0001E2 31                    4061 	.db #0x31	; 49	'1'
      0001E3 40                    4062 	.db #0x40	; 64
      0001E4 62                    4063 	.db #0x62	; 98	'b'
      0001E5 C5                    4064 	.db #0xC5	; 197
      0001E6 89                    4065 	.db #0x89	; 137
      0001E7 12                    4066 	.db #0x12	; 18
      0001E8 A6                    4067 	.db #0xA6	; 166
      0001E9 9C                    4068 	.db #0x9C	; 156
      0001EA 31                    4069 	.db #0x31	; 49	'1'
      0001EB 4A                    4070 	.db #0x4A	; 74	'J'
      0001EC 62                    4071 	.db #0x62	; 98	'b'
      0001ED 93                    4072 	.db #0x93	; 147
      0001EE C5                    4073 	.db #0xC5	; 197
      0001EF 27                    4074 	.db #0x27	; 39
      0001F0 00                    4075 	.db #0x00	; 0
      0001F1 03                    4076 	.db #0x03	; 3
      0001F2 06                    4077 	.db #0x06	; 6
      0001F3 0D                    4078 	.db #0x0D	; 13
      0001F4 1A                    4079 	.db #0x1A	; 26
      0001F5 1E                    4080 	.db #0x1E	; 30
      0001F6 26                    4081 	.db #0x26	; 38
      0001F7 33                    4082 	.db #0x33	; 51	'3'
      0001F8 4D                    4083 	.db #0x4D	; 77	'M'
      0001F9 66                    4084 	.db #0x66	; 102	'f'
      0001FA 9A                    4085 	.db #0x9A	; 154
      0001FB CD                    4086 	.db #0xCD	; 205
      0001FC FE                    4087 	.db #0xFE	; 254
      0001FD FE                    4088 	.db #0xFE	; 254
      0001FE                       4089 _reg_table_915:
      0001FE 01                    4090 	.db #0x01	; 1
      0001FF 01                    4091 	.db #0x01	; 1
      000200 01                    4092 	.db #0x01	; 1
      000201 01                    4093 	.db #0x01	; 1
      000202 01                    4094 	.db #0x01	; 1
      000203 01                    4095 	.db #0x01	; 1
      000204 05                    4096 	.db #0x05	; 5
      000205 0B                    4097 	.db #0x0B	; 11
      000206 9A                    4098 	.db #0x9A	; 154
      000207 88                    4099 	.db #0x88	; 136
      000208 8A                    4100 	.db #0x8A	; 138
      000209 8C                    4101 	.db #0x8C	; 140
      00020A 8D                    4102 	.db #0x8D	; 141
      00020B 03                    4103 	.db #0x03	; 3
      00020C 03                    4104 	.db #0x03	; 3
      00020D 03                    4105 	.db #0x03	; 3
      00020E 03                    4106 	.db #0x03	; 3
      00020F 03                    4107 	.db #0x03	; 3
      000210 03                    4108 	.db #0x03	; 3
      000211 03                    4109 	.db #0x03	; 3
      000212 03                    4110 	.db #0x03	; 3
      000213 03                    4111 	.db #0x03	; 3
      000214 03                    4112 	.db #0x03	; 3
      000215 03                    4113 	.db #0x03	; 3
      000216 03                    4114 	.db #0x03	; 3
      000217 03                    4115 	.db #0x03	; 3
      000218 D0                    4116 	.db #0xD0	; 208
      000219 E8                    4117 	.db #0xE8	; 232
      00021A F4                    4118 	.db #0xF4	; 244
      00021B FA                    4119 	.db #0xFA	; 250
      00021C D3                    4120 	.db #0xD3	; 211
      00021D A7                    4121 	.db #0xA7	; 167
      00021E 7D                    4122 	.db #0x7D	; 125
      00021F 53                    4123 	.db #0x53	; 83	'S'
      000220 5E                    4124 	.db #0x5E	; 94
      000221 7D                    4125 	.db #0x7D	; 125
      000222 5E                    4126 	.db #0x5E	; 94
      000223 3F                    4127 	.db #0x3F	; 63
      000224 30                    4128 	.db #0x30	; 48	'0'
      000225 E0                    4129 	.db #0xE0	; 224
      000226 60                    4130 	.db #0x60	; 96
      000227 20                    4131 	.db #0x20	; 32
      000228 00                    4132 	.db #0x00	; 0
      000229 00                    4133 	.db #0x00	; 0
      00022A 00                    4134 	.db #0x00	; 0
      00022B 01                    4135 	.db #0x01	; 1
      00022C 01                    4136 	.db #0x01	; 1
      00022D 01                    4137 	.db #0x01	; 1
      00022E 01                    4138 	.db #0x01	; 1
      00022F 01                    4139 	.db #0x01	; 1
      000230 02                    4140 	.db #0x02	; 2
      000231 02                    4141 	.db #0x02	; 2
      000232 10                    4142 	.db #0x10	; 16
      000233 20                    4143 	.db #0x20	; 32
      000234 41                    4144 	.db #0x41	; 65	'A'
      000235 83                    4145 	.db #0x83	; 131
      000236 9B                    4146 	.db #0x9B	; 155
      000237 C4                    4147 	.db #0xC4	; 196
      000238 06                    4148 	.db #0x06	; 6
      000239 89                    4149 	.db #0x89	; 137
      00023A 5D                    4150 	.db #0x5D	; 93
      00023B 06                    4151 	.db #0x06	; 6
      00023C 5D                    4152 	.db #0x5D	; 93
      00023D 0C                    4153 	.db #0x0C	; 12
      00023E AA                    4154 	.db #0xAA	; 170
      00023F 62                    4155 	.db #0x62	; 98	'b'
      000240 C5                    4156 	.db #0xC5	; 197
      000241 89                    4157 	.db #0x89	; 137
      000242 12                    4158 	.db #0x12	; 18
      000243 A6                    4159 	.db #0xA6	; 166
      000244 9C                    4160 	.db #0x9C	; 156
      000245 25                    4161 	.db #0x25	; 37
      000246 37                    4162 	.db #0x37	; 55	'7'
      000247 86                    4163 	.db #0x86	; 134
      000248 25                    4164 	.db #0x25	; 37
      000249 86                    4165 	.db #0x86	; 134
      00024A 4A                    4166 	.db #0x4A	; 74	'J'
      00024B AB                    4167 	.db #0xAB	; 171
      00024C 00                    4168 	.db #0x00	; 0
      00024D 00                    4169 	.db #0x00	; 0
      00024E 00                    4170 	.db #0x00	; 0
      00024F 01                    4171 	.db #0x01	; 1
      000250 01                    4172 	.db #0x01	; 1
      000251 01                    4173 	.db #0x01	; 1
      000252 02                    4174 	.db #0x02	; 2
      000253 03                    4175 	.db #0x03	; 3
      000254 02                    4176 	.db #0x02	; 2
      000255 02                    4177 	.db #0x02	; 2
      000256 02                    4178 	.db #0x02	; 2
      000257 04                    4179 	.db #0x04	; 4
      000258 07                    4180 	.db #0x07	; 7
      000259 23                    4181 	.db #0x23	; 35
      00025A 44                    4182 	.db #0x44	; 68	'D'
      00025B 85                    4183 	.db #0x85	; 133
      00025C 08                    4184 	.db #0x08	; 8
      00025D 39                    4185 	.db #0x39	; 57	'9'
      00025E 8A                    4186 	.db #0x8A	; 138
      00025F 0E                    4187 	.db #0x0E	; 14
      000260 18                    4188 	.db #0x18	; 24
      000261 BB                    4189 	.db #0xBB	; 187
      000262 0E                    4190 	.db #0x0E	; 14
      000263 BB                    4191 	.db #0xBB	; 187
      000264 EA                    4192 	.db #0xEA	; 234
      000265 FF                    4193 	.db #0xFF	; 255
      000266 1E                    4194 	.db #0x1E	; 30
      000267 1E                    4195 	.db #0x1E	; 30
      000268 1E                    4196 	.db #0x1E	; 30
      000269 1E                    4197 	.db #0x1E	; 30
      00026A 1E                    4198 	.db #0x1E	; 30
      00026B 1E                    4199 	.db #0x1E	; 30
      00026C 20                    4200 	.db #0x20	; 32
      00026D 30                    4201 	.db #0x30	; 48	'0'
      00026E 41                    4202 	.db #0x41	; 65	'A'
      00026F 50                    4203 	.db #0x50	; 80	'P'
      000270 50                    4204 	.db #0x50	; 80	'P'
      000271 50                    4205 	.db #0x50	; 80	'P'
      000272 50                    4206 	.db #0x50	; 80	'P'
      000273 10                    4207 	.db #0x10	; 16
      000274 20                    4208 	.db #0x20	; 32
      000275 41                    4209 	.db #0x41	; 65	'A'
      000276 83                    4210 	.db #0x83	; 131
      000277 9B                    4211 	.db #0x9B	; 155
      000278 C4                    4212 	.db #0xC4	; 196
      000279 08                    4213 	.db #0x08	; 8
      00027A 0C                    4214 	.db #0x0C	; 12
      00027B 10                    4215 	.db #0x10	; 16
      00027C 18                    4216 	.db #0x18	; 24
      00027D 20                    4217 	.db #0x20	; 32
      00027E 31                    4218 	.db #0x31	; 49	'1'
      00027F 40                    4219 	.db #0x40	; 64
      000280 62                    4220 	.db #0x62	; 98	'b'
      000281 C5                    4221 	.db #0xC5	; 197
      000282 89                    4222 	.db #0x89	; 137
      000283 12                    4223 	.db #0x12	; 18
      000284 A6                    4224 	.db #0xA6	; 166
      000285 9C                    4225 	.db #0x9C	; 156
      000286 31                    4226 	.db #0x31	; 49	'1'
      000287 4A                    4227 	.db #0x4A	; 74	'J'
      000288 62                    4228 	.db #0x62	; 98	'b'
      000289 93                    4229 	.db #0x93	; 147
      00028A C5                    4230 	.db #0xC5	; 197
      00028B 27                    4231 	.db #0x27	; 39
      00028C 00                    4232 	.db #0x00	; 0
      00028D 03                    4233 	.db #0x03	; 3
      00028E 06                    4234 	.db #0x06	; 6
      00028F 0D                    4235 	.db #0x0D	; 13
      000290 1A                    4236 	.db #0x1A	; 26
      000291 1E                    4237 	.db #0x1E	; 30
      000292 26                    4238 	.db #0x26	; 38
      000293 33                    4239 	.db #0x33	; 51	'3'
      000294 4D                    4240 	.db #0x4D	; 77	'M'
      000295 66                    4241 	.db #0x66	; 102	'f'
      000296 9A                    4242 	.db #0x9A	; 154
      000297 CD                    4243 	.db #0xCD	; 205
      000298 FE                    4244 	.db #0xFE	; 254
      000299 FE                    4245 	.db #0xFE	; 254
      00029A                       4246 _power_levels:
      00029A 01                    4247 	.db #0x01	; 1
      00029B 02                    4248 	.db #0x02	; 2
      00029C 05                    4249 	.db #0x05	; 5
      00029D 08                    4250 	.db #0x08	; 8
      00029E 0B                    4251 	.db #0x0B	; 11
      00029F 0E                    4252 	.db #0x0E	; 14
      0002A0 11                    4253 	.db #0x11	; 17
      0002A1 14                    4254 	.db #0x14	; 20
                                   4255 	.area XINIT   (CODE)
                                   4256 	.area CABS    (ABS,CODE)
